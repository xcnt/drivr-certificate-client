name: ci

on: [push, workflow_dispatch]

jobs:
  select-runner-deployment:
    name: select-runner-deployment
    runs-on: default
    outputs:
      runner: ${{ env.RUNNER_DEPLOYMENT }}
    steps:
      - run: echo "RUNNER_DEPLOYMENT=default" >> $GITHUB_ENV
      - run: echo "RUNNER_DEPLOYMENT=renovate" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/renovate')

  docker:
    needs: [select-runner-deployment]
    runs-on: ${{ needs.select-runner-deployment.outputs.runner }}
    steps:
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_REGISTRY_SECRET }}
      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v3
        with:
          repository: xcnt/ghaction-docker-meta
          ref: master
          token: ${{ secrets.CI_AUTH_TOKEN }}
          path: .github/actions/docker-meta
      - name: Docker meta
        id: docker_meta
        uses: ./.github/actions/docker-meta
        with:
          images: |
            eu.gcr.io/xcnt-infrastructure/drivr-certificate-client-build
      - name: Docker meta publish
        id: docker_meta_publish
        uses: ./.github/actions/docker-meta
        with:
          images: |
            eu.gcr.io/xcnt-infrastructure/drivr-certificate-client
      - name: Create Docker Context
        run: docker context create buildx || true
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: buildx
          config-inline: |
            [registry."docker.io"]
              mirrors = ["ci-registry.drivr.dev"]
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.buildTags }}
          target: builder
          build-args: |
            GITHUB_TOKEN=${{ secrets.CI_AUTH_TOKEN }}
            VERSION=${{ env.GITHUB_SHA }}
          platforms: "linux/amd64" # Do only build per default in amd64, releases build arm
          cache-from: type=registry,ref=${{ steps.docker_meta.outputs.cacheTag }}
          cache-to: type=inline

  lint:
    runs-on: ${{ needs.select-runner-deployment.outputs.runner }}
    needs: [select-runner-deployment, docker]
    steps:
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_REGISTRY_SECRET }}
      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v3
        with:
          repository: xcnt/ghaction-docker-meta
          ref: master
          token: ${{ secrets.CI_AUTH_TOKEN }}
          path: .github/actions/docker-meta
      - name: Docker meta
        id: docker_meta
        uses: ./.github/actions/docker-meta
        with:
          images: |
            eu.gcr.io/xcnt-infrastructure/drivr-certificate-client-build
      - uses: actions/checkout@v3
      - name: Patch files
        run: |
          sed -i '/target:/d' docker-compose.yml
          sed -i "s~build:.*~image: ${{ steps.docker_meta.outputs.buildTag }}~g" docker-compose.yml
      - name: Bootup Docker Compose
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 5
          command: docker-compose -f docker-compose.yml up -d
      - name: Run linter
        run: |
          docker-compose -f docker-compose.yml exec -T -e CGO_ENABLED=0 app go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          docker-compose -f docker-compose.yml exec -T -e CGO_ENABLED=0 app golangci-lint run

  tests:
    runs-on: ${{ needs.select-runner-deployment.outputs.runner }}
    needs: [select-runner-deployment, docker]
    steps:
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_REGISTRY_SECRET }}
      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v3
        with:
          repository: xcnt/ghaction-docker-meta
          ref: master
          token: ${{ secrets.CI_AUTH_TOKEN }}
          path: .github/actions/docker-meta
      - name: Docker meta
        id: docker_meta
        uses: ./.github/actions/docker-meta
        with:
          images: |
            eu.gcr.io/xcnt-infrastructure/drivr-certificate-client-build
      - uses: actions/checkout@v3
      - name: Patch files
        run: |
          sed -i '/target:/d' docker-compose.yml
          sed -i "s~build:.*~image: ${{ steps.docker_meta.outputs.buildTag }}~g" docker-compose.yml
      - name: Bootup Docker Compose
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 5
          command: docker-compose -f docker-compose.yml up -d
      - name: Run Unit Tests
        run: |
          docker-compose -f docker-compose.yml exec -T -e CGO_ENABLED=0 app go test ./...

  vulnerability-check:
    runs-on: ${{ needs.select-runner-deployment.outputs.runner }}
    needs: [select-runner-deployment, docker]
    steps:
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_REGISTRY_SECRET }}
      - name: Checkout GitHub Action Repo
        uses: actions/checkout@v3
        with:
          repository: xcnt/ghaction-docker-meta
          ref: master
          token: ${{ secrets.CI_AUTH_TOKEN }}
          path: .github/actions/docker-meta
      - name: Docker meta
        id: docker_meta
        uses: ./.github/actions/docker-meta
        with:
          images: |
            eu.gcr.io/xcnt-infrastructure/drivr-certificate-client-build
      - uses: actions/checkout@v3
      - name: Patch files
        run: |
          sed -i '/target:/d' docker-compose.yml
          sed -i "s~build:.*~image: ${{ steps.docker_meta.outputs.buildTag }}~g" docker-compose.yml
      - name: Bootup Docker Compose
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 5
          command: docker-compose -f docker-compose.yml up -d
      - name: Check for vulnerabilities
        run: |
          docker-compose -f docker-compose.yml exec -T -e CGO_ENABLED=0 app go install golang.org/x/vuln/cmd/govulncheck@latest
          docker-compose -f docker-compose.yml exec -T -e CGO_ENABLED=0 app govulncheck ./...

  release:
    name: "Release"
    needs:
      - select-runner-deployment
      - lint
      - tests
      - vulnerability-check
    runs-on: ${{ needs.select-runner-deployment.outputs.runner }}
    concurrency: release
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Add plugin for conventional commits
        run: npm install conventional-changelog-conventionalcommits
      - name: Release to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.CI_AUTH_TOKEN }}
          GIT_AUTHOR_NAME: XCNT CI
          GIT_AUTHOR_EMAIL: dev-infra@xcnt.io
          GIT_COMMITTER_NAME: XCNT CI
          GIT_COMMITTER_EMAIL: dev-infra@xcnt.io
        run: npx semantic-release

  gorelease:
    needs:
      - select-runner-deployment
      - release
    runs-on: ${{ needs.select-runner-deployment.outputs.runner }}
    steps:
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_REGISTRY_SECRET }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Create Docker Context
        run: docker context create buildx || true
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: buildx
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22.0'
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.CI_AUTH_TOKEN }}

