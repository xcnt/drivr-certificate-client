"""
An account represents either an _Organization_ or a _User_ within DRIVR.
"""
union Account = Organization | OrganizationUnit | User

input AggregateValueField {
  """
  """
  blob: BlobAggregates

  """
  """
  boolean: BooleanAggregates

  """
  """
  count: IntQueryField

  """
  """
  date: DateAggregates

  """
  """
  float: FloatAggregates

  """
  """
  integer: IntegerAggregates

  """
  """
  string: StringAggregates

  """
  """
  time: TimeAggregates

  """
  """
  timespan: TimespanAggregates

  """
  """
  timestamp: TimestampAggregates
}

"An _AggregatedDatapoint_ is an aggregation of datapoints of a single type.\nIt provides access to type-dependant computed fields of the aggregation.\n"
interface AggregatedDatapoint {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type blob.
"""
type AggregatedDatapointBlob implements AggregatedDatapoint {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: String

  """
  The latest datapoint in the aggregation.
  """
  last: String

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type boolean.
"""
type AggregatedDatapointBoolean implements AggregatedDatapoint {
  """
  The average of datapoints in the aggregation.
  """
  avg: Float

  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: Boolean

  """
  The latest datapoint in the aggregation.
  """
  last: Boolean

  """
  The maximal datapoint in the aggregation.
  """
  max: Boolean

  """
  The minimal datapoint in the aggregation.
  """
  min: Boolean

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The sum of datapoints in the aggregation.
  """
  sum: Int

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type date.
"""
type AggregatedDatapointDate implements AggregatedDatapoint {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: Date

  """
  The latest datapoint in the aggregation.
  """
  last: Date

  """
  The maximal datapoint in the aggregation.
  """
  max: Date

  """
  The minimal datapoint in the aggregation.
  """
  min: Date

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type float.
"""
type AggregatedDatapointFloat implements AggregatedDatapoint {
  """
  The average of datapoints in the aggregation.
  """
  avg: Float

  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: Float

  """
  The latest datapoint in the aggregation.
  """
  last: Float

  """
  The maximal datapoint in the aggregation.
  """
  max: Float

  """
  The minimal datapoint in the aggregation.
  """
  min: Float

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The sum of datapoints in the aggregation.
  """
  sum: Float

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
The entity type which aggregated datapoints are grouped by.
"""
enum AggregatedDatapointGroup {
  """
  """
  CHARACTERISTIC

  """
  """
  COMPONENT

  """
  """
  COMPONENT_MODEL

  """
  """
  SERVICE

  """
  """
  SYSTEM

  """
  """
  TIME_STREAM
}

"""
An _AggregatedDatapoint_ of type integer.
"""
type AggregatedDatapointInteger implements AggregatedDatapoint {
  """
  The average of datapoints in the aggregation.
  """
  avg: Float

  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: Int

  """
  The latest datapoint in the aggregation.
  """
  last: Int

  """
  The maximal datapoint in the aggregation.
  """
  max: Int

  """
  The minimal datapoint in the aggregation.
  """
  min: Int

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The sum of datapoints in the aggregation.
  """
  sum: Int

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type string.
"""
type AggregatedDatapointString implements AggregatedDatapoint {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: String

  """
  The latest datapoint in the aggregation.
  """
  last: String

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type time.
"""
type AggregatedDatapointTime implements AggregatedDatapoint {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: Time

  """
  The latest datapoint in the aggregation.
  """
  last: Time

  """
  The maximal datapoint in the aggregation.
  """
  max: Time

  """
  The minimal datapoint in the aggregation.
  """
  min: Time

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type timespan.
"""
type AggregatedDatapointTimespan implements AggregatedDatapoint {
  """
  The average of datapoints in the aggregation.
  """
  avg: Timespan

  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: Timespan

  """
  The latest datapoint in the aggregation.
  """
  last: Timespan

  """
  The maximal datapoint in the aggregation.
  """
  max: Timespan

  """
  The minimal datapoint in the aggregation.
  """
  min: Timespan

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The sum of datapoints in the aggregation.
  """
  sum: Timespan

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
An _AggregatedDatapoint_ of type timestamp.
"""
type AggregatedDatapointTimestamp implements AggregatedDatapoint {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID

  """
  The entity's Component.
  """
  component: Component

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID

  """
  The number of datapoints in the aggregation.
  """
  count: Int!

  """
  The earliest datapoint in the aggregation.
  """
  first: DateTime

  """
  The latest datapoint in the aggregation.
  """
  last: DateTime

  """
  The maximal datapoint in the aggregation.
  """
  max: DateTime

  """
  The minimal datapoint in the aggregation.
  """
  min: DateTime

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The entity's System.
  """
  system: System

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The type of the _AggregatedDatapoint_.
  """
  type: ValueDataType!
}

"""
AggregatedDatapointsWhereQuery provides complex filter over _AggregatedDatapoints_
"""
input AggregatedDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [AggregatedDatapointsWhereQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [AggregatedDatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  The timespan based chunk size by which datapoints are aggregated. Requires `from` and `to` to be set.
  """
  grid: Timespan

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: AggregateValueField
}

"""
A aggregation result for an aggregation query.
"""
type AggregatedEvent {
  """
  The entity which this aggregation item is grouped by.
  """
  groupingEntity: AggregatedEventGroupingEntity

  """
  The amount of items in this group.
  """
  sum: Int!
}

"""
All possible entities which an event aggregation can be grouped by.
"""
union AggregatedEventGroupingEntity =
    Component
  | ComponentModel
  | EventModel
  | EventModelCode
  | System

"""
The entity type by which Events are aggregated for reporting purposes.
This enumeration specifies the entity types that are allowed for aggregation.
"""
enum AggregatedEventGroupingEntityType {
  """
  Group events by the Component
  """
  COMPONENT

  """
  Group the events by the ComponentModel of the attached Components
  """
  COMPONENT_MODEL

  """
  Group events by the EventModel
  """
  EVENT_MODEL

  """
  Group events by EventModel codes
  """
  EVENT_MODEL_CODE

  """
  Group events by the System
  """
  SYSTEM
}

"""
Sorting and ordering options for _AggregatedEvents_.
"""
input AggregatedEventOrderByQuery {
  """
  Order _AggregatedEvent_ by _grouping_ field.
  """
  grouping: OrderByDirection

  """
  Order _AggregatedEvent_ by _sum_ field.
  """
  sum: OrderByDirection
}

"""
The AggregatedEventQuery is a WHERE query that allows you to specify filtersfor retrieving aggregated _Event_ objects based on their attributes.
"""
input AggregatedEventQuery {
  """
  All passed queries must match
  """
  _and: [AggregatedEventQuery]

  """
  One of the passed entities must match
  """
  _or: [AggregatedEventQuery]

  """
  Filter by the acknowledged status of the _Event_.
  """
  acknowledged: BoolQueryField

  """
  Filters that can be used to filter and retrieve _Component_ associated with the _Event_.
  """
  component: NestedComponentQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the end time of the _Event_.
  """
  endTime: DateTimeQueryField

  """
  """
  entity: EventEntities

  """
  Filter by the UUID of the entity associated with the _Event_.
  """
  entityUuid: UuidQueryField

  """
  Filters that can be used to filter and retrieve _EventModel_ associated with the _Event_.
  """
  eventModel: NestedEventModelQuery

  """
  Filter by the type of the _Event_.
  """
  eventType: EventTypeQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the status of the _Event_.
  """
  status: EventStatusQueryField

  """
  Filters that can be used to filter and retrieve _System_ associated with the _Event_. It does not matter if the _Event_ is directly connected to the _System_ or to a _Component_ which is connected to the _System_. This query will resolve both.
  """
  system: NestedSystemQuery

  """
  Filter by the start time of the _Event_.
  """
  time: DateTimeQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Event_.
  """
  uuid: UuidQueryField
}

"""
An entity that represents a api token.
"""
type ApiToken implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The _ApiToken's_ Entity.
  """
  entity: ApiTokenEntity!

  """
  The type of entity of the identity for this _ApiToken_.
  """
  entityType: ApiTokenEntityType!

  """
  The UUID of the _ApiToken's_ Entity.
  """
  entityUuid: UUID!

  """
  The date and time at which the entity becomes invalid.
  """
  expiresAt: DateTime

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A list of authorization scopes available for the entity.
  """
  scopes: [String!]!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  "The secret value of this _ApiToken_. This field is only included on creation and regeneration.\n"
  value: String
}

input ApiTokenEntities {
  """
  Filters that can be used to filter and retrieve _MachineUser_ associated with the _ApiToken_.
  """
  machineUser: NestedMachineUserQuery

  """
  Filters that can be used to filter and retrieve _User_ associated with the _ApiToken_.
  """
  user: NestedUserQuery
}

"""
The entity of a _ApiToken_ which must be of the type specified in the _ApiToken_.
"""
union ApiTokenEntity = MachineUser | User

"""
The type of the entity of the identity for an _ApiToken_.
"""
enum ApiTokenEntityType {
  """
  """
  MACHINE_USER

  """
  """
  USER
}

"""
An `ApiTokenOrderByQuery` allows sorting of _ApiToken_ objects. The available fields for sorting are _uuid, _name_, _description_, _expires_at_, _created_at_ and _updated_at_, _identity_uuid_, _entity_uuid_ and _entity_type_.
"""
input ApiTokenOrderByQuery {
  """
  Order the list by the `created_at` timestamp of the _ApiToken_.
  """
  createdAt: OrderByDirection

  """
  Order the list by the `description` of the _ApiToken_.
  """
  description: OrderByDirection

  """
  Order the list by the `entity_type` of the _ApiToken_.
  """
  entityType: OrderByDirection

  """
  Order the list by the `entity_uuid` of the _ApiToken_.
  """
  entityUuid: OrderByDirection

  """
  Order the list by the `expires_at` timestamp of the _ApiToken_.
  """
  expiresAt: OrderByDirection

  """
  Order the list by the `name` of the _ApiToken_.
  """
  name: OrderByDirection

  """
  Order the list by the `updated_at` timestamp of the _ApiToken_.
  """
  updatedAt: OrderByDirection

  """
  Order the list by the `uuid` of the _ApiToken_.
  """
  uuid: OrderByDirection
}

"""
An `ApiTokenQuery` allows searching for _ApiTokens_. The available fields for filtering and sorting by are _uuid_, _name_, _description_ and _expires_at_.
"""
input ApiTokenQuery {
  """
  All passed queries must match
  """
  _and: [ApiTokenQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ApiTokenQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  A _description_ of the _ApiToken_.
  """
  description: StringQueryField

  """
  """
  entity: ApiTokenEntities

  """
  The type of the entity of the identity the _ApiToken_ belongs to.
  """
  entityType: IdentityEntityTypeQueryField

  """
  The unique identifier of the entity of the identity the _ApiToken_ belongs to.
  """
  entityUuid: UuidQueryField

  """
  The expiration timestamp of the _ApiToken_.
  """
  expiresAt: DateTimeQueryField

  """
  The _name_ of the _ApiToken_.
  """
  name: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The unique identifier for the _ApiToken_.
  """
  uuid: UuidQueryField
}

"An `ApplicationConsumer` represents an application that uses `DRIVR` to authenticate users against the API. This node manages the security of OAuth2 flows.\n"
type ApplicationConsumer implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  If not explicitly set, this field defaults to the first element in `redirect_uris`.
  """
  defaultRedirectUri: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  A list of `grant_types` for the `ApplicationConsumer` that specifies how it can authorize users against the API. The supported grant types are AUTHORIZATION_CODE, REFRESH_TOKEN, and PASSWORD. Must contain at least one entry.
  """
  grantTypes: [GrantType!]!

  """
  The identifier used for the client. This is generated on creation and consists of the `Domain` `hostname` and the `slug`. The format is slug.application-consumer.oem.drivr.cloud. If *multiple* `host_names` are defined on a `Domain`, the `identifier` uses the first `host_name` in the array. If no `host_names` are defined, the `name` of the domain is used.
  """
  identifier: String!

  """
  A non-unique, human-readable identifier for the `ApplicationConsumer`.
  """
  name: String!

  """
  If `true`, then explicit consent is not required for `Identity` entities using the `ApplicationConsumer` to access the API.
  """
  noExplicitConsentRequired: Boolean

  "The _Account_ which owns the entity.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
  owner: Account

  "The UUID of the _Account_ which owns the entity.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
  ownerUuid: UUID

  """
  The `redirect_uris` of the `ApplicationConsumer`. Must have at least one entry if the `grant_type` is AUTHORIZATION_CODE. Multiple entries are supported.
  """
  redirectUris: [String!]

  """
  A paged list of assigned RoleAssignments.
  """
  roleAssignments(
    """
    A list of assignee UUIDs by which to filter. The assignees can be _Users_, _Organizations_, _OrganizationUnits_ or _MachineUsers_.
    """
    assigneeUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  A list of scopes that an `ApplicationConsumer` requires. Must contain at least one entry.
  """
  scopes: [String!]!

  """
  The secret of the `ApplicationConsumer` that can be used to strengthen security guarantees for certain OAuth2 flows.
  """
  secret: String

  """
  A unique, human and machine-readable identifier for the `ApplicationConsumer`.
  """
  slug: String!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _ApplicationConsumers_.
"""
input ApplicationConsumerOrderByQuery {
  """
  """
  createdAt: OrderByDirection

  """
  Order _ApplicationConsumer_ by _default_redirect_uri_ field.
  """
  defaultRedirectUri: OrderByDirection

  """
  Order _ApplicationConsumer_ by _identifier_ field.
  """
  identifier: OrderByDirection

  """
  Order _ApplicationConsumer_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _ApplicationConsumer_ by _no_explicit_consent_required_ field.
  """
  noExplicitConsentRequired: OrderByDirection

  """
  Order _ApplicationConsumer_ by _uuid_ field of associated owner.
  """
  ownerUuid: OrderByDirection

  """
  Order _ApplicationConsumer_ by _secret_ field.
  """
  secret: OrderByDirection

  """
  Order _ApplicationConsumer_ by _slug_ field.
  """
  slug: OrderByDirection

  """
  """
  status: OrderByDirection

  """
  """
  updatedAt: OrderByDirection

  """
  """
  uuid: OrderByDirection
}

"""
ApplicationConsumerQuery provides complex filter over _ApplicationConsumers_
"""
input ApplicationConsumerQuery {
  """
  All passed queries must match
  """
  _and: [ApplicationConsumerQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ApplicationConsumerQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _default_redirect_uri_ of the _ApplicationConsumer_.
  """
  defaultRedirectUri: StringQueryField

  """
  Filter by _identifier_ of the _ApplicationConsumer_.
  """
  identifier: StringQueryField

  """
  Filter by _name_ of the _ApplicationConsumer_.
  """
  name: StringQueryField

  """
  Filter by _no_explicit_consent_required_ of the _ApplicationConsumer_.
  """
  noExplicitConsentRequired: BoolQueryField

  """
  """
  owner: ResourceOwners

  """
  Filter by owner UUID associated with the _ApplicationConsumer_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by _secret_ of the _ApplicationConsumer_.
  """
  secret: StringQueryField

  """
  Filter by _slug_ of the _ApplicationConsumer_.
  """
  slug: StringQueryField

  """
  Filter by _status_ of the _ApplicationConsumer_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField
}

"""
Returns the different types of _DomainAuthenticationMethods_ within DRIVR.
"""
union AuthenticationMethod =
    AzureAuthenticationMethod
  | DefaultAuthenticationMethod
  | GoogleAuthenticationMethod
  | OpenIdDelegatedAuthenticationMethod

"_DomainAuthenticationMethod_ for authenticating against Azure's AD service.\n"
type AzureAuthenticationMethod implements Entity {
  """
  The type of authentication method.
  """
  authenticationType: DomainAuthenticationMethod

  "_Configuration_ options for authentication DRIVR against the Azure AD service.\n"
  configuration: AzureAuthenticationMethodConfiguration

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"_Configuration_ options for Azure's AD service.\n"
type AzureAuthenticationMethodConfiguration {
  "The *client_id* used to authenticate DRIVR against Azure AD service.\n"
  clientId: String!

  "The *client_secret* used to authenticate DRIVR against Azure AD service.\n"
  clientSecret: String!

  "The _tenants_ which should be able to authenticate.\n"
  tenant: String
}

"""
A _LoginMethod_ is a method of authentication that a _User_ can use to authenticate against DRIVR. This indicates the _User_ to be able to authenticate against an Azure AD OAuth Server.
"""
type AzureLoginMethod implements BaseLoginMethod & Entity & GenericOAuthLoginMethod {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethod: AuthenticationMethod

  """
  The UUID of the entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethodUuid: UUID

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The ID the entity is known for on the referenced third party system.
  """
  externalId: String

  """
  The username which is the name indicated by another OAuth server the user should ideally have.
  """
  preferredUsername: String

  """
  The login method type of the entity. Describes the type of authentication which can be used with this _Entity_.
  """
  type: LoginMethod

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The name of the _User_ used for login against DRIVR.
  """
  username: String

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The interface representing any _LoginMethod_ the _User_ has to authenticate against DRIVR.
"""
interface BaseLoginMethod implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethod: AuthenticationMethod

  """
  The UUID of the entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethodUuid: UUID

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The login method type of the entity. Describes the type of authentication which can be used with this _Entity_.
  """
  type: LoginMethod

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The name of the _User_ used for login against DRIVR.
  """
  username: String

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

input BlobAggregates {
  """
  """
  count: IntQueryField

  """
  """
  first: BlobQueryField

  """
  """
  last: BlobQueryField
}

"""
Apply the filter operation to Blob value.
"""
input BlobQueryField {
  """
  Equals
  """
  _eq: String

  """
  Is in the list
  """
  _in: [String]

  """
  Does NOT equal
  """
  _neq: String

  """
  Is NOT in the list
  """
  _nin: [String]

  """
  Is NULL
  """
  _null: Boolean
}

"""
Apply the filter operation to Boolean value.
"""
input BoolQueryField {
  """
  Equals
  """
  _eq: Boolean

  """
  Is in the list
  """
  _in: [Boolean]

  """
  Does NOT equal
  """
  _neq: Boolean

  """
  Is NOT in the list
  """
  _nin: [Boolean]

  """
  Is NULL
  """
  _null: Boolean
}

input BooleanAggregates {
  """
  """
  avg: FloatQueryField

  """
  """
  count: IntQueryField

  """
  """
  first: BoolQueryField

  """
  """
  last: BoolQueryField

  """
  """
  max: FloatQueryField

  """
  """
  min: FloatQueryField

  """
  """
  sum: IntQueryField
}

"A _Certificate_ is a digital document that is issued by a trusted entity called a Certificate Authority (CA) (see: _Issuer_).\nIt serves as a form of identification and is used to verify the authenticity and integrity of a device (_System_ or _Component_) against the DRIVR MQTT Broker and enables secure communication.\n"
type Certificate implements Entity {
  "The certificate for this _Certificate_ as a PEM encoded string.\n"
  certificate: String

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The _Certificate_ csr (certificate signing request) as a PEM encoded string.\n"
  csr: String!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  "The _Certificate_ validity duration.\n"
  duration: Timespan

  """
  The _Certificate's_ Entity.
  """
  entity: CertificateEntity!

  "Describes the _type_ of DRIVR _entity_ an _Certificate_ corresponds to e.g. _Component_ or _System_\n"
  entityType: CertificateEntityType!

  """
  The UUID of the _Certificate's_ Entity.
  """
  entityUuid: UUID!

  "The _Certificate_ expiration time.\n"
  expiresAt: DateTime

  """
  The _Certificate's_ Issuer.
  """
  issuer: Issuer!

  """
  The UUID of the _Certificate's_ Issuer.
  """
  issuerUuid: UUID!

  "The unique `name` of the _Certificate_.\n"
  name: String!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "Describes the allowed usages of the _Certificate_.\n"
  usages: [CertificateUsage!]!

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

input CertificateEntities {
  """
  Filters that can be used to filter and retrieve _Component_ associated with the _Certificate_.
  """
  component: NestedComponentQuery

  """
  Filters that can be used to filter and retrieve _System_ associated with the _Certificate_.
  """
  system: NestedSystemQuery
}

"""
The entity of a _Certificate_ which must be of the type specified in the _Certificate_.
"""
union CertificateEntity = Component | System

"""
The type of entity associated with the _Certificate_.
"""
enum CertificateEntityType {
  """
  A _Component_ of DRIVR the _Certificate_ is used for.
  """
  COMPONENT

  """
  A _System_ of DRIVR the _Certificate_ is used for.
  """
  SYSTEM
}

"""
Apply the filter operation to certificate-entity-type value.
"""
input CertificateEntityTypeQueryField {
  """
  Equals
  """
  _eq: CertificateEntityType

  """
  Is in the list
  """
  _in: [CertificateEntityType]

  """
  Does NOT equal
  """
  _neq: CertificateEntityType

  """
  Is NOT in the list
  """
  _nin: [CertificateEntityType]

  """
  Is NULL
  """
  _null: Boolean
}

"""
Defines the fields by which _Certificates_ can be ordered.
"""
input CertificateOrderByQuery {
  """
  Order _Certificate_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Certificate_ by _entityType_ field.
  """
  entityType: OrderByDirection

  """
  Order _Certificate_ by _uuid_ field of associated entity.
  """
  entityUuid: OrderByDirection

  """
  Order _Certificate_ by _expiresAt_ field.
  """
  expiresAt: OrderByDirection

  """
  Order _Certificate_ by _uuid_ field of associated issuer.
  """
  issuerUuid: OrderByDirection

  """
  Order _Certificate_ by _name_ field.
  """
  name: OrderByDirection

  """
  Orders the list by the `status` of the _Certificate_.
  """
  status: OrderByDirection

  """
  Order _Certificate_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Certificate_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
Retrieves matching _Certificates_ based on specified criteria.
"""
input CertificateQuery {
  """
  All passed queries must match
  """
  _and: [CertificateQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [CertificateQuery]

  """
  The actual PEM encoded certificate of the _Certificate_.
  """
  certificate: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  The PEM encoded CSR of the _Certificate_.
  """
  csr: StringQueryField

  """
  The duration of the _Certificate_.
  """
  duration: TimespanQueryField

  """
  """
  entity: CertificateEntities

  """
  The entity type of the _Certificate_.
  """
  entityType: CertificateEntityTypeQueryField

  """
  The expiration date of the _Certificate_.
  """
  expiresAt: DateTimeQueryField

  """
  The issuer of the _Certificate_.
  """
  issuer: NestedIssuerQuery

  """
  The name of the _Certificate_.
  """
  name: StringQueryField

  """
  Filter by the status of the _Certificate_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Certificate_.
  """
  uuid: UuidQueryField
}

"""
"""
enum CertificateUsage {
  "Client authentication _Certificate_ usage. The _Certificate_ can be used to connect to a server and authenticate to it.\n"
  CLIENT_AUTH

  "Server authentication _Certificate_ usage. The _Certificate_ can be used to authenticate a server to a client.\n"
  SERVER_AUTH
}

"A _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation.\nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial.\n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_.\n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
interface Characteristic implements Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type blob. Blob types store binary data, in GraphQL sent via Base64 encoded strings.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicBlob implements Characteristic & Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type boolean. A boolean value is a binary switch / state.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicBoolean implements Characteristic & Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The data type associated with a _Characteristic_.
"""
enum CharacteristicDataType {
  """
  """
  BLOB

  """
  """
  BOOLEAN

  """
  """
  DATE

  """
  """
  FLOAT

  """
  """
  INTEGER

  """
  """
  JSON

  """
  """
  SELECT

  """
  """
  STRING

  """
  """
  TIME

  """
  """
  TIMESPAN

  """
  """
  TIMESTAMP
}

"""
Apply the filter operation to characteristic-data-type value.
"""
input CharacteristicDataTypeQueryField {
  """
  Equals
  """
  _eq: CharacteristicDataType

  """
  Is in the list
  """
  _in: [CharacteristicDataType]

  """
  Does NOT equal
  """
  _neq: CharacteristicDataType

  """
  Is NOT in the list
  """
  _nin: [CharacteristicDataType]

  """
  Is NULL
  """
  _null: Boolean
}

"A _Characteristic_ of a _Service_ of type date.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicDate implements Characteristic & Entity {
  """
  The upper boundary of allowed values.
  """
  boundaryMax: Date

  """
  The lower boundary of allowed values.
  """
  boundaryMin: Date

  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type float.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicFloat implements Characteristic & Entity {
  """
  The upper boundary of allowed values.
  """
  boundaryMax: Float

  """
  The lower boundary of allowed values.
  """
  boundaryMin: Float

  """
  It represents the step size or increment value. If 'boundary_step' is defined, the 'value' for datapoint or setpoint should be multiple of it.
  """
  boundaryStep: Float

  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  The floating-point precision of values.
  """
  precision: Int

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type integer.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicInteger implements Characteristic & Entity {
  """
  The upper boundary of allowed values.
  """
  boundaryMax: Int

  """
  The lower boundary of allowed values.
  """
  boundaryMin: Int

  """
  It represents the step size or increment value. If 'boundary_step' is defined, the 'value' for datapoint or setpoint should be multiple of it.
  """
  boundaryStep: Int

  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type JSON. \nA JSON _Characteristic_ can have a schema which validates the sent _Setpoints_ or _Datapoints_ to comply to the specific schema.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicJson implements Characteristic & Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  JSON schema for valuepoints.
  """
  schema: String

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Defines the sorting order for _Characteristic_'s
"""
input CharacteristicOrderByQuery {
  """
  Order _Characteristic_ by _characteristicType_ field.
  """
  characteristicType: OrderByDirection

  """
  Order _Characteristic_ by _code_ field.
  """
  code: OrderByDirection

  """
  Order _Characteristic_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Characteristic_ by _dataType_ field.
  """
  dataType: OrderByDirection

  """
  Order _Characteristic_ by _description_ field.
  """
  description: OrderByDirection

  """
  """
  multiple: OrderByDirection

  """
  Order _Characteristic_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _Characteristic_ by _schema_ field.
  """
  schema: OrderByDirection

  """
  Order _Characteristic_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _Characteristic_ by _symbol_ field.
  """
  symbol: OrderByDirection

  """
  Order _Characteristic_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Characteristic_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
_CharacteristicQuery_ provides complex filters over _Characteristic_'s
"""
input CharacteristicQuery {
  """
  All passed queries must match
  """
  _and: [CharacteristicQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [CharacteristicQuery]

  """
  Filter by aggregated _DataPoints_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by _characteristic_type_.
  """
  characteristicType: CharacteristicTypeQueryField

  """
  Filter by _code_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by current _DataPoints_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _data_type_.
  """
  dataType: CharacteristicDataTypeQueryField

  """
  Filter by _DataPoints_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filter by _description_.
  """
  description: StringQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _multiple_.
  """
  multiple: BoolQueryField

  """
  Filter by _name_.
  """
  name: StringQueryField

  """
  """
  service: NestedServiceQuery

  """
  Filter by _status_.
  """
  status: StatusQueryField

  """
  Filter by _symbol_.
  """
  symbol: StringQueryField

  """
  Filter by _TimeStream_.
  """
  timeStreams: NestedTimeStreamQuery

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_.
  """
  uuid: UuidQueryField
}

"A _Characteristic_ of a _Service_ of type SELECT.\nA SELECT field has multiple options which the _Datapoints_ in a _Characteristic_ can have.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicSelect implements Characteristic & Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  Whether the SELECT _Characteristic_ allows multiple options to be selected at the same time.
  """
  multiple: Boolean

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  List of options which can be selected on the _Characteristic_.
  """
  options: [CharacteristicSelectOption!]

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Additional key-value information for a _Characteristic_ SELECT option.
"""
type CharacteristicSelectMeta {
  """
  The meta's key.
  """
  key: String

  """
  The meta's value.
  """
  value: String
}

"""
"""
input CharacteristicSelectMetaQuery {
  """
  The meta's key.
  """
  key: String!

  """
  The meta's value.
  """
  value: String!
}

"""
An option to select _Characteristic_'s by.
"""
type CharacteristicSelectOption {
  """
  The option's autogenerated, serial ID.
  """
  id: Int

  """
  The option's key.
  """
  key: String

  """
  A descriptive label for the option.
  """
  label: String

  """
  Additional key-value information.
  """
  meta: [CharacteristicSelectMeta!]
}

"""
"""
input CharacteristicSelectOptionQuery {
  """
  The option's key.
  """
  key: String!

  """
  A descriptive label for the option.
  """
  label: String!

  """
  Additional metadata in the form of key-value pairs.
  """
  meta: [CharacteristicSelectMetaQuery]
}

"""
A link between a _Service_ and a _Characteristic_.
"""
type CharacteristicServiceLink implements Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type string.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicString implements Characteristic & Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The maximum length of allowed values.
  """
  lengthMax: Int

  """
  The minimum length of allowed values.
  """
  lengthMin: Int

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type time.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicTime implements Characteristic & Entity {
  """
  The upper boundary of allowed values.
  """
  boundaryMax: Time

  """
  The lower boundary of allowed values.
  """
  boundaryMin: Time

  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type timespan.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicTimespan implements Characteristic & Entity {
  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"A _Characteristic_ of a _Service_ of type timestamp.\nA _Characteristic_ can be attached to one or multiple _Services_ via the `addCharacteristicToService` mutation. \nIn DRIVR, a _Characteristic_ models a specific measurement or setting which is sent and received from connected devices.\n_Characteristics_ of type `MEASUREMENT` describe things like temperature, current voltage or open/closed status of a window.\n_Characteristics_ of type `SETTING` describe target values / user-changeable values like target temperature, a virtual switch or a dial. \n`SETTING` _Characteristics_ can be changed with _Setpoints_. The current set state from the connected Devices is sent via _Datapoints_. \n`MEASUREMENT`s only receive _DataPoints_.\n_Characteristics_ can be used to model _DataPoints_ which can track and monitor the performance of _Components_ and _Systems_.\n"
type CharacteristicTimestamp implements Characteristic & Entity {
  """
  The upper boundary of allowed values.
  """
  boundaryMax: DateTime

  """
  The lower boundary of allowed values.
  """
  boundaryMin: DateTime

  """
  The type of the Characteristic.
  """
  characteristicType: CharacteristicType

  """
  A paged list of valid values for the Characteristic.
  """
  characteristicValidValues(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A paged list of Components linked to the Characteristic.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of Services linked to the Characteristic.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The symbol associated with the Characteristic.
  """
  symbol: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The type of a _Characteristic_.
"""
enum CharacteristicType {
  """
  A value sent from a device.
  """
  MEASUREMENT

  """
  A value sent to a device.
  """
  SETTING
}

"""
Apply the filter operation to characteristic-type value.
"""
input CharacteristicTypeQueryField {
  """
  Equals
  """
  _eq: CharacteristicType

  """
  Is in the list
  """
  _in: [CharacteristicType]

  """
  Does NOT equal
  """
  _neq: CharacteristicType

  """
  Is NOT in the list
  """
  _nin: [CharacteristicType]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A valid value definition for a Characteristic.
"""
interface CharacteristicValidValue implements Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
A valid value definition for a _Characteristic_ of type boolean.
"""
type CharacteristicValidValueBoolean implements CharacteristicValidValue & Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  """
  The boolean value representing the valid data for the associated _Characteristic_ instance.
  """
  value: Boolean!
}

"""
A valid value definition for a _Characteristic_ of type float.
"""
type CharacteristicValidValueFloat implements CharacteristicValidValue & Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  """
  The float value representing the valid data for the associated _Characteristic_ instance.
  """
  value: Float!
}

"""
A valid value definition for a _Characteristic_ of type integer.
"""
type CharacteristicValidValueInteger implements CharacteristicValidValue & Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  """
  The integer value representing the valid data for the associated _Characteristic_ instance.
  """
  value: Int!
}

"""
Defines the fields by which _CharacteristicValidValue_ can be ordered.
"""
input CharacteristicValidValueOrderByQuery {
  """
  Orders _CharacteristicValidValues_ by UUID of the associated _Characteristic_ entity.
  """
  characteristicUuid: OrderByDirection

  """
  Orders _CharacteristicValidValues_ by their creation time.
  """
  createdAt: OrderByDirection

  """
  Orders _CharacteristicValidValues_ by their data type.
  """
  dataType: OrderByDirection

  """
  Orders _CharacteristicValidValues_ by their description.
  """
  description: OrderByDirection

  """
  Orders _CharacteristicValidValues_ by their update time.
  """
  updatedAt: OrderByDirection

  """
  Orders _CharacteristicValidValues_ by their UUID.
  """
  uuid: OrderByDirection

  """
  Orders _CharacteristicValidValues_ by their value.
  """
  value: OrderByDirection
}

"""
A valid value definition for a _Characteristic_ of type string.
"""
type CharacteristicValidValueString implements CharacteristicValidValue & Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  """
  The string value representing the valid data for the associated _Characteristic_ instance.
  """
  value: String!
}

"""
A valid value definition for a _Characteristic_ of type time.
"""
type CharacteristicValidValueTime implements CharacteristicValidValue & Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  """
  The timestamp value representing the valid data for the associated _Characteristic_ instance.
  """
  value: Time!
}

"""
A valid value definition for a _Characteristic_ of type timespan.
"""
type CharacteristicValidValueTimespan implements CharacteristicValidValue & Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The data type associated with the entity.
  """
  dataType: CharacteristicDataType!

  """
  A description of the entity.
  """
  description: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!

  """
  The timespan/duration value representing the valid data for the associated _Characteristic_ instance.
  """
  value: Timespan!
}

"A single _Component_ belonging to a _System_. \nExamples of components are `devices`, `gateways`, `modules`, `parts` or `virtual devices`. \n_Components_ can form _ComponentLinks_ and therefore contain other _Components_, or have connective or logical links to other _Components_.\n"
type Component implements Entity {
  """
  A paged list of _Certificates_ belonging to the entity.
  """
  certificates(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CertificateOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Certificates_.
    """
    where: CertificateQuery
  ): PagedCertificates!

  """
  A list of _Characteristics_ linked to the _Component_.
  """
  characteristics(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Characteristics_.
    """
    where: CharacteristicQuery
  ): PagedCharacteristics!

  """
  A human-readable identifier for the _Component_.
  """
  code: String!

  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel!

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID!

  """
  The connection state of the _Component_.
  """
  connectionState: ComponentConnectionState!

  """
  The time when the connection state has been set.
  """
  connectionStateUpdatedAt: DateTime

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  The name of the _Component_.
  """
  name: String

  """
  A list of _Services_ linked to the _Component_.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOnComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over services on _Components_.
    """
    where: ServiceOnComponentQuery
  ): PagedServicesOnComponent!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The entity's System.
  """
  system: System!

  """
  The UUID of the entity's System.
  """
  systemUuid: UUID!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The connection states that a _Component_ can be in.
"""
enum ComponentConnectionState {
  """
  The device has an active connection to DRIVR.
  """
  CONNECTED

  """
  The device has been disconnected from DRIVR.
  """
  DISCONNECTED

  """
  The device does not support reporting its connection state.
  """
  NOT_CONNECTIVE

  """
  The connection state for this device is unknown.
  """
  UNDEFINED
}

"""
Apply the filter operation to component-connection-state value.
"""
input ComponentConnectionStateQueryField {
  """
  Equals
  """
  _eq: ComponentConnectionState

  """
  Is in the list
  """
  _in: [ComponentConnectionState]

  """
  Does NOT equal
  """
  _neq: ComponentConnectionState

  """
  Is NOT in the list
  """
  _nin: [ComponentConnectionState]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A _ComponentModel_ serves as a template for a _Component_.
"""
type ComponentModel implements Entity {
  """
  A human-readable identifier.
  """
  code: String

  """
  Specify the type of the _ComponentModel_.
  """
  componentType: ComponentType!

  """
  A paged list of _Component_ linked to the _ComponentModel_.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A brief description of the _ComponentModel_.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  A toggle setting that allows instantiated _Components_ to report their connection state.
  """
  isConnective: Boolean!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  The name of the _ComponentModel_.
  """
  name: String!

  """
  A paged list of _Services_ linked to the _ComponentModel_.
  """
  services(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOnComponentModelOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over services on _ComponentModels_.
    """
    where: ServiceOnComponentModelQuery
  ): PagedServicesOnComponentModel!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
_ComponentModelOrderByQuery_ provides complex filters over _ComponentModel_'s
"""
input ComponentModelOrderByQuery {
  """
  Order _ComponentModel_ by _code_ field.
  """
  code: OrderByDirection

  """
  Order _ComponentModel_ by _componentType_ field.
  """
  componentType: OrderByDirection

  """
  Order _ComponentModel_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _ComponentModel_ by _description_ field.
  """
  description: OrderByDirection

  """
  Order _ComponentModel_ by _isConnective_ field.
  """
  isConnective: OrderByDirection

  """
  Order _ComponentModel_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _ComponentModel_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _ComponentModel_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _ComponentModel_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
_ComponentModelQuery_ provides complex filters over _Component_'s
"""
input ComponentModelQuery {
  """
  All passed queries must match
  """
  _and: [ComponentModelQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ComponentModelQuery]

  """
  Filter by aggregated _Datapoints_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by `code`.
  """
  code: StringQueryField

  """
  Filter by `component_type`.
  """
  componentType: ComponentTypeQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by current _Datapoints_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filter by `description`.
  """
  description: StringQueryField

  """
  Filter by `is_connective`.
  """
  isConnective: BoolQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by `name`.
  """
  name: StringQueryField

  """
  """
  service: NestedServiceOnComponentModelQuery

  """
  Filter by `status`.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by `uuid`.
  """
  uuid: UuidQueryField
}

"""
Defines the fields by which _Components_ can be ordered.
"""
input ComponentOrderByQuery {
  """
  Order _Component_ by _code_ field.
  """
  code: OrderByDirection

  """
  Order _Component_ by _uuid_ field of associated _ComponentModel_.
  """
  componentModelUuid: OrderByDirection

  """
  Order _Component_ by _connectionState_ field.
  """
  connectionState: OrderByDirection

  """
  Order _Component_ by the time at which the _Component's_ _connectionState_ was last updated.
  """
  connectionStateUpdatedAt: OrderByDirection

  """
  Order _Component_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Component_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _Component_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _Component_ by _uuid_ field of associated _System_.
  """
  systemUuid: OrderByDirection

  """
  Order _Component_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Component_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
Retrieves matching _Components_ based on specified criteria.
"""
input ComponentQuery {
  """
  All passed queries must match
  """
  _and: [ComponentQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ComponentQuery]

  """
  The aggregated datapoints associated with the _Component_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  A human-readable identifier for the _Component_.
  """
  code: StringQueryField

  """
  The model of the _Component_.
  """
  componentModel: NestedComponentModelQuery

  """
  The connection state of the _Component_.
  """
  connectionState: ComponentConnectionStateQueryField

  """
  The time at which the _Component's_ connection state was last updated.
  """
  connectionStateUpdatedAt: DateTimeQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  The current datapoints associated with the _Component_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  The datapoints associated with the _Component_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filters that can be used to filter and retrieve _Events_ associated with the _Component_.
  """
  events: NestedEventFilterQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  The name of the _Component_.
  """
  name: StringQueryField

  """
  """
  service: NestedServiceOnComponentQuery

  """
  The status of the _Component_.
  """
  status: StatusQueryField

  """
  The _System_ that the _Component_ belongs to.
  """
  system: NestedSystemQuery

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Component_.
  """
  uuid: UuidQueryField
}

"""
Enumerates the types of _Components_ that can be associated with a _System_.
"""
enum ComponentType {
  """
  A standalone physical device.
  """
  DEVICE

  """
  A physical device that connects other devices to DRIVR.
  """
  GATEWAY

  """
  A logical entity, such as a data source or software.
  """
  VIRTUAL
}

"""
Apply the filter operation to component-type value.
"""
input ComponentTypeQueryField {
  """
  Equals
  """
  _eq: ComponentType

  """
  Is in the list
  """
  _in: [ComponentType]

  """
  Does NOT equal
  """
  _neq: ComponentType

  """
  Is NOT in the list
  """
  _nin: [ComponentType]

  """
  Is NULL
  """
  _null: Boolean
}

input CreateAzureAuthenticationMethodConfiguration {
  """
  The client id used to authenticate DRIVR against the authentication service.
  """
  clientId: String!

  """
  The secret used to authenticate DRIVR against the authentication service.
  """
  clientSecret: String!

  """
  The tenants which should be able to authenticate.
  """
  tenant: String
}

input CreateGoogleAuthenticationMethodConfiguration {
  """
  The client id used to authenticate DRIVR against the authentication service.
  """
  clientId: String!

  """
  The secret used to authenticate DRIVR against the authentication service.
  """
  clientSecret: String!

  """
  The list of authentication scopes for the authentication service.
  """
  scopes: [String]
}

input CreateOpenIdDelegatedAuthenticationMethodConfiguration {
  """
  The client id of the OAuth application which can be forwarded.
  """
  clientId: String!

  """
  the issuer URL which is pointing to the OpenID provider valid for the given client_id.
  """
  issuer: String!
}

"""
"""
input CurrentDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [CurrentDatapointsWhereQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [CurrentDatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  Filter by _Datapoint_ occurrence.
  """
  time: DateTimeQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: ValueQueryField
}

"""
An entity that represents a data source.
"""
type DataSource implements Entity {
  """
  A human or machine-readable code representing the entity.
  """
  code: String!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A description of the entity.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  A human-readable name representing the entity.
  """
  name: String

  """
  An additional ID for the entity.
  """
  reference: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
A `DataSourceOrderByQuery` allows sorting of _DataSource_ objects. The available fields for sorting are _code_, _created_at_, _name_, _description_, _reference_, _updatedAt_ and _uuid_.
"""
input DataSourceOrderByQuery {
  """
  The _code_ of the _DataSource_.
  """
  code: OrderByDirection

  """
  The date and time at which the _DataSource_ was created.
  """
  createdAt: OrderByDirection

  """
  A brief _description_ of the _DataSource_.
  """
  description: OrderByDirection

  """
  The _name_ of the _DataSource_.
  """
  name: OrderByDirection

  """
  A reference to another system that the _DataSource_ connects to.
  """
  reference: OrderByDirection

  """
  The date and time at which the _DataSource_ was last updated.
  """
  updatedAt: OrderByDirection

  """
  The unique identifier for the _DataSource_.
  """
  uuid: OrderByDirection
}

"""
A `DataSourceQuery` allows searching for _DataSources_. The available fields for filtering and sorting by are _uuid_, _name_, _description_, _reference_ and _code_.
"""
input DataSourceQuery {
  """
  All passed queries must match
  """
  _and: [DataSourceQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DataSourceQuery]

  """
  _Code_ of the _DataSources_.
  """
  code: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  A brief _description_ of the _DataSources_.
  """
  description: StringQueryField

  """
  The _name_ of the _DataSources_.
  """
  name: StringQueryField

  """
  A reference to another system that the _DataSources_ connects to.
  """
  reference: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The unique identifier for the _DataSources_.
  """
  uuid: UuidQueryField
}

"""
A Datapoint in the system.
"""
interface Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!
}

"""
A _Datapoint_ of type blob.
"""
type DatapointBlob implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: String!
}

"""
A _Datapoint_ of type boolean.
"""
type DatapointBoolean implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: Boolean!
}

"""
A _Datapoint_ of type date.
"""
type DatapointDate implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: Date!
}

"""
A _Datapoint_ of type float.
"""
type DatapointFloat implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: Float!
}

"""
"""
input DatapointInputBlob {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The base64-encoded binary data which should be stored into DRIVR.
  """
  value: String!
}

"""
"""
input DatapointInputBoolean {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The boolean value which should be stored into DRIVR.
  """
  value: Boolean!
}

"""
"""
input DatapointInputDate {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The date value which should be stored into DRIVR.
  """
  value: Date!
}

"""
"""
input DatapointInputFloat {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The value must be within the boundary range, and if a boundary_step is specified in the connected _Characteristic_, it must be a multiple of that step. For example, if boundary_min is 2.5, boundary_max is 7.75, and boundary_step is 1.5, valid values would be 2.5, 4.0, 5.5, and 7.0.
  """
  value: Float!
}

"""
"""
input DatapointInputInteger {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The value must be within the boundary range, and if a boundary_step is specified in the connected _Characteristic_,it must be a multiple of that step. For example, if boundary_min is 2, boundary_max is 7, and boundary_step is 2, valid values would be 2, 4 and 6.
  """
  value: Int!
}

"""
"""
input DatapointInputJson {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The string representation of JSON data which should be stored into DRIVR.
  """
  value: JSON!
}

"""
"""
input DatapointInputSelect {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The selected option or options which should be added.
  """
  value: [String]!
}

"""
"""
input DatapointInputString {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The length of string 'value' needs to be given between defined 'length_min' and 'length_max' range of _Characteristic_.
  """
  value: String!
}

"""
"""
input DatapointInputTime {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The time value which should be stored into DRIVR.
  """
  value: Time!
}

"""
"""
input DatapointInputTimespan {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The timespan value which should be stored into DRIVR.
  """
  value: Timespan!
}

"""
"""
input DatapointInputTimestamp {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The date time for the datapoint. If none is passed the current timestamp is used.
  """
  time: DateTime

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The timestamp value which should be stored into DRIVR.
  """
  value: DateTime!
}

"""
A _Datapoint_ of type integer.
"""
type DatapointInteger implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: Int!
}

"""
A _Datapoint_ of type json.
"""
type DatapointJson implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: JSON!
}

"""
"""
input DatapointOrderByQuery {
  """
  """
  characteristicUuid: OrderByDirection

  """
  """
  componentUuid: OrderByDirection

  """
  """
  serviceUuid: OrderByDirection

  """
  """
  systemUuid: OrderByDirection

  """
  """
  time: OrderByDirection

  """
  """
  timeStreamUuid: OrderByDirection
}

"""
A _Datapoint_ of type select. It describes one or multiple options selected from the referenced _Characteristic_.
"""
type DatapointSelect implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: [String!]!
}

"""
A _Datapoint_ of type string.
"""
type DatapointString implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: String!
}

"""
A _Datapoint_ of type time.
"""
type DatapointTime implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: Time!
}

"""
A _Datapoint_ of type timespan.
"""
type DatapointTimespan implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: Timespan!
}

"""
A _Datapoint_ of type timestamp.
"""
type DatapointTimestamp implements Datapoint {
  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the Datapoint contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the Datapoint.
  """
  uuid: UUID!

  """
  The _Datapoint_ value.
  """
  value: DateTime!
}

"""
DatapointsWhereQuery provides complex filter over datapoints_
"""
input DatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [DatapointsWhereQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  Filter by _Datapoint_ occurrence.
  """
  time: DateTimeQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: ValueQueryField
}

"""
The `Date` type represents a Date value as specified by [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

input DateAggregates {
  """
  """
  count: IntQueryField

  """
  """
  first: DateQueryField

  """
  """
  last: DateQueryField

  """
  """
  max: DateQueryField

  """
  """
  min: DateQueryField
}

"""
Apply the filter operation to Date value.
"""
input DateQueryField {
  """
  Equals
  """
  _eq: Date

  """
  Greater than
  """
  _gt: Date

  """
  Greater than or equal
  """
  _gte: Date

  """
  Is in the list
  """
  _in: [Date]

  """
  Less than
  """
  _lt: Date

  """
  Less than or equal
  """
  _lte: Date

  """
  Does NOT equal
  """
  _neq: Date

  """
  Is NOT in the list
  """
  _nin: [Date]

  """
  Is NULL
  """
  _null: Boolean
}

"""
The `DateTime` type represents a DateTime value as specified by [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
Apply the filter operation to DataTime value.
"""
input DateTimeQueryField {
  """
  Equals
  """
  _eq: DateTime

  """
  Greater than
  """
  _gt: DateTime

  """
  Greater than or equal
  """
  _gte: DateTime

  """
  Is in the list
  """
  _in: [DateTime]

  """
  Less than
  """
  _lt: DateTime

  """
  Less than or equal
  """
  _lte: DateTime

  """
  Does NOT equal
  """
  _neq: DateTime

  """
  Is NOT in the list
  """
  _nin: [DateTime]

  """
  Is NULL
  """
  _null: Boolean
}

"Default _DomainAuthenticationMethod_ for authenticating against DRIVR's internal authentication.\n"
type DefaultAuthenticationMethod implements Entity {
  """
  The type of authentication method.
  """
  authenticationType: DomainAuthenticationMethod

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Filter by the default value of datapoints and setpoints
"""
input DefaultValueQueryField {
  """
  """
  boolean: BoolQueryField

  """
  """
  float: FloatQueryField

  """
  """
  integer: IntQueryField

  """
  """
  string: StringQueryField

  """
  """
  timestamp: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

"Represents a specific _AggregatedDistinctDatapoint_ with its metadata.  It provides a summary of _Datapoint_s that have been aggregated by a specific _Characteristic_ or linked _TimeStream_.\n"
interface DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointBlobCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a string.
"""
type DistinctAggregatedDatapointBlobFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a string.
  """
  value: String!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a string.
"""
type DistinctAggregatedDatapointBlobLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a string.
  """
  value: String!
}

"""
Returns the arithmetic average value from a _DistinctAggregatedDatapoint_ as a float.| Example - avg(true, true, true, false, true) = (1+1+1+0+1)/5 = 0.8
"""
type DistinctAggregatedDatapointBooleanAvg implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The arithmetic average value from the _DistinctAggregatedDatapoint_, represented as a float.
  """
  value: Float!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointBooleanCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a boolean.
"""
type DistinctAggregatedDatapointBooleanFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a boolean.
  """
  value: Boolean!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a boolean.
"""
type DistinctAggregatedDatapointBooleanLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a boolean.
  """
  value: Boolean!
}

"""
Returns the maximum value from a _DistinctAggregatedDatapoint_ as a boolean.
"""
type DistinctAggregatedDatapointBooleanMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The maximum value from the _DistinctAggregatedDatapoint_, represented as a boolean.
  """
  value: Boolean!
}

"""
Returns the smallest value from a _DistinctAggregatedDatapoint_ as a boolean.
"""
type DistinctAggregatedDatapointBooleanMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The smallest value from the _DistinctAggregatedDatapoint_, represented as a boolean.
  """
  value: Boolean!
}

"""
Returns the sum of the values from a _DistinctAggregatedDatapoint_ as an integer. Example - sum(true, true, true, true, false) = 1+1+1+1+0 = 4
"""
type DistinctAggregatedDatapointBooleanSum implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The sum of the values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointDateCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a date.
"""
type DistinctAggregatedDatapointDateFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a date.
  """
  value: Date!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a date.
"""
type DistinctAggregatedDatapointDateLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a date.
  """
  value: Date!
}

"""
Returns the newest value based on the value's data from a _DistinctAggregatedDatapoint_ as a date.
"""
type DistinctAggregatedDatapointDateMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the value's data from the _DistinctAggregatedDatapoint_, represented as a date.
  """
  value: Date!
}

"""
Returns the oldest value based on the value's data from a _DistinctAggregatedDatapoint_ as a date.
"""
type DistinctAggregatedDatapointDateMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the value's data from the _DistinctAggregatedDatapoint_, represented as a date.
  """
  value: Date!
}

"""
Returns the arithmetic average value from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointFloatAvg implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The arithmetic average value from the _DistinctAggregatedDatapoint_, represented as a float.
  """
  value: Float!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointFloatCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointFloatFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  "The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a float.\n"
  value: Float!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointFloatLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  "The newest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a float.\n"
  value: Float!
}

"""
Returns the maximum value from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointFloatMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The maximum value from the _DistinctAggregatedDatapoint_, represented as a float.
  """
  value: Float!
}

"""
Returns the smallest value from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointFloatMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The smallest value from the _DistinctAggregatedDatapoint_, represented as a float.
  """
  value: Float!
}

"""
Returns the sum of the values from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointFloatSum implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The sum of the values from the _DistinctAggregatedDatapoint_, represented as a float.
  """
  value: Float!
}

"""
Returns the arithmetic average value from a _DistinctAggregatedDatapoint_ as a float.
"""
type DistinctAggregatedDatapointIntegerAvg implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The arithmetic average value from the _DistinctAggregatedDatapoint_, represented as a float.
  """
  value: Float!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointIntegerCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointIntegerFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointIntegerLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the maximum value from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointIntegerMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The maximum value from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the smallest value from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointIntegerMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The smallest value from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the sum of the values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointIntegerSum implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The sum of the values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointStringCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a string.
"""
type DistinctAggregatedDatapointStringFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a string.
  """
  value: String!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a string.
"""
type DistinctAggregatedDatapointStringLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a string.
  """
  value: String!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointTimeCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a time.
"""
type DistinctAggregatedDatapointTimeFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a time.
  """
  value: Time!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a time.
"""
type DistinctAggregatedDatapointTimeLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a time.
  """
  value: Time!
}

"""
Returns the maximum value from a _DistinctAggregatedDatapoint_ as a time.
"""
type DistinctAggregatedDatapointTimeMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The maximum value from the _DistinctAggregatedDatapoint_, represented as a time.
  """
  value: Time!
}

"""
Returns the smallest value from a _DistinctAggregatedDatapoint_ as a time.
"""
type DistinctAggregatedDatapointTimeMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The smallest value from the _DistinctAggregatedDatapoint_, represented as a time.
  """
  value: Time!
}

"""
Returns the arithmetic average value from a _DistinctAggregatedDatapoint_ as a timespan.
"""
type DistinctAggregatedDatapointTimespanAvg implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The arithmetic average value from the _DistinctAggregatedDatapoint_, represented as a timespan.
  """
  value: Timespan!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointTimespanCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a timespan.
"""
type DistinctAggregatedDatapointTimespanFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a timespan.
  """
  value: Timespan!
}

"""
Returns the newest value based on the timestamp from a _DistinctAggregatedDatapoint_ as a timespan.
"""
type DistinctAggregatedDatapointTimespanLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the timestamp from the _DistinctAggregatedDatapoint_, represented as a timespan.
  """
  value: Timespan!
}

"""
Returns the maximum value from a _DistinctAggregatedDatapoint_ as a timespan.
"""
type DistinctAggregatedDatapointTimespanMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The maximum value from the _DistinctAggregatedDatapoint_, represented as a timespan.
  """
  value: Timespan!
}

"""
Returns the smallest value from a _DistinctAggregatedDatapoint_ as a timespan.
"""
type DistinctAggregatedDatapointTimespanMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The smallest value from the _DistinctAggregatedDatapoint_, represented as a timespan.
  """
  value: Timespan!
}

"""
Returns the sum of the values from a _DistinctAggregatedDatapoint_ as a timespan.
"""
type DistinctAggregatedDatapointTimespanSum implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The sum of the values from the _DistinctAggregatedDatapoint_, represented as a timespan.
  """
  value: Timespan!
}

"""
Returns the count of values from a _DistinctAggregatedDatapoint_ as an integer.
"""
type DistinctAggregatedDatapointTimestampCount implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The count of values from the _DistinctAggregatedDatapoint_, represented as an integer.
  """
  value: Int!
}

"""
Returns the oldest value based on the value's timestamp from a _DistinctAggregatedDatapoint_ as a date_time.
"""
type DistinctAggregatedDatapointTimestampFirst implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The oldest value based on the value's timestamp from the _DistinctAggregatedDatapoint_, represented as a date_time.
  """
  value: DateTime!
}

"""
Returns the newest value based on the value's timestamp from a _DistinctAggregatedDatapoint_ as a date_time.
"""
type DistinctAggregatedDatapointTimestampLast implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The newest value based on the value's timestamp from the _DistinctAggregatedDatapoint_, represented as a date_time.
  """
  value: DateTime!
}

"""
Returns the maximum value from a _DistinctAggregatedDatapoint_ as a _DateTime_.
"""
type DistinctAggregatedDatapointTimestampMax implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The maximum value from the _DistinctAggregatedDatapoint_, represented as a_DateTime_.
  """
  value: DateTime!
}

"""
Returns the smallest value from a _DistinctAggregatedDatapoint_ as a _DateTime_.
"""
type DistinctAggregatedDatapointTimestampMin implements DistinctAggregatedDatapoint {
  """
  Specifies the number of times this datapoint appeared in the group.
  """
  count: Int!

  """
  The smallest value from the _DistinctAggregatedDatapoint_, represented as a _DateTime_.
  """
  value: DateTime!
}

"Represents a set of _AggregatedDistinctDatapoint_.  It provides a summary of data points that have been aggregated by specific _Characteristics_ or linked _TimeStreams_.\n"
interface DistinctAggregatedDatapoints {
  """
  Specifies the distinct data corresponding to this aggregated datapoint.
  """
  datapoints: [DistinctAggregatedDatapoint!]

  """
  Specifies the timestamp of the aggregated datapoint.
  """
  time: DateTime
}

"Represents an _AggregatedDistinctDatapoint_ for _Characteristics_.  It provides a summary of data points that have been aggregated by a specific _Characteristic_.\n"
type DistinctAggregatedDatapointsPerCharacteristic implements DistinctAggregatedDatapoints {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  Specifies the distinct data corresponding to this aggregated datapoint.
  """
  datapoints: [DistinctAggregatedDatapoint!]

  """
  Specifies the timestamp of the aggregated datapoint.
  """
  time: DateTime
}

"Represents an _AggregatedDistinctDatapoint_ for _TimeStreams_.  It provides a summary of data points that have been aggregated by a specific linked _TimeStream_.\n"
type DistinctAggregatedDatapointsPerTimeStream implements DistinctAggregatedDatapoints {
  """
  Specifies the distinct data corresponding to this aggregated datapoint.
  """
  datapoints: [DistinctAggregatedDatapoint!]

  """
  Specifies the timestamp of the aggregated datapoint.
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!
}

"""
A complex filter allowing for more granular filtering over _DistinctAggregatedDatapoints_. Use this filter to build more complex queries for retrieving _DistinctAggregatedDatapoints_.
"""
input DistinctAggregatedDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [DistinctAggregatedDatapointsWhereQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DistinctAggregatedDatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  The timespan based chunk size by which datapoints are aggregated. Requires `from` and `to` to be set.
  """
  grid: Timespan

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: AggregateValueField
}

"Represents a single distinct _Datapoint_.  It provides the common attributes and behavior for all distinct _Datapoint_ types.\n"
interface DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!
}

"Represents a distinct _Datapoint_ for a binary large object (BLOB). It captures the unique BLOB values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointBlob implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type string that represents the specific BLOB value for this _Datapoint_ for a specific time period and time stream.
  """
  value: String!
}

"Represents a distinct _Datapoint_ for a boolean value. Distinct datapoints are used to capture the unique values of a given _Datapoint_ and the frequency of occurrence for a specific time period and time stream.\n"
type DistinctDatapointBoolean implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type boolean that represents the specific data value for this _Datapoint_.
  """
  value: Boolean!
}

"Represents a distinct _Datapoint_ for a date value. It captures the unique date values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointDate implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type date which represents the specific date for this _Datapoint_ for a specific time period and time stream.
  """
  value: Date!
}

"Represents a distinct _Datapoint_ for a float value. It captures the unique float values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointFloat implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type float which represents the specific float value for this _Datapoint_ for a specific time period and time stream.
  """
  value: Float!
}

"""
Defines the groups that distinct _Datapoints_ can belong to.
"""
enum DistinctDatapointGroup {
  """
  Represents a characteristic group of a distinct _Datapoint_
  """
  CHARACTERISTIC

  """
  Represents a group of a distinct _Datapoint_ that is linked to a _TimeStream_.
  """
  TIME_STREAM
}

"Represents a distinct _Datapoint_ for a integer value. It captures the unique integer values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointInteger implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type integer which represents the specific integer value for this _Datapoint_ for a specific time period and time stream.
  """
  value: Int!
}

"Represents a distinct _Datapoint_ for a _Characteristic_. It captures the unique values of a given _Datapoint_'s _Characteristic_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointPerCharacteristic implements DistinctDatapoints {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The list of distinct datapoints.
  """
  datapoints: [DistinctDatapoint!]!

  """
  """
  time: DateTime
}

"Represents a distinct _Datapoint_ for a _TimeStream_. It captures the unique values of a given _Datapoint_'s _TimeStream_, along with the frequency of occurrence, for a specific time period.\n"
type DistinctDatapointPerTimeStream implements DistinctDatapoints {
  """
  The list of distinct datapoints.
  """
  datapoints: [DistinctDatapoint!]!

  """
  """
  time: DateTime

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!
}

"Represents a distinct _Datapoint_ for a string value. It captures the unique string values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointString implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type string which represents the specific string value for this _Datapoint_ for a specific time period and time stream.
  """
  value: String!
}

"Represents a distinct _Datapoint_ for a time value. It captures the unique time values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointTime implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type time which represents the specific time value for this _Datapoint_ for a specific time period and time stream.
  """
  value: Time!
}

"Represents a distinct _Datapoint_ for a timespan value. It captures the unique timespan values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointTimespan implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type timespan which represents the specific timespan value for this _Datapoint_ for a specific time period and time stream.
  """
  value: Timespan!
}

"Represents a distinct _Datapoint_ for a timestamp value. It captures the unique timestamp values of a given _Datapoint_, along with the frequency of occurrence, for a specific time period and time stream.\n"
type DistinctDatapointTimestamp implements DistinctDatapoint {
  """
  Specifies the number of times the distinct _Datapoint_ appeared in the group.
  """
  count: Int!

  """
  A scalar value of type timestamp which represents the specific timestamp value for this _Datapoint_ for a specific time period and time stream.
  """
  value: DateTime!
}

"""
Distinct datapoints for a set of datapoints.
"""
interface DistinctDatapoints {
  """
  The list of distinct datapoints.
  """
  datapoints: [DistinctDatapoint!]!

  """
  """
  time: DateTime
}

"""
A complex filter allowing for more granular filtering over _DistinctDatapoints_. Use this filter to build more complex queries for retrieving _DistinctDatapoints_.
"""
input DistinctDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [DistinctDatapointsWhereQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DistinctDatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  The timespan based chunk size by which datapoints are aggregated. Requires `from` and `to` to be set.
  """
  grid: Timespan

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime
}

"""
Defines the fields by which _DistinctMetadataValues_ can be ordered.
"""
input DistinctMetadataOrderByQuery {
  """
  Orders _DistinctMetadataValues_ based on their _count_ field.
  """
  count: OrderByDirection

  """
  Orders _DistinctMetadataValues_ based on their _key_.
  """
  key: OrderByDirection

  """
  Orders _DistinctMetadataValues_ based on their _metadataTypeUuid_.
  """
  metadataTypeUuid: OrderByDirection

  """
  Orders _DistinctMetadataValues_ based on their _value_.
  """
  value: OrderByDirection
}

"""
Retrieve distinct values for a specific metadata types.
"""
interface DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID
}

"""
Retrieve distinct values for boolean metadata types.
"""
type DistinctMetadataValueBoolean implements DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID

  """
  The boolean value of the specified metadata type.
  """
  value: Boolean
}

"""
Retrieve distinct values for float metadata types.
"""
type DistinctMetadataValueFloat implements DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID

  """
  The float value of the specified metadata type.
  """
  value: Float
}

"""
Retrieve distinct values for integer metadata types.
"""
type DistinctMetadataValueInteger implements DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID

  """
  The integer value of the specified metadata type.
  """
  value: Int
}

"""
A complex filter allowing for more granular filtering over _DistinctMetadataValues_. Use this filter to build more complex queries for retrieving _DistinctMetadataValues_.
"""
input DistinctMetadataValueQuery {
  """
  All passed queries must match
  """
  _and: [DistinctMetadataValueQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DistinctMetadataValueQuery]

  """
  The _Characteristic_ associated with the _DistinctMetadataValues_.
  """
  characteristic: NestedCharacteristicQuery

  """
  The _Component_ associated with the _DistinctMetadataValues_.
  """
  component: NestedComponentQuery

  """
  The _ComponentModel_ associated with the _DistinctMetadataValues_.
  """
  componentModel: NestedComponentModelQuery

  """
  The _UUID_ of the _entity_ the _metadataValue_ belongs to.
  """
  entityUuid: UuidQueryField

  """
  The _Event_ associated with the _DistinctMetadataValues_.
  """
  event: NestedEventQuery

  """
  The _EventModel_ associated with the _DistinctMetadataValues_.
  """
  eventModel: NestedEventModelQuery

  """
  The _MetadataType_ associated with the _DistinctMetadataValues_.
  """
  metadataType: NestedMetadataTypeQuery

  """
  The _UUID_ of the _metadataType_ the _metadataValue_ belongs to.
  """
  metadataTypeUuid: UuidQueryField

  """
  The _Organization_ associated with the _DistinctMetadataValues_.
  """
  organization: NestedOrganizationQuery

  """
  The _OrganizationUnit_ associated with the _DistinctMetadataValues_.
  """
  organizationUnit: NestedOrganizationUnitQuery

  """
  The _Service_ associated with the _DistinctMetadataValues_.
  """
  service: NestedServiceQuery

  """
  The _System_ associated with the _DistinctMetadataValues_.
  """
  system: NestedSystemQuery

  """
  The _User_ associated with the _DistinctMetadataValues_.
  """
  user: NestedUserQuery
}

"""
Retrieve distinct values for string metadata types.
"""
type DistinctMetadataValueString implements DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID

  """
  The string value of the specified metadata type.
  """
  value: String
}

"""
Retrieve distinct values for timestamp metadata types.
"""
type DistinctMetadataValueTimestamp implements DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID

  """
  The timestamp value of the specified metadata type.
  """
  value: DateTime
}

"""
Retrieve distinct values for uuid metadata types.
"""
type DistinctMetadataValueUuid implements DistinctMetadataValue {
  """
  The number of times the metadata value and key combination is stored.
  """
  count: Int

  """
  The name of the field that maps to the specified metadata type. It must be unique of all ACTIVATED metadata types.
  """
  key: String

  """
  The metadata type UUID for the current value.
  """
  metadataTypeUuid: UUID

  """
  The uuid value of the specified metadata type.
  """
  value: UUID
}

"A _Domain_ groups _Users_, _Organizations_ and _Systems_, as well as additional entities like _ComponentModels_, _ComponentServices_, _Characteristics_, and _Datapoints_. \nA _Domain_ is an isolated environment for an individual tenant, normally a company or a team. \nFor example, the `currentDomain` endpoint returns information about the _Domain_ associated with the current _User_'s tenant.\n"
type Domain implements Entity {
  """
  A paged list of *AuthenticationMethods* for the *Domain*.
  """
  authenticationMethods(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DomainAuthenticationMethodOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "Filter the _DomainAuthenticationMethods_ by complex conditions.\nThis can be one or multiple conditions, using field names as keys, and its specific conditions as the value of that key.\n"
    where: DomainAuthenticationMethodQuery
  ): PagedAuthenticationMethods!

  """
  A paged list of ComponentModels belonging to the Domain.
  """
  componentModels(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentModelOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ComponentModels_.
    """
    where: ComponentModelQuery
  ): PagedComponentModels!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A paged list of *DomainFeatures* for the *Domain*. It includes which features are enabled and disabled for the *Domain*.
  """
  domainFeatures(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DomainFeatureOrderByQuery]

    "The unique identifier by which to filter _DomainFeatures_.\nIf specified, only _DomainFeatures_ with the given _slug_ will be returned.\n"
    slug: DomainFeatureSlug

    "A complex filter allowing for more granular filtering over _DomainFeatures_.\nUse this filter to build more complex queries for retrieving _DomainFeatures_.\n"
    where: DomainFeatureQuery
  ): PagedDomainFeatures!

  """
  A list of host names at which the *Domain* can be reached. This can be used to determine whether a given host name is associated and which domains can be used to reach a given *Domain*.
  """
  hostNames: [String!]!

  """
  A non-unique, human-readable identifier for the *Domain*. Something like the company or team name.
  """
  name: String!

  """
  A paged list of Organizations belonging to the Domain.
  """
  organizations(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Organizations_.
    """
    where: OrganizationQuery
  ): PagedOrganizations!

  "The _Account_ which owns the entity.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
  owner: Account

  "The UUID of the _Account_ which owns the entity.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
  ownerUuid: UUID

  """
  A paged list of assigned RoleAssignments.
  """
  roleAssignments(
    """
    A list of assignee UUIDs by which to filter. The assignees can be _Users_, _Organizations_, _OrganizationUnits_ or _MachineUsers_.
    """
    assigneeUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  A unique, human- and machine-readable identifier for the *Domain*. This is used in URLs and other places where a unique identifier is required.
  """
  slug: String!

  """
  The current status of the entity.
  """
  status: Status!

  """
  A paged list of Systems belonging to the Domain.
  """
  systems(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [SystemOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over systems.
    """
    where: SystemQuery
  ): PagedSystems!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  A paged list of *User*s belonging to the *Domain*.
  """
  users(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [UserOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "This `where` filter is used to narrow down the results of the `users` API endpoint.\nThis filter allows for complex querying over _Users_ using fields.\n"
    where: UserQuery
  ): PagedUsers!

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The different types of _DomainAuthenticationMethods_ that can be used with DRIVR's APIs. These methods determine the type of identification or credentials required to successfully authenticate a request before it can be fulfilled.
"""
enum DomainAuthenticationMethod {
  """
  Enables OAUTH authentication against Azure's ActiveDirectory OAUTH service. This allows accounts from this OAuth provider to login into DRIVR with their Azure accounts.
  """
  AZURE_AD

  """
  Setting for DRIVR's built-in authentication. All DRIVR Users which have a password set and have the status `ACTIVATED` can login into DRIVR.
  """
  DEFAULT

  """
  Uses OAUTH authentication against Google's OAUTH services. This allows accounts from this OAuth provider to login into DRIVR with their Google accounts.
  """
  GOOGLE

  """
  Enables OpenID Bearer token delegation to third-party OAuth servers. This enables the capability to use third-party OAuth tokens to authenticate in DRIVR.
  """
  OPEN_ID_BEARER_DELEGATION
}

"""
Specifies which fields can be used to order the results of a _DomainAuthenticationMethod_ query.
"""
input DomainAuthenticationMethodOrderByQuery {
  """
  Order _DomainAuthenticationMethod_ by _authenticationType_ field.
  """
  authenticationType: OrderByDirection

  """
  Order _DomainAuthenticationMethod_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _DomainAuthenticationMethod_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _DomainAuthenticationMethod_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _DomainAuthenticationMethod_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
A complex filter allowing for more granular filtering over _DomainAuthenticationMethods_. Use this filter to build more complex queries for retrieving _DomainAuthenticationMethods_.
"""
input DomainAuthenticationMethodQuery {
  """
  All passed queries must match
  """
  _and: [DomainAuthenticationMethodQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DomainAuthenticationMethodQuery]

  """
  Filter _DomainAuthenticationMethods_ by _authenticationType_.
  """
  authenticationType: DomainAuthenticationMethodQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter _DomainAuthenticationMethods_ by _status_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter _DomainAuthenticationMethods_ by _uuid_.
  """
  uuid: UuidQueryField
}

"""
Apply the filter operation to domain-authentication-method value.
"""
input DomainAuthenticationMethodQueryField {
  """
  Equals
  """
  _eq: DomainAuthenticationMethod

  """
  Is in the list
  """
  _in: [DomainAuthenticationMethod]

  """
  Does NOT equal
  """
  _neq: DomainAuthenticationMethod

  """
  Is NOT in the list
  """
  _nin: [DomainAuthenticationMethod]

  """
  Is NULL
  """
  _null: Boolean
}

"A _DomainFeature_ is a per _Domain_ configuration within DRIVR.\nEach _DomainFeature_ represents a feature flag that can be enabled or disabled on a per tenant basis.\nFor example, a _DomainFeature_ can represent a requirement for users to have an _email_.\n"
type DomainFeature {
  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  "Whether the feature flag is enabled or disabled.\n"
  enabled: Boolean!

  "The unique, machine-readable identifier for the _DomainFeature_.\n"
  slug: DomainFeatureSlug!
}

"""
Specifies which fields can be used to order the results of a _DomainFeature_ query.
"""
input DomainFeatureOrderByQuery {
  """
  Orders _DomainFeatures_ by their enabled status.
  """
  enabled: OrderByDirection

  """
  Orders _DomainFeatures_ by their slug.
  """
  slug: OrderByDirection
}

"""
A complex filter allowing for more granular filtering over _DomainFeatures_. Use this filter to build more complex queries for retrieving _DomainFeatures_.
"""
input DomainFeatureQuery {
  """
  All passed queries must match
  """
  _and: [DomainFeatureQuery]

  """
  One of the passed entities must match
  """
  _or: [DomainFeatureQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the enabled status of the _DomainFeature_.
  """
  enabled: BoolQueryField

  """
  Filter by the slug of the _DomainFeature_.
  """
  slug: DomainFeatureSlugQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

"""
This ENUM outlines the various customizable settings available for a specific _Domain_ within DRIVR.
"""
enum DomainFeatureSlug {
  """
  Determines whether the _User_ belonging to an _Organization_ should be deleted or archived when the _Organization_ is deleted or archived. The default value is `true`.
  """
  DELETE_ARCHIVE_ORGANIZATION_USERS

  """
  Determines whether _Users_ are required to provide an _email_ address when creating an _Account_. The default value is `true`.
  """
  USER_MUST_HAVE_EMAIL

  """
  Whether the _User_ must provide a _password_ when creating an _Account_. The default value is `true`.
  """
  USER_MUST_HAVE_PASSWORD
}

"""
Apply the filter operation to domain-feature-slug value.
"""
input DomainFeatureSlugQueryField {
  """
  Equals
  """
  _eq: DomainFeatureSlug

  """
  Is in the list
  """
  _in: [DomainFeatureSlug]

  """
  Does NOT equal
  """
  _neq: DomainFeatureSlug

  """
  Is NOT in the list
  """
  _nin: [DomainFeatureSlug]

  """
  Is NULL
  """
  _null: Boolean
}

"""
"""
input DomainQuery {
  """
  All passed queries must match
  """
  _and: [DomainQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DomainQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the name of the _Domain_.
  """
  name: StringQueryField

  """
  Filter by the UUID of the owner of the _Domain_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by the slug of the _Domain_.
  """
  slug: StringQueryField

  """
  Filter by the status of the _Domain_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Domain_.
  """
  uuid: UuidQueryField
}

"""
Represents an Empty value.
"""
scalar Empty

"""
An empty response.
"""
type EmptyResult {
  """
  """
  ok: Empty
}

"""
An entity in the system with a unique ID.
"""
interface Entity {
  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
An Event is a single occurrence of a specific EventModel. It contains information such as the start and end time of the event, its status, metadata information, and acknowledgments related to it.
"""
type Event implements Entity {
  """
  A flag indicates if the entity is acknowledged.
  """
  acknowledged: Boolean

  """
  A list of acknowledgments made by users related to this Event. This includes information about the user who made the acknowledgment, the time it was made, and any comments or metadata associated with it. The acknowledgments can be filtered using the `where` queries.
  """
  acks(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [EventAckOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Filter acknowledgments using complex queries.
    """
    where: EventAckWhereQuery
  ): PagedEventAcks!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The end time of the Event.
  """
  endTime: DateTime

  """
  The event's Entity.
  """
  entity: EventEntity

  """
  The UUID of the Event's Entity.
  """
  entityUuid: UUID

  """
  The entity's EventModel.
  """
  eventModel: EventModel

  """
  The UUID of the entity's EventModel.
  """
  eventModelUuid: UUID

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  The current status of the Event.
  """
  status: EventStatus

  """
  The start time of the Event.
  """
  time: DateTime!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
An event acknowledgment indicates if a user has seen the corresponding event. When an event is acknowledged, it is flagged as viewed by the user performing the acknowledgement.
"""
type EventAck implements Entity {
  """
  The UUID of the event that this acknowledgement is for.
  """
  eventUuid: UUID!

  """
  The time when the event has been acknowledged by the user.
  """
  time: DateTime!

  """
  The user that performed the acknowledgment.
  """
  user: User!

  """
  The UUID of the user who has acknowledged the event.
  """
  userUuid: UUID!

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for the _EventAck_ query.
"""
input EventAckOrderByQuery {
  """
  Order _EventAck_ by _time_ field.
  """
  time: OrderByDirection

  """
  Order _EventAck_ by _uuid_ field of associated _User_.
  """
  userUuid: OrderByDirection

  """
  Order _EventAck_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
The EventAckWhereQuery is a WHERE query that allows you to specify filtersfor retrieving _EventAck_ objects based on their attributes.
"""
input EventAckWhereQuery {
  """
  All passed queries must match
  """
  _and: [EventAckWhereQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventAckWhereQuery]

  """
  Filter by the time of the _EventAck_.
  """
  time: DateTimeQueryField

  """
  Filters that can be used to filter and retrieve _Users_ associated with the _EventAck_.
  """
  user: NestedUserQuery

  """
  Filter by the UUID of the user associated with the _EventAck_.
  """
  userUuid: UuidQueryField

  """
  The UUID of the _EventAck_.
  """
  uuid: UuidQueryField
}

input EventEntities {
  """
  Filters that can be used to filter and retrieve _Component_ associated with the _Event_.
  """
  component: NestedComponentQuery

  """
  Filters that can be used to filter and retrieve _System_ associated with the _Event_ .
  """
  system: NestedSystemQuery
}

"""
The entity of an event which must be of the type specified in the Event Model.
"""
union EventEntity = Component | System

"""
The type of DRIVR entity which an _Event_ should be emitted for.
"""
enum EventEntityType {
  """
  Generating _Events_ for this _EventModel_ is only permitted for _Component_ entities.
  """
  COMPONENT

  """
  Allow corresponding _Events_ to only be emitted for _Systems_.
  """
  SYSTEM
}

"""
Apply the filter operation to event-entity-type value.
"""
input EventEntityTypeQueryField {
  """
  Equals
  """
  _eq: EventEntityType

  """
  Is in the list
  """
  _in: [EventEntityType]

  """
  Does NOT equal
  """
  _neq: EventEntityType

  """
  Is NOT in the list
  """
  _nin: [EventEntityType]

  """
  Is NULL
  """
  _null: Boolean
}

"""
"""
input EventFilterQuery {
  """
  All passed queries must match
  """
  _and: [EventFilterQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventFilterQuery]

  """
  Filter by the acknowledged status of the _Event_.
  """
  acknowledged: BoolQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the end time of the _Event_.
  """
  endTime: DateTimeQueryField

  """
  Filter by the UUID of the entity associated with the _Event_.
  """
  entityUuid: UuidQueryField

  """
  Filters that can be used to filter and retrieve _EventModel_ associated with the _Event_.
  """
  eventModel: NestedEventModelQuery

  """
  Filter by the type of the _Event_.
  """
  eventType: EventTypeQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the status of the _Event_.
  """
  status: EventStatusQueryField

  """
  Filter by the start time of the _Event_.
  """
  time: DateTimeQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Event_.
  """
  uuid: UuidQueryField
}

"""
The configuration of the severity of _Events_ is determined by the _event level_ of an _EventModel_.
"""
enum EventLevel {
  """
  Indicates an _Event_ related to an error that has occurred.
  """
  ERROR

  """
  Used for informational _Events_ transmitted to DRIVR.
  """
  INFO

  """
  Outlines a successful _Event_ occurrence.
  """
  SUCCESS

  """
  Relates to a warning _Event_ message.
  """
  WARNING
}

"""
Apply the filter operation to event-level value.
"""
input EventLevelQueryField {
  """
  Equals
  """
  _eq: EventLevel

  """
  Is in the list
  """
  _in: [EventLevel]

  """
  Does NOT equal
  """
  _neq: EventLevel

  """
  Is NOT in the list
  """
  _nin: [EventLevel]

  """
  Is NULL
  """
  _null: Boolean
}

"An _EventModel_ acts as a template for DRIVR _Events_ and is used to model an _Event_ on different types of entities.\nThey outline severity level, the type of _Event_, and define to which type of DRIVR entities \nan _Event_ can be linked to (e.g. a _Component_, _System_).\n"
type EventModel implements Entity {
  "Defines a human-readable identifier for the _EventModel_.\n"
  code: String

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  "Describes the _type_ of DRIVR _entity_ an _Event_ can correspond to e.g. _Component_ or _System_\n"
  entityType: EventEntityType!

  "The configuration of the severity level of the _Events_.\n"
  eventLevel: EventLevel

  "A paged list of _EventModelLinks_ belonging to the _EventModel_.\nThey describe the connection between the _EventModel_ and other DRIVR entities (e.g. _Component_, …).\n"
  eventModelLinks(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [EventModelLinkOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _EventModelLinks_.
    """
    where: EventModelLinkQuery
  ): PagedEventModelLinks!

  "Determines if the _Events_ are of type `SINGLE_POINT` or `RANGED`.\n`SINGLE_POINT` _Events_ are emitted for a single point in time.\n`RANGED` _Events_ are emitted for a range of time.\n"
  eventType: EventType!

  "Whether _Events_ may be emitted for all instances of a specific _EntityType_ or only certain entity prototypes\n(e.g. whether an _Event_ can be emitted for all _Components_ or only for _Components_ that correspond to a certain _ComponentModel_).\nThis can be configured by creating _EventModelLinks_. Can't be set to `true` if the _entity type_ is a _System_.\n"
  limitToPrototypes: Boolean

  "An optional _message_ which can provide more detail about the derived _Events_.\n"
  message: String

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Represents an element that groups together multiple instances of an EventModel using the same code. The code represents a specific type of event that can occur in multiple instances.
"""
type EventModelCode {
  """
  The code of the EventModel instances that this element has been grouped by. The code is a unique identifier that allows instances of the same EventModel type to be grouped together. This field is a required input.
  """
  code: String!
}

"""
A _EventModelLink_ is the relationship between a prototype and `EventModel`. For example, it describes which _ComponentModel_s can feature which _EventModel_.
"""
type EventModelLink implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's EventModel.
  """
  eventModel: EventModel

  """
  The UUID of the entity's EventModel.
  """
  eventModelUuid: UUID

  """
  The entity's Prototype.
  """
  prototype: EventModelPrototype

  """
  The UUID of the entity's Prototype.
  """
  prototypeUuid: UUID

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _EventModelLinks_.
"""
input EventModelLinkOrderByQuery {
  """
  Order _EventModelLink_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _EventModelLink_ by _uuid_ field of associated _EventModel_.
  """
  eventModelUuid: OrderByDirection

  """
  Order _EventModelLink_ by _uuid_ field of associated prototype.
  """
  prototypeUuid: OrderByDirection

  """
  Order _EventModelLink_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _EventModelLink_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _EventModelLink_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
EventModelLinkQuery provides complex filter over _EventModelLinks_
"""
input EventModelLinkQuery {
  """
  All passed queries must match
  """
  _and: [EventModelLinkQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventModelLinkQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _EventModel_ associated with the _EventModelLink_.
  """
  eventModel: NestedEventModelQuery

  """
  Filter by prototype UUID associated with the _EventModelLink_.
  """
  prototypeUuid: UuidQueryField

  """
  Filter by _status_ of the _EventModelLink_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _EventModelLink_.
  """
  uuid: UuidQueryField
}

"""
Sorting and ordering options for _EventModels_.
"""
input EventModelOrderByQuery {
  """
  Order _EventModel_ by _code_ field.
  """
  code: OrderByDirection

  """
  Order _EventModel_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _EventModel_ by _entityType_ field.
  """
  entityType: OrderByDirection

  """
  Order _EventModel_ by the severity level configuration.
  """
  eventLevel: OrderByDirection

  """
  Order _EventModel_ by _eventType_ field.
  """
  eventType: OrderByDirection

  """
  Order _EventModel_ by the _limitToPrototypes_ setting.
  """
  limitToPrototypes: OrderByDirection

  """
  Order _EventModel_ by _message_ field.
  """
  message: OrderByDirection

  """
  Order _EventModel_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _EventModel_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _EventModel_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
The prototype of an event model link which must be of a certain type, depending on the type specified in the event model.
"""
union EventModelPrototype = ComponentModel

"""
A complex filter allowing for more granular filtering over _EventModels_.
"""
input EventModelQuery {
  """
  All passed queries must match
  """
  _and: [EventModelQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventModelQuery]

  """
  Filter by the _code_ of the _EventModel_.
  """
  code: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the _entityType_ of the _EventModel_.
  """
  entityType: EventEntityTypeQueryField

  """
  Filter by the severity level configuration of the _EventModel_.
  """
  eventLevel: EventLevelQueryField

  """
  Filter by the _eventType_ of the _EventModel_.
  """
  eventType: EventTypeQueryField

  """
  Filter by the _limitToPrototypes_ setting of the _EventModel_.
  """
  limitToPrototypes: BoolQueryField

  """
  Filter by the _message_ of the _EventModel_.
  """
  message: StringQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the _status_ of the _EventModel_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the UUID of the _EventModel_.
  """
  uuid: UuidQueryField
}

"""
Sorting and ordering options for _Events_.
"""
input EventOrderByQuery {
  """
  Order _Event_ by _acknowledged_ field.
  """
  acknowledged: OrderByDirection

  """
  Order _Event_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Event_ by _endTime_ field.
  """
  endTime: OrderByDirection

  """
  Order _Event_ by _uuid_ field of associated entity.
  """
  entityUuid: OrderByDirection

  """
  Order _Event_ by _uuid_ field of associated _EventModel_.
  """
  eventModelUuid: OrderByDirection

  """
  Order _Event_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _Event_ by _time_ field.
  """
  time: OrderByDirection

  """
  Order _Event_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Event_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
The EventQuery is a WHERE query that allows you to specify filtersfor retrieving _Event_ objects based on their attributes.
"""
input EventQuery {
  """
  All passed queries must match
  """
  _and: [EventQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventQuery]

  """
  Filter by the acknowledged status of the _Event_.
  """
  acknowledged: BoolQueryField

  """
  Filters that can be used to filter and retrieve _Component_ associated with the _Event_.
  """
  component: NestedComponentQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the end time of the _Event_.
  """
  endTime: DateTimeQueryField

  """
  """
  entity: EventEntities

  """
  Filter by the UUID of the entity associated with the _Event_.
  """
  entityUuid: UuidQueryField

  """
  Filters that can be used to filter and retrieve _EventModel_ associated with the _Event_.
  """
  eventModel: NestedEventModelQuery

  """
  Filter by the type of the _Event_.
  """
  eventType: EventTypeQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the status of the _Event_.
  """
  status: EventStatusQueryField

  """
  Filters that can be used to filter and retrieve _System_ associated with the _Event_. It does not matter if the _Event_ is directly connected to the _System_ or to a _Component_ which is connected to the _System_. This query will resolve both.
  """
  system: NestedSystemQuery

  """
  Filter by the start time of the _Event_.
  """
  time: DateTimeQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Event_.
  """
  uuid: UuidQueryField
}

"""
The status for an Event.
"""
enum EventStatus {
  """
  """
  ACTIVE

  """
  """
  RESOLVED
}

"""
Apply the filter operation to event-status value.
"""
input EventStatusQueryField {
  """
  Equals
  """
  _eq: EventStatus

  """
  Is in the list
  """
  _in: [EventStatus]

  """
  Does NOT equal
  """
  _neq: EventStatus

  """
  Is NOT in the list
  """
  _nin: [EventStatus]

  """
  Is NULL
  """
  _null: Boolean
}

"""
Configuration of the severity level of the derived _Events_.
"""
enum EventType {
  """
  Utilised for _Events_ which occur over a range of time.
  """
  RANGED

  """
  Used for _Events_ emitted for a single point in time.
  """
  SINGLE_POINT
}

"""
Apply the filter operation to event-type value.
"""
input EventTypeQueryField {
  """
  Equals
  """
  _eq: EventType

  """
  Is in the list
  """
  _in: [EventType]

  """
  Does NOT equal
  """
  _neq: EventType

  """
  Is NOT in the list
  """
  _nin: [EventType]

  """
  Is NULL
  """
  _null: Boolean
}

input FloatAggregates {
  """
  """
  avg: FloatQueryField

  """
  """
  count: IntQueryField

  """
  """
  first: FloatQueryField

  """
  """
  last: FloatQueryField

  """
  """
  max: FloatQueryField

  """
  """
  min: FloatQueryField

  """
  """
  sum: FloatQueryField
}

"""
Apply the filter operation to Float value.
"""
input FloatQueryField {
  """
  Equals
  """
  _eq: Float

  """
  Greater than
  """
  _gt: Float

  """
  Greater than or equal
  """
  _gte: Float

  """
  Is in the list
  """
  _in: [Float]

  """
  Less than
  """
  _lt: Float

  """
  Less than or equal
  """
  _lte: Float

  """
  Does NOT equal
  """
  _neq: Float

  """
  Is NOT in the list
  """
  _nin: [Float]

  """
  Is NULL
  """
  _null: Boolean
}

"""
The interface representing a _LoginMethod_ the _User_ has to authenticate against DRIVR via an external OAuth provider.
"""
interface GenericOAuthLoginMethod implements BaseLoginMethod & Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethod: AuthenticationMethod

  """
  The UUID of the entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethodUuid: UUID

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The ID the entity is known for on the referenced third party system.
  """
  externalId: String

  """
  The username which is the name indicated by another OAuth server the user should ideally have.
  """
  preferredUsername: String

  """
  The login method type of the entity. Describes the type of authentication which can be used with this _Entity_.
  """
  type: LoginMethod

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The name of the _User_ used for login against DRIVR.
  """
  username: String

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"_DomainAuthenticationMethod_ for authenticating DRIVR entities against Google's OAUTH service.\n"
type GoogleAuthenticationMethod implements Entity {
  """
  The type of authentication method.
  """
  authenticationType: DomainAuthenticationMethod

  "_Configuration_ for Google's OAUTH service.\n"
  configuration: GoogleAuthenticationMethodConfiguration

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"_Configuration_ options for Google's OAUTH service.\n"
type GoogleAuthenticationMethodConfiguration {
  "The *client_id* used to authenticate DRIVR against the Google authentication service.\n"
  clientId: String!

  "The *client_secret* used to authenticate DRIVR against the Google authentication service.\n"
  clientSecret: String!

  """
  The list of authentication _scopes_ for the Google authentication service.
  """
  scopes: [String!]!
}

"""
A _LoginMethod_ is a method of authentication that a _User_ can use to authenticate against DRIVR. This indicates the _User_ to be able to authenticate against a Google OAuth Server.
"""
type GoogleLoginMethod implements BaseLoginMethod & Entity & GenericOAuthLoginMethod {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethod: AuthenticationMethod

  """
  The UUID of the entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethodUuid: UUID

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The ID the entity is known for on the referenced third party system.
  """
  externalId: String

  """
  The username which is the name indicated by another OAuth server the user should ideally have.
  """
  preferredUsername: String

  """
  The login method type of the entity. Describes the type of authentication which can be used with this _Entity_.
  """
  type: LoginMethod

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The name of the _User_ used for login against DRIVR.
  """
  username: String

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
"""
enum GrantType {
  "For confidential and public clients using a server-based flow such as the authorization code grant type, this is used to exchange an authorization code for an access token.\n"
  AUTHORIZATION_CODE

  "Resource Owner Password Credentials Grant allows exchanging a username and password for an access token.\n"
  PASSWORD

  "Enables the issuance of a refresh token. They are long-lasting credentials used to request additional access tokens. The refresh token is bound to the client to which it was issued. This can be combined with other `grant_types`.\n"
  REFRESH_TOKEN
}

input Having {
  """
  """
  count: IntQueryField
}

"""
The type of entity associated with the _Identity_.
"""
enum IdentityEntityType {
  """
  A _Component_ of DRIVR can authenticate against DRIVR.
  """
  COMPONENT

  """
  A `Connector` is an external application with elevated priveleges which can authenticate against DRIVR. No Entities can be linked to this _Identity_.
  """
  CONNECTOR

  """
  A `MachineUser` is an external application which can authenticate against DRIVR. No Entities can be linked to this _Identity_.
  """
  MACHINE_USER

  """
  A _System_ of DRIVR can authenticate against DRIVR.
  """
  SYSTEM

  """
  A _User_ must attached to this _Identity_ and can authenticate against DRIVR.
  """
  USER
}

"""
Apply the filter operation to identity-entity-type value.
"""
input IdentityEntityTypeQueryField {
  """
  Equals
  """
  _eq: IdentityEntityType

  """
  Is in the list
  """
  _in: [IdentityEntityType]

  """
  Does NOT equal
  """
  _neq: IdentityEntityType

  """
  Is NOT in the list
  """
  _nin: [IdentityEntityType]

  """
  Is NULL
  """
  _null: Boolean
}

"""
Apply the filter operation to Integer value.
"""
input IntQueryField {
  """
  Equals
  """
  _eq: Int

  """
  Greater than
  """
  _gt: Int

  """
  Greater than or equal
  """
  _gte: Int

  """
  Is in the list
  """
  _in: [Int]

  """
  Less than
  """
  _lt: Int

  """
  Less than or equal
  """
  _lte: Int

  """
  Does NOT equal
  """
  _neq: Int

  """
  Is NOT in the list
  """
  _nin: [Int]

  """
  Is NULL
  """
  _null: Boolean
}

input IntegerAggregates {
  """
  """
  avg: FloatQueryField

  """
  """
  count: IntQueryField

  """
  """
  first: IntQueryField

  """
  """
  last: IntQueryField

  """
  """
  max: IntQueryField

  """
  """
  min: IntQueryField

  """
  """
  sum: IntQueryField
}

"""
An _Integration_ models an external application that can authenticate against DRIVR.
"""
type Integration implements Entity {
  """
  The authentication method associated with the _Integration_.
  """
  authentication: IntegrationAuthenticationMethod

  """
  An identifier unique within all activated _Integrations_ belonging to the same _Domain_.
  """
  code: String

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A description of the _Integration_.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID

  """
  The name of the _Integration_.
  """
  name: String

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The authentication method associated with the _Integration_.
"""
enum IntegrationAuthenticationMethod {
  """
  Authentication via an API token.
  """
  API_TOKEN
}

"""
Apply the filter operation to integration-authentication-method value.
"""
input IntegrationAuthenticationMethodQueryField {
  """
  Equals
  """
  _eq: IntegrationAuthenticationMethod

  """
  Is in the list
  """
  _in: [IntegrationAuthenticationMethod]

  """
  Does NOT equal
  """
  _neq: IntegrationAuthenticationMethod

  """
  Is NOT in the list
  """
  _nin: [IntegrationAuthenticationMethod]

  """
  Is NULL
  """
  _null: Boolean
}

"""
Sorting and ordering options for _Integrations_.
"""
input IntegrationOrderByQuery {
  """
  Order _Integration_ by _authentication_ field.
  """
  authentication: OrderByDirection

  """
  Order _Integration_ by _code_ field.
  """
  code: OrderByDirection

  """
  Order _Integration_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Integration_ by _description_ field.
  """
  description: OrderByDirection

  """
  Order _Integration_ by _uuid_ field of associated _Domain_.
  """
  domainUuid: OrderByDirection

  """
  Order _Integration_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _Integration_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _Integration_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Integration_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
IntegrationQuery provides complex filter over _Users_
"""
input IntegrationQuery {
  """
  All passed queries must match
  """
  _and: [IntegrationQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [IntegrationQuery]

  """
  Filter by _authentication_ of the _Integration_.
  """
  authentication: IntegrationAuthenticationMethodQueryField

  """
  Filter by _code_ of the _Integration_.
  """
  code: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _description_ of the _Integration_.
  """
  description: StringQueryField

  """
  Filter by _name_ of the _Integration_.
  """
  name: StringQueryField

  """
  Filter by _status_ of the _Integration_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _Integration_.
  """
  uuid: UuidQueryField
}

"An _Issuer_ is a trusted entity that issues and manages digital _Certificates_.\nThese digital _Certificates_ are used to verify the authenticity of a device (_System_ or _Component_) against the DRIVR MQTT Broker and enables secure communication.\n"
type Issuer implements Entity {
  "The ca (certificate authority) for this _Issuer_ as a base64 encoded string.\n"
  ca: String

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID

  "The unique `name` of the _Issuer_.\n"
  name: String!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _Issuers_.
"""
input IssuerOrderByQuery {
  """
  Order _Issuer_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Issuer_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _Issuer_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Issuer_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
IssuerQuery provides complex filter over _Issuers_
"""
input IssuerQuery {
  """
  All passed queries must match
  """
  _and: [IssuerQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [IssuerQuery]

  """
  Filter by _ca_ of the _Issuer_.
  """
  ca: StringQueryField

  """
  Filter by _Certificates_ associated with the _Issuer_.
  """
  certificates: NestedCertificateQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _name_ of the _Issuer_.
  """
  name: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _Issuer_.
  """
  uuid: UuidQueryField
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).It always returns the data as a serialized JSON string, and it always expects a serialized JSON string as input.
"""
scalar JSON

"""
"""
enum LoginMethod {
  """
  Indicates the entity to be able to login via Azure AD.
  """
  OAUTH_AZURE

  """
  Indicates the entity to be able to login via Google.
  """
  OAUTH_GOOGLE

  """
  Indicates the entity to be able to login via OpenID and not handling the authentication directly within DRIVR. It uses an existing bearer token from another OAuth server.
  """
  OPENID_BEARER

  """
  Indicates the entity to be able to login via a set password.
  """
  PASSWORD
}

"""
Sorting and ordering options for _LoginMethods_.
"""
input LoginMethodOrderByQuery {
  """
  """
  createdAt: OrderByDirection

  """
  Order _LoginMethod_ by _externalId_ field.
  """
  externalId: OrderByDirection

  """
  Order _LoginMethod_ by _preferredUsername_ field.
  """
  preferredUsername: OrderByDirection

  """
  """
  status: OrderByDirection

  """
  Order _LoginMethod_ by _type_ field.
  """
  type: OrderByDirection

  """
  """
  updatedAt: OrderByDirection

  """
  Order _LoginMethod_ by _username_ field.
  """
  username: OrderByDirection

  """
  """
  uuid: OrderByDirection
}

"""
LoginMethodQuery provides complex filters over _LoginMethods_'
"""
input LoginMethodQuery {
  """
  All passed queries must match
  """
  _and: [LoginMethodQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [LoginMethodQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the domain authentication method of the _LoginMethod_.
  """
  domainAuthenticationMethod: NestedDomainAuthenticationMethodQuery

  """
  Filter by the external ID of the _LoginMethod_. This is only set for Azure and Google OAuth and references the ID of the user in the other system.
  """
  externalId: StringQueryField

  """
  Filter by the preferred username of the _LoginMethod_. This is only set for Azure and Google OAuth and references the username of the user in the other system.
  """
  preferredUsername: StringQueryField

  """
  Filter by the status of the _LoginMethod_.
  """
  status: StatusQueryField

  """
  The type of the _LoginMethod_. This defines if the _LoginMethod_ works for Azure, Google OAuth, Password, etc.
  """
  type: LoginMethodQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the user of the _LoginMethod_.
  """
  user: NestedUserQuery

  """
  Filter by the username of the _LoginMethod_.
  """
  username: StringQueryField

  """
  Filter by the UUID of the _LoginMethod_.
  """
  uuid: UuidQueryField
}

"""
Apply the filter operation to login-method value.
"""
input LoginMethodQueryField {
  """
  Equals
  """
  _eq: LoginMethod

  """
  Is in the list
  """
  _in: [LoginMethod]

  """
  Does NOT equal
  """
  _neq: LoginMethod

  """
  Is NOT in the list
  """
  _nin: [LoginMethod]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A _MachineUser_ represents an entity that can authenticate against DRIVR. It usually is a connector or service which requires access to most data of your domain.
"""
type MachineUser implements Entity {
  """
  The machine user's _ApiTokens_.
  """
  apiTokens(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ApiTokenOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ApiTokens_.
    """
    where: ApiTokenQuery
  ): PagedApiTokens!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  A paged list of assigned RoleAssignments.
  """
  roleAssignments(
    """
    A list of entity UUIDs by which to filter.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The username of the _MachineUser_. Must be unique per _Domain_. This is used for the _MachineUser_ as a name for authentication.
  """
  username: String!

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _MachineUsers_.
"""
input MachineUserOrderByQuery {
  """
  """
  createdAt: OrderByDirection

  """
  """
  status: OrderByDirection

  """
  """
  updatedAt: OrderByDirection

  """
  Order _MachineUser_ by _username_ field.
  """
  username: OrderByDirection

  """
  """
  uuid: OrderByDirection
}

"""
MachineUserQuery provides complex filter over _MachineUsers_
"""
input MachineUserQuery {
  """
  All passed queries must match
  """
  _and: [MachineUserQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [MachineUserQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _status_ of the _MachineUser_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _username_ of the _MachineUser_.
  """
  username: StringQueryField

  """
  Filter by _uuid_ of the _MachineUser_.
  """
  uuid: UuidQueryField
}

"""
The `metadata-data-type` enum lists the various data types that can be associated with `MetadataType` entities. Each `MetadataType` entity defines a specific type of metadata that can be added to a specific DRIVR entity, such as _User_, _System_, or _Service_.
"""
enum MetadataDataType {
  """
  A boolean data type represents a true or false value.
  """
  BOOLEAN

  """
  A float data type represents a decimal number
  """
  FLOAT

  """
  An integer data type represents a whole number.
  """
  INTEGER

  """
  A string data type represents a sequence of characters.
  """
  STRING

  """
  A timestamp data type represents a point in time.
  """
  TIMESTAMP

  """
  A UUID data type represents a universally unique identifier.
  """
  UUID
}

"""
Apply the filter operation to metadata-data-type value.
"""
input MetadataDataTypeQueryField {
  """
  Equals
  """
  _eq: MetadataDataType

  """
  Is in the list
  """
  _in: [MetadataDataType]

  """
  Does NOT equal
  """
  _neq: MetadataDataType

  """
  Is NOT in the list
  """
  _nin: [MetadataDataType]

  """
  Is NULL
  """
  _null: Boolean
}

"""
Filter by the metadata value
"""
input MetadataGenericValueQueryField {
  """
  All passed queries must match
  """
  _and: [MetadataGenericValueQueryField]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [MetadataGenericValueQueryField]

  """
  Filter by boolean metadata value
  """
  boolean: BoolQueryField

  """
  Filter by float metadata value
  """
  float: FloatQueryField

  """
  Filter by integer metadata value
  """
  integer: IntQueryField

  """
  Filter by string metadata value
  """
  string: StringQueryField

  """
  Filter by timestamp metadata value
  """
  timestamp: DateTimeQueryField

  """
  Filter by uuid metadata value
  """
  uuid: UuidQueryField
}

"A *MetadataKeyValuePair* represents a way to request metadata set on an entity in a generic value over different *Domain*s.\nIt is used for building applications which do work over multiple DRIVR *Domain*s with different Metadata instead of using the\n*Domain*-specific `metadata` fields on the entities.\n"
interface MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!
}

"""
A *MetadataKeyValuePairBoolean* is a metadata key-value pair that contains a boolean value.
"""
type MetadataKeyValuePairBoolean implements MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!

  """
  The boolean value contained in the *MetadataKeyValuePairBoolean*.
  """
  value: Boolean
}

"""
A *MetadataKeyValuePairFloat* is a metadata key-value pair that contains a float value.
"""
type MetadataKeyValuePairFloat implements MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!

  """
  The float value contained in the *MetadataKeyValuePairFloat*.
  """
  value: Float
}

"""
"""
input MetadataKeyValuePairInput {
  """
  The key of the metadata key-value pair.
  """
  key: String!

  """
  """
  value: MetadataKeyValueValueInput!
}

"""
A *MetadataKeyValuePairInteger* is a metadata key-value pair that contains an integer value.
"""
type MetadataKeyValuePairInteger implements MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!

  """
  The integer value contained in the *MetadataKeyValuePairInteger*.
  """
  value: Int
}

"""
A *MetadataKeyValuePairString* node is a metadata key-value pair that contains a string value.
"""
type MetadataKeyValuePairString implements MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!

  """
  The string value contained in the *MetadataKeyValuePairString*.
  """
  value: String
}

"""
A *MetadataKeyValuePairTimestamp* is a metadata key-value pair that contains a timestamp value.
"""
type MetadataKeyValuePairTimestamp implements MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!

  """
  The timestamp value contained in the *MetadataKeyValuePairTimestamp*.
  """
  value: DateTime
}

"""
A *MetadataKeyValuePairUuid* is a metadata key-value pair that contains a UUID value.
"""
type MetadataKeyValuePairUuid implements MetadataKeyValuePair {
  """
  The metadata data type.
  """
  dataType: MetadataDataType!

  """
  The key of the metadata.
  """
  key: String!

  """
  The UUID of the corresponding MetadataType.
  """
  metadataTypeUuid: String!

  """
  The UUID value contained in the *MetadataKeyValuePairUuid*.
  """
  value: UUID
}

input MetadataKeyValueStoreQueryField {
  """
  """
  key: StringQueryField

  """
  """
  value: MetadataGenericValueQueryField
}

input MetadataKeyValueValueInput {
  """
  """
  boolean: Boolean

  """
  """
  float: Float

  """
  """
  integer: Int

  """
  """
  string: String

  """
  """
  timestamp: DateTime

  """
  """
  uuid: UUID
}

"""
A metadata type for entity types which can be used to configure additional metadata fields.
"""
interface MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
A metadata type for entity types which can be used to configure additional metadata fields for booleans.
"""
type MetadataTypeBoolean implements MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The default value for the metadata type.
  """
  default: Boolean

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The type of entity that the metadata is associated with. The _MetadataEntity_ enum lists the various entity types in DRIVR that support setting metadata.
"""
enum MetadataTypeEntityTypes {
  """
  Represents a measurement or setting specific to a _ComponentModel_.
  """
  CHARACTERISTIC

  """
  Represents the instance of a _ComponentModel_.
  """
  COMPONENT

  """
  Represents a model describing how a _Component_ is structured in DRIVR._Components_ are instances of _ComponentModels_.
  """
  COMPONENT_MODEL

  """
  Represents an occasion in which an activity or event took place within a _System_, _Component_, _Service_, or _Characteristic_. _Events_ include a timestamp._Events_ are instances of _EventModels_.
  """
  EVENT

  """
  Describes a model for how an _Event_ is structured in DRIVR. Events are created based on an _EventModel_.
  """
  EVENT_MODEL

  """
  Represents an _Organization_ within DRIVR that can own _System_ and have users assigned to it.
  """
  ORGANIZATION

  """
  An _OrganizationUnit_ allows to model organizational hierachy structures within DRIVR.
  """
  ORGANIZATION_UNIT

  """
  Describes a collection of _Characteristics_ that share a specific data type configuration.A _Service_ can hold several _Components_.
  """
  SERVICE

  """
  Represents a _System_ within DRIVR, which is a logical grouping of components that provide services.
  """
  SYSTEM

  """
  Represents an individual _User_ who interacts with the application and can own a _System_ within it.
  """
  USER
}

"""
Apply the filter operation to metadata-type-entity-types value.
"""
input MetadataTypeEntityTypesQueryField {
  """
  Equals
  """
  _eq: MetadataTypeEntityTypes

  """
  Is in the list
  """
  _in: [MetadataTypeEntityTypes]

  """
  Does NOT equal
  """
  _neq: MetadataTypeEntityTypes

  """
  Is NOT in the list
  """
  _nin: [MetadataTypeEntityTypes]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A metadata type for entity types which can be used to configure additional metadata fields for floats.
"""
type MetadataTypeFloat implements MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The default value for the metadata type.
  """
  default: Float

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
A metadata type for entity types which can be used to configure additional metadata fields for integers.
"""
type MetadataTypeInteger implements MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The default value for the metadata type.
  """
  default: Int

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  Specifies the individual value within the entities of this metadata type to must be unique.
  """
  unique: Boolean

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _MetadataType_ entities within DRIVR.
"""
input MetadataTypeOrderByQuery {
  """
  Order _MetadataType_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  """
  dataType: OrderByDirection

  """
  """
  defaultValue: OrderByDirection

  """
  Order _MetadataType_ by _description_ field.
  """
  description: OrderByDirection

  """
  Order _MetadataType_ by _entityType_ field.
  """
  entityType: OrderByDirection

  """
  Order _MetadataType_ by _key_ field.
  """
  key: OrderByDirection

  """
  Order _MetadataType_ by _mandatory_ field.
  """
  mandatory: OrderByDirection

  """
  Order _MetadataType_ by _unique_ field.
  """
  unique: OrderByDirection

  """
  Order _MetadataType_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _MetadataType_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
Use this query to filter by _MetadataType_ entities within DRIVR.
"""
input MetadataTypeQuery {
  """
  All passed queries must match
  """
  _and: [MetadataTypeQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [MetadataTypeQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by data type of _MetadataType_.
  """
  dataType: MetadataDataTypeQueryField

  """
  """
  defaults: DefaultValueQueryField

  """
  Filter by description of _MetadataType_.
  """
  description: StringQueryField

  """
  Filter by entity type of _MetadataType_.
  """
  entityType: MetadataTypeEntityTypesQueryField

  """
  Filter by key of _MetadataType_.
  """
  key: StringQueryField

  """
  Filter by unique of _MetadataType_.
  """
  unique: BoolQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by UUID of _MetadataType_.
  """
  uuid: UuidQueryField
}

"""
A metadata type for entity types which can be used to configure additional metadata fields for strings.
"""
type MetadataTypeString implements MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The default value for the metadata type.
  """
  default: String

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  Specifies the individual value within the entities of this metadata type to must be unique.
  """
  unique: Boolean

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
A metadata type for entity types which can be used to configure additional metadata fields for timestamps.
"""
type MetadataTypeTimestamp implements MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The default value for the metadata type.
  """
  default: DateTime

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
A metadata type for entity types which can be used to configure additional metadata fields for uuids.
"""
type MetadataTypeUuid implements MetadataType {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  "The data type for which this metadata type is valid.\nThis determines which type of value may be stored in the metadata values associated with this metadata type.\n"
  dataType: MetadataDataType!

  """
  The default value for the metadata type.
  """
  default: UUID

  """
  The description of the field this metadata type represents.
  """
  description: String

  """
  A paged list of distinct metadata values for the metadata type.
  """
  distinctValues(
    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
  entityType: MetadataTypeEntityTypes!

  "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
  key: String!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

type Mutation {
  """
  Acknowledges an Event within DRIVR, given its UUID. This means that it has been marked as "seen" by the user and will not be flagged as a new event again.
  """
  ackEvent(
    """
    The UUID of the Event to be acknowledged.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Acknowledge a _Setpoint_.
  """
  ackSetpoint(
    """
    An optional message added to the receipt of a _Setpoint_.
    """
    message: String

    """
    The receipt id of the _Setpoint_ to acknowledge.
    """
    receiptId: String!

    """
    The state of the _Setpoint_.
    """
    state: SetpointState!
  ): EmptyResult

  """
  Add a _Characteristic_ to a _Service_. Either codes or uuids for the _Characteristic_ and _Service_ are required.
  """
  addCharacteristicToService(
    """
    The `code` of the _Characteristic_.
    """
    characteristicCode: String

    """
    The `uuid` of the _Characteristic_.
    """
    characteristicUuid: UUID

    """
    The `code` of the _Service_.
    """
    serviceCode: String

    """
    The `uuid` of the _Service_.
    """
    serviceUuid: UUID
  ): CharacteristicServiceLink

  """
  Adds a _Service_ to a _ComponentModel_ object. Either UUIDs or Codes for the _Service_ and _ComponentModel_ are required for the operation.
  """
  addServiceToComponentModel(
    """
    The _code_ of the _ComponentModel_ object to which to add the _Service_.
    """
    componentModelCode: String

    """
    The _UUID_ of the _ComponentModel_ object to which to add the _Service_.
    """
    componentModelUuid: UUID

    """
    The _index_ value of the _Service_ in the _ComponentModel_ object.
    """
    index: Int

    """
    The _code_ of the _Service_ to add to the _ComponentModel_.
    """
    serviceCode: String

    """
    The _UUID_ of the _Service_ object to add to the _ComponentModel_.
    """
    serviceUuid: UUID
  ): ServiceComponentModelLink

  """
  Add a _User_ to an _OrganizationUnit_.
  """
  addUserToOrganizationUnit(
    """
    The UUID of the _OrganizationUnit_ to which to add the _User_.
    """
    organizationUnitUuid: UUID!

    """
    The UUID of the _User_ to add to the _OrganizationUnit_.
    """
    userUuid: UUID!
  ): EmptyResult

  """
  Creates an _ApplicationConsumer_ that acts as an API user or client, for authenticating against DRIVR and accessing its APIs, enabling external applications to interact with DRIVR on behalf of authenticated users, devices, applications, or connectors.
  """
  createApplicationConsumer(
    """
    If not explicitly set, it defaults to the first element in `redirect_uris`.
    """
    defaultRedirectUri: String

    """
    An `ApplicationConsumer` must have a list of `grant_types` with at least one entry. They represent how the application can authorize users against the API.
    """
    grantTypes: [GrantType]!

    """
    The `name` of the `ApplicationConsumer`.
    """
    name: String!

    """
    Attribute which verifies if `Identity` entities which use the Application needs to give explicit consent for API access.
    """
    noExplicitConsentRequired: Boolean

    "The UUID of the `Account` which owns the `ApplicationConsumer`.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
    ownerUuid: UUID

    """
    The `redirect_uris` of the `ApplicationConsumer`. Must have at least one `redirect_uris` entry if the `grant_type=AUTHORIZATION_CODE`. Multiple entires are supported.
    """
    redirectUris: [String]

    """
    An `ApplicationConsumer` must have at least one `scopes` entry. Multiple entires are supported and they indicate which scopes a certain `ApplicationConsumer` requires.
    """
    scopes: [String]!

    """
    The secret of the `ApplicationConsumer` which is used for strengthened security guarantees for certain OAuth2 flows.
    """
    secret: String

    """
    The slug of the `ApplicationConsumer` which must be unique within the `Domain`. This will be prepended to the `Domain`'s hostname to create the consumer's identifier.
    """
    slug: String!

    """
    The status of the `ApplicationConsumer`.
    """
    status: Status
  ): ApplicationConsumer

  "Create a new _DomainAuthenticationMethod_ for authenticating accounts from the Azure AD.\nOnly one _AzureDomainAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  createAzureAuthenticationMethod(
    "The _configuration_ details which should be used to register DRIVR at the Azure Portal in order to allow Azure Accounts to authenticate themselves.\n"
    configuration: CreateAzureAuthenticationMethodConfiguration

    "The _status_ of the _AzureDomainAuthenticationMethod_.\nCan not be `ARCHIVED` on creation.\n"
    status: Status
  ): AzureAuthenticationMethod

  "Creates a _Certificate_ for an _Issuer_ and a DRIVR _Component_ or _System_.\n"
  createCertificate(
    """
    The csr for the _Certificate_ as a PEM encoded string.
    """
    csr: String!

    "The _Certificate_ validity duration. Can not be a negative duration.\n"
    duration: Timespan

    """
    The UUID of the _Component_ or _System_ which the _Certificate_ should be assigned to.
    """
    entityUuid: UUID!

    """
    The UUID of the _Issuer_ which the _Certificate_ belongs to.
    """
    issuerUuid: UUID!

    "The name for the _Certificate_. Has to be unique within the Domain.\nA _Certificate_ name must not contain any special characters or white spaces.\n"
    name: String!

    """
    The status of the _Certificate_.
    """
    status: Status

    "Describes the allowed usages of the _Certificate_. Defaults to `CLIENT_AUTH`.\n"
    usages: [CertificateUsage]
  ): Certificate

  """
  Create a new _Characteristic_. A _Characteristic_ groups values of the same kind and has a distinct data type. Refer to the individual _Characteristic_ nodes for a more detailed description.
  """
  createCharacteristic(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The _Characteristic_'s data type.
    """
    dataType: CharacteristicDataType!

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): Characteristic

  """
  Create a new blob _Characteristic_. Refer to the returned _CharacteristicBlob_ node for a more detailed description.
  """
  createCharacteristicBlob(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicBlob

  """
  Create a new boolean _Characteristic_. Refer to the returned _CharacteristicBoolean_ node for a more detailed description.
  """
  createCharacteristicBoolean(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicBoolean

  """
  Create a new date _Characteristic_. Refer to the returned _CharacteristicDate_ node for a more detailed description.
  """
  createCharacteristicDate(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Date

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Date

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicDate

  """
  Create a new float _Characteristic_. Refer to the returned _CharacteristicFloat_ node for a more detailed description.
  """
  createCharacteristicFloat(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Float

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Float

    """
    It represents the step size or increment value.
    """
    boundaryStep: Float

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The floating-point precision of values.
    """
    precision: Int

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicFloat

  """
  Create a new integer _Characteristic_. Refer to the returned _CharacteristicInteger_ node for a more detailed description.
  """
  createCharacteristicInteger(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Int

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Int

    """
    It represents the step size or increment value.
    """
    boundaryStep: Int

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicInteger

  """
  Create a new JSON _Characteristic_. Refer to the returned _CharacteristicJson_ node for a more detailed description.
  """
  createCharacteristicJson(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    JSON schema for valuepoints.
    """
    schema: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicJson

  """
  Create a new SELECT _Characteristic_. Refer to the returned _CharacteristicSelect_ node for a more detailed description.
  """
  createCharacteristicSelect(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    Whether the SELECT Characteristic allows multiple options to be selected at the same time.
    """
    multiple: Boolean

    """
    The name of the Characteristic.
    """
    name: String!

    """
    List of options which can be selected on the Characteristic.
    """
    options: [CharacteristicSelectOptionQuery]

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicSelect

  """
  Create a new string _Characteristic_. Refer to the returned _CharacteristicString_ node for a more detailed description.
  """
  createCharacteristicString(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The maximum length of allowed values.
    """
    lengthMax: Int

    """
    The minimum length of allowed values.
    """
    lengthMin: Int

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicString

  """
  Create a new time _Characteristic_. Refer to the returned _CharacteristicTime_ node for a more detailed description.
  """
  createCharacteristicTime(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Time

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Time

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicTime

  """
  Create a new timespan _Characteristic_. Refer to the returned _CharacteristicTimespan_ node for a more detailed description.
  """
  createCharacteristicTimespan(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicTimespan

  """
  Create a new timestamp _Characteristic_. Refer to the returned _CharacteristicTimestamp_ node for a more detailed description.
  """
  createCharacteristicTimestamp(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: DateTime

    """
    The lower boundary of allowed values.
    """
    boundaryMin: DateTime

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String!

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String
  ): CharacteristicTimestamp

  """
  Create a new _CharacteristicValidValue_ of type boolean.
  """
  createCharacteristicValidValueBoolean(
    """
    The UUID of the Characteristic for which the value is valid.
    """
    characteristicUuid: UUID!

    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The value of the _CharacteristicValidValue_.
    """
    value: Boolean!
  ): CharacteristicValidValueBoolean

  """
  Create a new _CharacteristicValidValue_ of type float.
  """
  createCharacteristicValidValueFloat(
    """
    The UUID of the Characteristic for which the value is valid.
    """
    characteristicUuid: UUID!

    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The value of the _CharacteristicValidValue_.
    """
    value: Float!
  ): CharacteristicValidValueFloat

  """
  Create a new _CharacteristicValidValue_ of type integer.
  """
  createCharacteristicValidValueInteger(
    """
    The UUID of the Characteristic for which the value is valid.
    """
    characteristicUuid: UUID!

    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The value of the _CharacteristicValidValue_.
    """
    value: Int!
  ): CharacteristicValidValueInteger

  """
  Create a new _CharacteristicValidValue_ of type string.
  """
  createCharacteristicValidValueString(
    """
    The UUID of the Characteristic for which the value is valid.
    """
    characteristicUuid: UUID!

    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The value of the _CharacteristicValidValue_.
    """
    value: String!
  ): CharacteristicValidValueString

  """
  Create a new _CharacteristicValidValue_ of type time.
  """
  createCharacteristicValidValueTime(
    """
    The UUID of the Characteristic for which the value is valid.
    """
    characteristicUuid: UUID!

    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The value of the _CharacteristicValidValue_.
    """
    value: Time!
  ): CharacteristicValidValueTime

  """
  Create a new _CharacteristicValidValue_ of type timespan.
  """
  createCharacteristicValidValueTimespan(
    """
    The UUID of the Characteristic for which the value is valid.
    """
    characteristicUuid: UUID!

    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The value of the _CharacteristicValidValue_.
    """
    value: Timespan!
  ): CharacteristicValidValueTimespan

  """
  Creates a new _Component_.
  """
  createComponent(
    """
    A human-readable identifier for the _Component_.
    """
    code: String!

    """
    The UUID of the _ComponentModel_ from which the _Component_ is created.
    """
    componentModelUuid: UUID!

    """
    The connection state of the _Component_.
    """
    connectionState: ComponentConnectionState

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the _Component_.
    """
    name: String

    """
    The status of the _Component_.
    """
    status: Status

    """
    The UUID of the _System_ to which the _Component_ belongs.
    """
    systemUuid: UUID!
  ): Component

  "This endpoint creates a new _ComponentModel_ object.\n"
  createComponentModel(
    "A human-readable identifier for the _ComponentModel_.\n"
    code: String

    "The type of the _ComponentModel_. Values are restricted to the `component-type` enum.\n"
    componentType: ComponentType!

    "A description of the _ComponentModel_.\n"
    description: String

    "A setting which allows instantiated _Component_ to report their connection state.\n"
    isConnective: Boolean

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    "The name of the _ComponentModel_.\n"
    name: String!

    "The status of the _ComponentModel_. Values are restricted to the `status` enum.\n"
    status: Status
  ): ComponentModel

  """
  Create a new _DataSource_.
  """
  createDataSource(
    """
    The code of the _DataSource_.
    """
    code: String!

    """
    The description of the _DataSource_.
    """
    description: String

    """
    The name of the _DataSource_.
    """
    name: String

    """
    The reference of the _DataSource_, serving as an additional identifier.
    """
    reference: String
  ): DataSource

  """
  Create _Datapoints_ of type blob.
  """
  createDatapointBlob(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputBlob]!
  ): EmptyResult

  """
  Create _Datapoints_ of type boolean.
  """
  createDatapointBoolean(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputBoolean]!
  ): EmptyResult

  """
  Create _Datapoints_ of type date.
  """
  createDatapointDate(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputDate]!
  ): EmptyResult

  """
  Create _Datapoints_ of type float.
  """
  createDatapointFloat(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputFloat]!
  ): EmptyResult

  """
  Create _Datapoints_ of type integer.
  """
  createDatapointInteger(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputInteger]!
  ): EmptyResult

  """
  Create _Datapoints_ of type json.
  """
  createDatapointJson(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputJson]!
  ): EmptyResult

  """
  Create _Datapoints_ of type select.
  """
  createDatapointSelect(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputSelect]!
  ): EmptyResult

  """
  Create _Datapoints_ of type string.
  """
  createDatapointString(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputString]!
  ): EmptyResult

  """
  Create _Datapoints_ of type time.
  """
  createDatapointTime(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputTime]!
  ): EmptyResult

  """
  Create _Datapoints_ of type timespan.
  """
  createDatapointTimespan(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputTimespan]!
  ): EmptyResult

  """
  Create _Datapoints_ of type timestamp.
  """
  createDatapointTimestamp(
    """
    The _Datapoints_ to create.
    """
    datapoints: [DatapointInputTimestamp]!
  ): EmptyResult

  "Create an _DomainAuthenticationMethod_ of type `DEFAULT`.\nThis is used to setup DRIVR's internal OAuth2 authentication and allows DRIVR User with a password authenticate themselves.\nOnly one _DomainAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  createDefaultAuthenticationMethod(
    "The _status_ of the _DefaultDomainAuthenticationMethod_.\n"
    status: Status
  ): DefaultAuthenticationMethod

  """
  Creates a new Event within DRIVR, given the UUIDs of the Entity and EventModel, and optionally, the start and end timestamps of the event.
  """
  createEvent(
    """
    The end date and time for the Event. If no value is passed, the current timestamp is used.
    """
    endTime: DateTime

    """
    The UUID of the Entity to which the Event belongs.
    """
    entityUuid: UUID!

    """
    The UUID of the EventModel which the Event is created from.
    """
    eventModelUuid: UUID!

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The start date and time for the Event. If no value is passed, the current timestamp is used.
    """
    time: DateTime
  ): Event

  "Create a new _EventModel_ based on the arguments provided.\n"
  createEventModel(
    "Defines a human-readable identifier for the _EventModel_.\n"
    code: String

    "Describes the _type_ of DRIVR _entity_ an _Event_ can correspond to e.g. _Component_, _System_, ….\n"
    entityType: EventEntityType!

    "The event level of the _EventModel_.\n"
    eventLevel: EventLevel

    "Determines if the _Events_ are of type `SINGLE_POINT` or `RANGED`.\n`SINGLE_POINT` _Events_ are emitted for a single point in time.\n`RANGED` _Events_ are emitted for a range of time.\n"
    eventType: EventType!

    "Whether _Events_ may be emitted for all instances of a specific _EntityType_ or only certain DRIVR entity prototypes\n(e.g. whether an _Event_ can be emitted for all _Components_ or only for _Components_ that correspond to certain _ComponentModels_).\nThis can be set by creating _EventModelLinks_. Can't be `true` if _entity type_ is _System_.\n"
    limitToPrototypes: Boolean

    "An optional _message_ which can provide more detail about the derived _Events_.\n"
    message: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    "The _status_ of the _EventModel_ which can be `ACTIVATED` or `DEACTIVATED`.\n`ARCHIVED` is not allowed for newly created _EventModels_.\n"
    status: Status
  ): EventModel

  """
  This endpoint creates a new _EventModelLink_.
  """
  createEventModelLink(
    """
    The UUID of the _EventModel_ associated with the _EventModelLink_.
    """
    eventModelUuid: UUID!

    """
    The UUID of the new _EventModelLink_ to be created.
    """
    prototypeUuid: UUID!

    """
    The status of the new _EventModelLink_.
    """
    status: Status
  ): EventModelLink

  "Create a new _DomainAuthenticationMethod_ which allows authentication with Google Accounts.\nOnly one _GoogleAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  createGoogleAuthenticationMethod(
    "The _configuration_ settings of the _DomainAuthenticationMethod_ for Google Account authentication.\n"
    configuration: CreateGoogleAuthenticationMethodConfiguration

    "The _status_ of the _GoogleAuthenticationMethod_.\nThis can not be `ARCHIVED` on creation.\n"
    status: Status
  ): GoogleAuthenticationMethod

  """
  Creates a _MachineUser_ with the provided parameters.
  """
  createMachineUser(
    "The password of the _MachineUser_ to be created. This is used to login to DRIVR with the machine user's rights.\n"
    password: String!

    """
    The status of the _MachineUser_. Defaults to `ACTIVATED`.
    """
    status: Status

    "The name of the _MachineUser_ to be created. This is used to login to DRIVR with the machine user's rights.\n"
    username: String!
  ): MachineUser

  """
  Create a new _ApiToken_ for a _MachineUser_.
  """
  createMachineUserApiToken(
    """
    The description of the _ApiToken_.
    """
    description: String

    """
    The expiration timestamp of the _ApiToken_.
    """
    expiresAt: DateTime

    """
    The UUID of the _MachineUser_ to create the _ApiToken_ for.
    """
    machineUserUuid: UUID!

    """
    The name of the _ApiToken_.
    """
    name: String!
  ): ApiToken

  """
  Creates a new _MetadataType_ for storing boolean values.
  """
  createMetadataTypeBoolean(
    "The default value for this metadata field.\n"
    default: Boolean

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes!

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String!
  ): MetadataTypeBoolean

  """
  Creates a new _MetadataType_ for storing float values.
  """
  createMetadataTypeFloat(
    "The default value for this metadata field.\n"
    default: Float

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes!

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String!
  ): MetadataTypeFloat

  """
  Creates a new _MetadataType_ for storing integer values.
  """
  createMetadataTypeInteger(
    "The default value for this metadata field.\n"
    default: Int

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes!

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String!

    """
    Specifies the individual value within the entities of this metadata type to must be unique.
    """
    unique: Boolean
  ): MetadataTypeInteger

  """
  Creates a new _MetadataType_ for storing string values.
  """
  createMetadataTypeString(
    "The default value for this metadata field.\n"
    default: String

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes!

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String!

    """
    Specifies the individual value within the entities of this metadata type to must be unique.
    """
    unique: Boolean
  ): MetadataTypeString

  """
  Creates a new _MetadataType_ for storing timestamp values.
  """
  createMetadataTypeTimestamp(
    "The default value for this metadata field.\n"
    default: DateTime

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes!

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String!
  ): MetadataTypeTimestamp

  """
  Creates a new _MetadataType_ for storing UUID values.
  """
  createMetadataTypeUuid(
    "The default value for this metadata field.\n"
    default: UUID

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes!

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String!
  ): MetadataTypeUuid

  "Create a new OpenID Bearer token delegation _DomainAuthenticationMethod_.\nThe _OpenIdDelegatedAuthenticationMethod_ is used to authenticate accounts from a third party OpenID Provider with a provided bearer token.\nOnly one _OpenIdDelegatedAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  createOpenIdDelegatedAuthenticationMethod(
    "The _configuration_ of the _DomainAuthenticationMethod_ in order to setup validation of provided bearer tokens for authentication.\n"
    configuration: CreateOpenIdDelegatedAuthenticationMethodConfiguration

    """
    The status of the Authentication Method.
    """
    status: Status
  ): OpenIdDelegatedAuthenticationMethod

  """
  Creates a new _Organization_ in the system. An _Organization_ is a company or department which can own _Systems_. An _Organization_ can be owned by a _User_.
  """
  createOrganization(
    """
    The alias name of the _Organization_.
    """
    alias: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the _Organization_.
    """
    name: String!

    "The UUID of the `User` which owns the entity.\nThis is an informational field only.\n"
    ownerUuid: UUID

    """
    The status of the _Organization_.
    """
    status: Status
  ): Organization

  """
  Creates a new _OrganizationUnit_.
  """
  createOrganizationUnit(
    """
    The _alias_ of the _OrganizationUnit_. Has to be unique within the _Organization_ the unit is attached to.
    """
    alias: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The _name_ of the _OrganizationUnit_.
    """
    name: String!

    """
    The UUID of the _Organization_.
    """
    organizationUuid: UUID!

    """
    The UUID of the parent _OrganizationUnit_.
    """
    parentOrganizationUnitUuid: UUID

    """
    The _status_ of the _OrganizationUnit_.
    """
    status: Status
  ): OrganizationUnit

  """
  Creates a _PasswordLoginMethod_ with the provided parameters.
  """
  createPasswordLoginMethod(
    "The password of the _PasswordLoginMethod_ to be created. This is used to login to DRIVR with the password login user's rights.\n"
    password: String!

    "The `uuid` of the _User_ to be associated with the _PasswordLoginMethod_.\n"
    userUuid: UUID!

    "The name of the _PasswordLoginMethod_ to be created. This is used to login to DRIVR with the password login user's rights.\n"
    username: String!
  ): PasswordLoginMethod

  """
  Creates a new _Role_ that can be assigned to _User_ or _Organization_ entities, as well as other entities within DRIVR.
  """
  createRole(
    """
    The type of the entity that the _Role_ pertains to.
    """
    entityType: RoleEntityType!

    """
    The name of the _Role_ to be created.
    """
    name: String!

    """
    The status of the _Role_. Default to active if not provided.
    """
    status: Status
  ): Role

  """
  Creates a new _RoleAssignment_.
  """
  createRoleAssignment(
    "The `uuid` of the assignee (_User_, _Organization_, _OrganizationUnit_, or _MachineUser_) to whom the _Role_ is assigned to.\nThe assignee must not be `ARCHIVED`. Only a _User_ can be assigned to a role with an `entityType` _Organization_.\nIf the assignee is `ARCHIVED` or `DELETED` the _RoleAssignment_ will be updated to `ARCHIVED` or deleted.\n"
    assigneeUuid: UUID!

    "The `uuid` of the entity (_ApplicationConsumer_, _Domain_, _Organization_, _System_) provided access to.\nThe entity must not be `ARCHIVED`. If the entity is `ARCHIVED` or `DELETED` the _RoleAssignment_ will be updated to `ARCHIVED` or deleted.\n"
    entityUuid: UUID!

    """
    The `uuid` of the _Role_ to assign.
    """
    roleUuid: UUID!

    """
    The `status` of the _RoleAssignment_.
    """
    status: Status
  ): RoleAssignment

  "Create a new _Service_ based on the arguments provided. A _Service_ can't be `CREATED` with _status_=`ARCHIVED`.\n"
  createService(
    "Defines a human-readable identifier for the _Service_.\n"
    code: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    "Defines the _name_ for a _Service_.\n"
    name: String!

    "The _status_ of the _Service_ which can be `ACTIVATED` or `DEACTIVATED`.\n`ARCHIVED` is not allowed for newly created _Services_.\n"
    status: Status
  ): Service

  """
  Add _Setpoints_ of type blob
  """
  createSetpointBlob(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputBlob]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type boolean
  """
  createSetpointBoolean(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputBoolean]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type date
  """
  createSetpointDate(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputDate]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type float
  """
  createSetpointFloat(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputFloat]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type integer
  """
  createSetpointInteger(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputInteger]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type json
  """
  createSetpointJson(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputJson]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type select
  """
  createSetpointSelect(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputSelect]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type string.
  """
  createSetpointString(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputString]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type time.
  """
  createSetpointTime(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputTime]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type date and timespan.
  """
  createSetpointTimespan(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputTimespan]!
  ): SetpointReceipts

  """
  Add _Setpoints_ of type date and time.
  """
  createSetpointTimestamp(
    """
    The _Setpoints_ to add.
    """
    setpoints: [SetpointInputTimestamp]!
  ): SetpointReceipts

  """
  Creates a new _System_ in DRIVR.
  """
  createSystem(
    """
    The unique code of the _System_ within all activated _Systems_ belonging to the same _Domain_.
    """
    code: String!

    """
    The description of the _System_.
    """
    description: String

    """
    The UUID of the _Location_ where the _System_ is located.
    """
    locationUuid: UUID

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the _System_.
    """
    name: String!

    "The UUID of the _Account_ which owns the _System_.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
    ownerUuid: UUID

    """
    The status of the _System_.
    """
    status: Status
  ): System

  "This endpoint is used to create a new _User_ account in DRIVR.\nA _User_ is typically created for an individual person who requires authorization to access the DRIVR API.\n"
  createUser(
    """
    The _email_ address of the _User_.
    """
    email: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The _name_ of the _User_ account.
    """
    name: String

    """
    The UUID of the _Organization_ to which the _User_ belongs.
    """
    organizationUuid: UUID

    """
    The _status_ of the _User_. Creation of a _User_ with an `ARCHIVED` _status_ is not allowed.
    """
    status: Status
  ): User

  """
  Create a new _ApiToken_.
  """
  createUserApiToken(
    """
    The description of the _ApiToken_.
    """
    description: String

    """
    The expiration timestamp of the _ApiToken_.
    """
    expiresAt: DateTime

    """
    The name of the _ApiToken_.
    """
    name: String!
  ): ApiToken

  """
  Delete an _ApiToken_.
  """
  deleteApiToken(
    """
    The `uuid` of the _ApiToken_.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Delete an existing `ApplicationConsumer`. This mutation is used to remove an `ApplicationConsumer` from the system by specifying its UUID.
  """
  deleteApplicationConsumer(
    """
    The UUID of the `ApplicationConsumer` that needs to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  "Delete a _DomainAuthenticationMethod_ by a provided UUID.\nThis operation can be used for _AuthenticationMethods_ of all types.\n"
  deleteAuthenticationMethod(
    "The UUID of the _DomainAuthenticationMethod_ which should be deleted.\n"
    uuid: UUID!
  ): EmptyResult

  """
  Delete a _Certificate_.
  """
  deleteCertificate(
    """
    The `uuid` of the _Certificate_.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Delete a _Characteristic_.
  """
  deleteCharacteristic(
    """
    The `uuid` of the _Characteristic_.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Delete a _CharacteristicValidValue_.
  """
  deleteCharacteristicValidValue(
    """
    The UUID of the _CharacteristicValidValue_.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes a _Component_ and all its associated _ComponentLinks_.
  """
  deleteComponent(
    """
    The UUID of the _Component_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  "This endpoint deletes an existing _ComponentModel_ object by its UUID.\nDeletion of a _ComponentModel_ will fail if it has associated Components.\n"
  deleteComponentModel(
    "If set to true, this will enforce the deletion of the _ComponentModel_ even if there are active _ComponentModel_'s attached to it. \nDefaults to false.\n"
    force: Boolean

    """
    The UUID of the _ComponentModel_ to delete.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes the current *Domain* and all its associated *Organizations*, *Users*, *ComponentModels*, *Components*, *Services*, *Characteristics*, and *Datapoints* as well as other data directly or indirectly associated to the domain. Warning: This is a destructive operation and cannot be undone.
  """
  deleteCurrentDomain: EmptyResult

  """
  Delete a _DataSource_ by its UUID.
  """
  deleteDataSource(
    """
    The UUID of the _DataSource_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes an Event from DRIVR given the UUID. When an Event is deleted, all its associated data is removed from DRIVR.
  """
  deleteEvent(
    """
    The UUID of the Event to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  "Deletes an _EventModel_ and all its _Events_ and _EventModelLinks_.\nAn _EventModel_ can't be deleted if there are `ACTIVATED` or `DEACTIVATED` _Event_ references.\n"
  deleteEventModel(
    "If set to `true` this will enforce the deletion of the _EventModel_ even if there are active _Events_ attached to it.\n"
    force: Boolean

    "The UUID of the _EventModel_ which should be deleted.\n"
    uuid: UUID!
  ): EmptyResult

  """
  This endpoint deletes an existing _EventModelLink_.
  """
  deleteEventModelLink(
    """
    The UUID of the _EventModelLink_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes the _MachineUser_ with the provided `uuid`.
  """
  deleteMachineUser(
    """
    The `uuid` of the _MachineUser_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes a _MetadataType_.
  """
  deleteMetadataType(
    """
    The UUID of the MetadataType to delete.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes an _Organization_ and all its associated user assignments. Cannot delete an _Organization_ if it is the owner of a _Domain_.
  """
  deleteOrganization(
    """
    The unique identifier of the _Organization_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  "Deletes an _OrganizationSource_. \nAn _OrganizationSource_ represents a link to another third party application and describes the unique ID of the _Organization_ in that application.\n"
  deleteOrganizationSource(
    """
    The UUID of the external _DataSource_ used to export the given _OrganizationSource_.
    """
    dataSourceUuid: UUID!

    """
    The UUID of the _Organization_ to which the _OrganizationSource_ belongs to.
    """
    organizationUuid: UUID!
  ): EmptyResult

  """
  Deletes an _OrganizationUnit_.
  """
  deleteOrganizationUnit(
    """
    The unique identifier of the _OrganizationUnit_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes the _PasswordLoginMethod_ with the provided `uuid`.
  """
  deletePasswordLoginMethod(
    """
    The `uuid` of the _PasswordLoginMethod_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes a specific _Role_.
  """
  deleteRole(
    """
    The UUID of the _Role_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes the specified _RoleAssignment_.
  """
  deleteRoleAssignment(
    """
    The `uuid` of the _RoleAssignment_ to delete.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes the specified _RoleAssignment_'s association with the specified _DataSource_.
  """
  deleteRoleAssignmentSource(
    """
    The `uuid` of the _DataSource_.
    """
    dataSourceUuid: UUID!

    """
    The `uuid` of the _RoleAssignment_ to delete.
    """
    roleAssignmentUuid: UUID!
  ): EmptyResult

  "Deletes a _Service_ and all its dependencies like _CharacteristicServiceLink_ and _ServiceComponentModelLinks_.\n"
  deleteService(
    """
    The UUID of the _Service_.
    """
    uuid: UUID!
  ): EmptyResult

  """
  Deletes a _System_ and all its _Components_ and _ComponentLinks_ in DRIVR.
  """
  deleteSystem(
    """
    The UUID of the _System_ to be deleted.
    """
    uuid: UUID!
  ): EmptyResult

  "Irreversibly deletes a _User_.\nIf the _User_ is the owner of the _Domain_, they cannot be deleted.\n"
  deleteUser(
    """
    The UUID of the _User_ to delete.
    """
    uuid: UUID!
  ): EmptyResult

  "This is irreversible change.\nThis endpoint is used to delete a _UserSource_ associated with a specific _User_ and a specific _DataSource_ in DRIVR by UUID.\n"
  deleteUserSource(
    """
    The UUID of the _DataSource_ associated with the _UserSource_ you want to delete.
    """
    dataSourceUuid: UUID!

    """
    The UUID of the _User_ whose _UserSource_ you want to delete.
    """
    userUuid: UUID!
  ): EmptyResult

  """
  Regenerates an existing _ApiToken_.
  """
  regenerateApiToken(
    """
    The expiration timestamp of the _ApiToken_.
    """
    expiresAt: DateTime

    """
    The `uuid` of the _ApiToken_.
    """
    uuid: UUID!
  ): ApiToken

  """
  Remove a _Characteristic_ from a _Service_. For each _Service_ or _Characteristic_ a _code_ or _uuid_ is required.
  """
  removeCharacteristicFromService(
    """
    The `code` of the _Characteristic_.
    """
    characteristicCode: String

    """
    The `uuid` of the _Characteristic_.
    """
    characteristicUuid: UUID

    """
    The `code` of the _Service_.
    """
    serviceCode: String

    """
    The `uuid` of the _Service_.
    """
    serviceUuid: UUID
  ): EmptyResult

  """
  Removes a _Service_ from a _ComponentModel_ object.
  """
  removeServiceFromComponentModel(
    """
    The unique _code_ of the _ComponentModel_ object from which to remove the _Service_.
    """
    componentModelCode: String

    """
    The UUID of the _ComponentModel_ object from which to remove the _Service_.
    """
    componentModelUuid: UUID

    """
    The _index_ value of the _Service_ to remove from the _ComponentModel_.
    """
    index: Int

    """
    The unique _code_ of the _Service_ to remove from the _ComponentModel_.
    """
    serviceCode: String

    """
    The UUID of the _Service_ object to remove from the _ComponentModel_.
    """
    serviceUuid: UUID
  ): EmptyResult

  """
  Remove a _User_ from an _OrganizationUnit_.
  """
  removeUserFromOrganizationUnit(
    """
    The UUID of the _OrganizationUnit_.
    """
    organizationUnitUuid: UUID!

    """
    The UUID of the _User_ to remove from the _OrganizationUnit_.
    """
    userUuid: UUID!
  ): EmptyResult

  """
  Creates a new _OrganizationSource_ or updates an existing one.
  """
  setOrganizationSource(
    """
    The code of the _DataSource_ associated with the _Organization_.
    """
    dataSourceCode: String

    """
    The unique identifier of the _DataSource_ associated with the _Organization_.
    """
    dataSourceUuid: UUID

    """
    The unique identifier of the _Organization_ that this source belongs to.
    """
    organizationUuid: UUID!

    """
    The identifier of the _Organization_ in the external system.
    """
    sourceId: String!
  ): OrganizationSource

  """
  Updates the specified _RoleAssignment_'s associated _DataSource_.
  """
  setRoleAssignmentSource(
    """
    The `code` of the _DataSource_.
    """
    dataSourceCode: String

    """
    The `uuid` of the _DataSource_.
    """
    dataSourceUuid: UUID

    """
    The `uuid` of the _RoleAssignment_.
    """
    roleAssignmentUuid: UUID!

    """
    The identifier of the new _RoleAssignmentSource_.
    """
    sourceId: String!
  ): RoleAssignmentSource

  "A _UserSource_ connects a _User_ inside DRIVR to a _DataSource_ and stores the _id_ the _User_ has in the external _System_.\nThe `set-user-source` API operation creates a new `UserSource` or updates an existing `UserSource`.\n"
  setUserSource(
    """
    The `code` of the _DataSource_.
    """
    dataSourceCode: String

    """
    The UUID of the _DataSource_.
    """
    dataSourceUuid: UUID

    """
    The unique string associated with the _UserSource_.
    """
    sourceId: String!

    """
    The UUID of the _User_.
    """
    userUuid: UUID!
  ): UserSource

  """
  Update an _ApiToken_ .
  """
  updateApiToken(
    """
    The description of the _ApiToken_.
    """
    description: String

    """
    The name of the _ApiToken_.
    """
    name: String

    """
    The UUID of the _ApiToken_ to update.
    """
    uuid: UUID!
  ): ApiToken

  """
  Update an existing `ApplicationConsumer`. If an `ApplicationConsumer` is archived, it cannot be updated. This mutation is used to modify the properties of an existing `ApplicationConsumer`.
  """
  updateApplicationConsumer(
    """
    If not explicitly set, it defaults to the first element in `redirect_uris`.
    """
    defaultRedirectUri: String

    """
    An `ApplicationConsumer` must have a list of `grant_types` with at least one entry. They represent how the application can authorize users against the API.
    """
    grantTypes: [GrantType]

    """
    The `name` of the `ApplicationConsumer`.
    """
    name: String

    """
    Attribute which verifies if `Identity` entities which use the Application needs to give explicit consent for API access.
    """
    noExplicitConsentRequired: Boolean

    "The UUID of the `Account` which owns the `ApplicationConsumer`.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
    ownerUuid: UUID

    """
    The `redirect_uris` of the `ApplicationConsumer`. Must have at least one `redirect_uris` entry if the `grant_type=AUTHORIZATION_CODE`. Multiple entires are supported.
    """
    redirectUris: [String]

    """
    An `ApplicationConsumer` must have at least one `scopes` entry. Multiple entires are supported and they indicate which scopes a certain `ApplicationConsumer` requires.
    """
    scopes: [String]

    """
    The secret of the `ApplicationConsumer` which is used for strengthened security guarantees for certain OAuth2 flows.
    """
    secret: String

    """
    The slug of the `ApplicationConsumer` which must be unique within the `Domain`. This will be prepended to the `Domain`'s hostname to create the consumer's identifier.
    """
    slug: String

    """
    The status of the `ApplicationConsumer`.
    """
    status: Status

    """
    The UUID of the `ApplicationConsumer`.
    """
    uuid: UUID!
  ): ApplicationConsumer

  "Update an existing _DomainAuthenticationMethod_ by its _UUID_.\nThis operation can be used for updating common fields on all _DomainAuthenticationMethods_ types.\n"
  updateAuthenticationMethod(
    "The _status_ of the _DomainAuthenticationMethod_ which should be updated.\nOnly one _DomainAuthenticationMethod_ of the same configuration type can be `ACTIVATED` at a time.\nE.g. only one _DomainAuthenticationMethod_ of type Azure AD can have an `ACTIVATED` status.\nMultiple _DomainAuthenticationMethods_ of different configuration types can be `ACTIVATED` at the same time.\n"
    status: Status

    "The UUID of the _DomainAuthenticationMethod_ which should be updated.\n"
    uuid: UUID!
  ): AuthenticationMethod

  "Update an existing _DomainAuthenticationMethod_ which allows authentication with accounts from the Azure AD.\nOnly one _DomainAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  updateAzureAuthenticationMethod(
    "The updated _configuration_ details which should be used to register DRIVR at the Azure Portal in order to allow Azure Accounts to authenticate themselves.\n"
    configuration: UpdateAzureAuthenticationMethodConfiguration

    "The _status_ of the _AzureDomainAuthenticationMethod_ which should be changed.\n"
    status: Status

    "The UUID of the _AzureDomainAuthenticationMethod_ to be updated.\n"
    uuid: UUID!
  ): AzureAuthenticationMethod

  """
  Update a _Certificate_.
  """
  updateCertificate(
    "The name for the _Certificate_. Has to be unique within the Domain.\nA _Certificate_ name must not contain any special characters or white spaces.\n"
    name: String

    """
    The status of the _Certificate_.
    """
    status: Status

    """
    The UUID of the _Certificate_ to update.
    """
    uuid: UUID!
  ): Certificate

  """
  Update a _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristic(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): Characteristic

  """
  Update a blob _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicBlob(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicBlob

  """
  Update a boolean _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicBoolean(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicBoolean

  """
  Update a date _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicDate(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Date

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Date

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicDate

  """
  Update a float _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicFloat(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Float

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Float

    """
    It represents the step size or increment value.
    """
    boundaryStep: Float

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The floating-point precision of values.
    """
    precision: Int

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicFloat

  """
  Update a integer _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicInteger(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Int

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Int

    """
    It represents the step size or increment value.
    """
    boundaryStep: Int

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicInteger

  """
  Update a JSON _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicJson(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    JSON schema for valuepoints.
    """
    schema: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicJson

  """
  Update a SELECT _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicSelect(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    Whether the SELECT Characteristic allows multiple options to be selected at the same time.
    """
    multiple: Boolean

    """
    The name of the Characteristic.
    """
    name: String

    """
    List of options which can be selected on the Characteristic.
    """
    options: [CharacteristicSelectOptionQuery]

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicSelect

  """
  Update a string _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicString(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The maximum length of allowed values.
    """
    lengthMax: Int

    """
    The minimum length of allowed values.
    """
    lengthMin: Int

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicString

  """
  Update a time _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicTime(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: Time

    """
    The lower boundary of allowed values.
    """
    boundaryMin: Time

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicTime

  """
  Update a timespan _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicTimespan(
    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicTimespan

  """
  Update a timestamp _Characteristic_. Archived _Characteristic_'s can't be updated.
  """
  updateCharacteristicTimestamp(
    """
    The upper boundary of allowed values.
    """
    boundaryMax: DateTime

    """
    The lower boundary of allowed values.
    """
    boundaryMin: DateTime

    """
    The type of the Characteristic.
    """
    characteristicType: CharacteristicType

    """
    The Characteristic's code.
    """
    code: String

    """
    The description of the Characteristic.
    """
    description: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the Characteristic.
    """
    name: String

    """
    The status of the Characteristic.
    """
    status: Status

    """
    The Characteristic's symbol.
    """
    symbol: String

    """
    The UUID of the Characteristic.
    """
    uuid: UUID!
  ): CharacteristicTimestamp

  """
  Update an existing _CharacteristicValidValue_ of type boolean. Archived _CharacteristicValidValues_ cannot be updated.
  """
  updateCharacteristicValidValueBoolean(
    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The UUID of the _CharacteristicValidValue_ to update.
    """
    uuid: UUID!

    """
    The new value of the _CharacteristicValidValue_.
    """
    value: Boolean
  ): CharacteristicValidValueBoolean

  """
  Update an existing _CharacteristicValidValue_ of type float. Archived _CharacteristicValidValues_ cannot be updated.
  """
  updateCharacteristicValidValueFloat(
    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The UUID of the _CharacteristicValidValue_ to update.
    """
    uuid: UUID!

    """
    The new value of the _CharacteristicValidValue_.
    """
    value: Float
  ): CharacteristicValidValueFloat

  """
  Update an existing _CharacteristicValidValue_ of type integer. Archived _CharacteristicValidValues_ cannot be updated.
  """
  updateCharacteristicValidValueInteger(
    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The UUID of the _CharacteristicValidValue_ to update.
    """
    uuid: UUID!

    """
    The new value of the _CharacteristicValidValue_.
    """
    value: Int
  ): CharacteristicValidValueInteger

  """
  Update an existing _CharacteristicValidValue_ of type string. Archived _CharacteristicValidValues_ cannot be updated.
  """
  updateCharacteristicValidValueString(
    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The UUID of the _CharacteristicValidValue_ to update.
    """
    uuid: UUID!

    """
    The new value of the _CharacteristicValidValue_.
    """
    value: String
  ): CharacteristicValidValueString

  """
  Update an existing _CharacteristicValidValue_ of type time. Archived _CharacteristicValidValues_ cannot be updated.
  """
  updateCharacteristicValidValueTime(
    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The UUID of the _CharacteristicValidValue_ to update.
    """
    uuid: UUID!

    """
    The new value of the _CharacteristicValidValue_.
    """
    value: Time
  ): CharacteristicValidValueTime

  """
  Update an existing _CharacteristicValidValue_ of type timespan. Archived _CharacteristicValidValues_ cannot be updated.
  """
  updateCharacteristicValidValueTimespan(
    """
    A description of the CharacteristicValidValue.
    """
    description: String

    """
    The UUID of the _CharacteristicValidValue_ to update.
    """
    uuid: UUID!

    """
    The new value of the _CharacteristicValidValue_.
    """
    value: Timespan
  ): CharacteristicValidValueTimespan

  """
  Update a _Component_. Archived _Components_ cannot be updated.
  """
  updateComponent(
    """
    A human-readable identifier for the _Component_.
    """
    code: String

    """
    The connection state of the _Component_.
    """
    connectionState: ComponentConnectionState

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the _Component_.
    """
    name: String

    """
    The status of the _Component_.
    """
    status: Status

    """
    The UUID of the _Component_ to update.
    """
    uuid: UUID!
  ): Component

  "This endpoint updates an existing _ComponentModel_ object by modifying its properties.\nOnly non-archived _ComponentModel_ can be updated.\n"
  updateComponentModel(
    "A human-readable identifier for the _ComponentModel_.\n"
    code: String

    "The type of the _ComponentModel_. Values are restricted to the `component-type` enum.\n"
    componentType: ComponentType

    "A description of the _ComponentModel_.\n"
    description: String

    "A setting which allows instantiated _Component_ to report their connection state.\n"
    isConnective: Boolean

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    "The name of the _ComponentModel_.\n"
    name: String

    "The status of the _ComponentModel_. Values are restricted to the `status` enum.\n"
    status: Status

    """
    The UUID of the _ComponentModel_.
    """
    uuid: UUID!
  ): ComponentModel

  """
  Update a _DataSource_ by its UUID.
  """
  updateDataSource(
    """
    The code of the _DataSource_.
    """
    code: String

    """
    The description of the _DataSource_.
    """
    description: String

    """
    The name of the _DataSource_.
    """
    name: String

    """
    The reference of the _DataSource_.
    """
    reference: String

    """
    The UUID of the _DataSource_.
    """
    uuid: UUID!
  ): DataSource

  "Update an existing _DomainAuthenticationMethod_ of type `DEFAULT`.\nThis is used to enable or disable DRIVR's internal OAuth2 authentication and allows DRIVR User with a password to be authenticated.\nOnly one _DomainAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  updateDefaultAuthenticationMethod(
    """
    The _status_ of the Authentication Method with should be updated.
    """
    status: Status

    """
    The _UUID_ of the _DefaultDomainAuthenticationMethod_ which should be updated.
    """
    uuid: UUID!
  ): DefaultAuthenticationMethod

  "Update the setting of a _DomainFeature_ by a given _slug_.\n"
  updateDomainFeature(
    "Set this value to `true` if the _DomainFeature_ should be enabled or `false` if it should be disabled.\n"
    enabled: Boolean

    "Provide the _slug_ of the _DomainFeature_ to be updated.\n"
    slug: DomainFeatureSlug!
  ): DomainFeature

  """
  Updates an Event within DRIVR, given its UUID and start and end timestamps. Events associated with archived entities cannot be modified.
  """
  updateEvent(
    """
    The end date and time for the Event. If not passed, the current timestamp is used.
    """
    endTime: DateTime

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The start date and time for the Event. If not passed, the current timestamp is used.
    """
    time: DateTime

    """
    The UUID of the Event to be updated.
    """
    uuid: UUID!
  ): Event

  "Update an _EventModel_ within DRIVR. EventModels which have a _status_ `ARCHIVED` can't be updated.\n"
  updateEventModel(
    "Defines a human-readable identifier for the _EventModel_.\n"
    code: String

    "The event level of the EventModel.\n"
    eventLevel: EventLevel

    "Describes the _type_ of DRIVR _entity_ an _Event_ can correspond to e.g. _Component_ or _System_\n"
    eventType: EventType

    "Whether _Events_ may be emitted for all instances of a specific _entity type_ or only certain DRIVR Entity prototypes\n(e.g. whether an _Event_ can be emitted for all _Components_ or only for _Components_ that correspond to certain _ComponentModels_).\nThis can be set by creating _EventModelLinks_. Can't be `true` if _entity type_ is _System_.\n"
    limitToPrototypes: Boolean

    "An optional _message_ which can provide more detail about the derived _Events_.\n"
    message: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    "The _status_ of the _EventModel_ which can be `ACTIVATED`, `DEACTIVATED`, or `ARCHIVED`.\nUpdating an _EventModel_ to `ARCHIVED` is irreversible and does not allow further updates of this entity.\n"
    status: Status

    "The UUID of the _EventModel_ which should be altered.\n"
    uuid: UUID!
  ): EventModel

  """
  This endpoint updates an existing _EventModelLink_, provided it is not archived.
  """
  updateEventModelLink(
    """
    The new status of the _EventModelLink_.
    """
    status: Status

    """
    The UUID of the _EventModelLink_ to update.
    """
    uuid: UUID!
  ): EventModelLink

  "Update an existing _DomainAuthenticationMethod_ which allows authentication with Google Accounts.\nOnly one _DomainAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  updateGoogleAuthenticationMethod(
    "The _configuration_ of the _DomainAuthenticationMethod_ for Google Account authentication.\n"
    configuration: UpdateGoogleAuthenticationMethodConfiguration

    "The _status_ of the _DomainAuthenticationMethod_.\n"
    status: Status

    "The _UUID_ of _DomainAuthenticationMethod_ for authenticating with Google Accounts.\n"
    uuid: UUID!
  ): GoogleAuthenticationMethod

  """
  Updates the _MachineUser_ with the provided `uuid`.
  """
  updateMachineUser(
    "The updated password of the _MachineUser_. This is used to login to DRIVR with the machine user's rights. Will not be modified if kept empty.\n"
    password: String

    """
    The status of the _MachineUser_. Will not be modified if kept empty.
    """
    status: Status

    "The updated name of the _MachineUser_. This is used to login to DRIVR with the machine user's rights. Will not be modified if kept empty.\n"
    username: String

    """
    The `uuid` of the _MachineUser_ to be updated.
    """
    uuid: UUID!
  ): MachineUser

  """
  Update a Boolean _MetadataType_.
  """
  updateMetadataTypeBoolean(
    "The default value for this metadata field\n"
    default: Boolean

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String

    "The uuid of the metadata type which should be updated\n"
    uuid: UUID!
  ): MetadataTypeBoolean

  """
  Update a Float _MetadataType_.
  """
  updateMetadataTypeFloat(
    "The default value for this metadata field\n"
    default: Float

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String

    "The uuid of the metadata type which should be updated\n"
    uuid: UUID!
  ): MetadataTypeFloat

  """
  Update an Integer _MetadataType_.
  """
  updateMetadataTypeInteger(
    "The default value for this metadata field\n"
    default: Int

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String

    """
    Specifies the individual value within the entities of this metadata type to must be unique.
    """
    unique: Boolean

    "The uuid of the metadata type which should be updated\n"
    uuid: UUID!
  ): MetadataTypeInteger

  """
  Update a String _MetadataType_.
  """
  updateMetadataTypeString(
    "The default value for this metadata field\n"
    default: String

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String

    """
    Specifies the individual value within the entities of this metadata type to must be unique.
    """
    unique: Boolean

    "The uuid of the metadata type which should be updated\n"
    uuid: UUID!
  ): MetadataTypeString

  """
  Update a Timestamp _MetadataType_.
  """
  updateMetadataTypeTimestamp(
    "The default value for this metadata field\n"
    default: DateTime

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String

    "The uuid of the metadata type which should be updated\n"
    uuid: UUID!
  ): MetadataTypeTimestamp

  """
  Update a UUID _MetadataType_.
  """
  updateMetadataTypeUuid(
    "The default value for this metadata field\n"
    default: UUID

    """
    The description of the field this metadata type represents.
    """
    description: String

    "The entity type which this metadata type is valid for.\nEach metadata type key must be unique within the same entity types.\n"
    entityType: MetadataTypeEntityTypes

    "The name of the field this metadata type represents.\nIt must be unique of all ACTIVATED metadata types.\n"
    key: String

    "The uuid of the metadata type which should be updated\n"
    uuid: UUID!
  ): MetadataTypeUuid

  "Update an existing OpenID Bearer token delegation _DomainAuthenticationMethod_.\nOnly one _DomainAuthenticationMethod_ of this type can be `ACTIVATED` at a time.\n"
  updateOpenIdDelegatedAuthenticationMethod(
    """
    The updated _configuration_ of the OpenID Bearer token delegation _DomainAuthenticationMethod_.
    """
    configuration: UpdateOpenIdDelegatedAuthenticationMethodConfiguration

    """
    The new _status_ of the OpenID Bearer token delegation _DomainAuthenticationMethod_.
    """
    status: Status

    """
    The _UUID_ of the OpenID Bearer token delegation _DomainAuthenticationMethod_ which should be updated.
    """
    uuid: UUID!
  ): OpenIdDelegatedAuthenticationMethod

  """
  Updates an _Organization_. Archived _Organizations_ cannot be updated.
  """
  updateOrganization(
    """
    The alias of the _Organization_.
    """
    alias: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the _Organization_.
    """
    name: String

    "The UUID of the `User` which owns the entity.\nThis is an informational field only.\n"
    ownerUuid: UUID

    """
    The status of the _Organization_.
    """
    status: Status

    """
    The UUID of the _Organization_.
    """
    uuid: UUID!
  ): Organization

  """
  Updates an _OrganizationUnit_.
  """
  updateOrganizationUnit(
    """
    The _alias_ of the _OrganizationUnit_. Has to be unique within the _Organization_ the unit is attached to.
    """
    alias: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The _name_ of the _OrganizationUnit_.
    """
    name: String

    """
    The UUID of the parent _OrganizationUnit_.
    """
    parentOrganizationUnitUuid: UUID

    """
    The status of the _OrganizationUnit_.
    """
    status: Status

    """
    The UUID of the _OrganizationUnit_.
    """
    uuid: UUID!
  ): OrganizationUnit

  """
  Updates the _PasswordLoginMethod_ with the provided `uuid`.
  """
  updatePasswordLoginMethod(
    "The password of the _PasswordLoginMethod_ to be created. This is used to login to DRIVR with the password login user's rights.\n"
    password: String!

    "The name of the _PasswordLoginMethod_ to be created. This is used to login to DRIVR with the password login user's rights.\n"
    username: String!

    """
    The `uuid` of the _PasswordLoginMethod_ to be updated.
    """
    uuid: UUID!
  ): PasswordLoginMethod

  """
  Updates a specific _Role_. An archived _Role_ cannot be updated.
  """
  updateRole(
    """
    The type of the entity that the _Role_ pertains to.
    """
    entityType: RoleEntityType

    """
    The name of the _Role_.
    """
    name: String

    """
    The status of the _Role_.
    """
    status: Status

    """
    The UUID of the _Role_ to be updated.
    """
    uuid: UUID!
  ): Role

  """
  Updates the selected _RoleAssignment_
  """
  updateRoleAssignment(
    "The `uuid` of the entity (_ApplicationConsumer_, _Domain_, _Organization_, _System_) provided access to.\nThe entity must not be `ARCHIVED`. If the entity is `ARCHIVED` or `DELETED` the _RoleAssignment_ will be updated to `ARCHIVED` or deleted.\nOnly a _User_ can be assigned to a role with an `entityType` _Organization_.\n"
    entityUuid: UUID

    """
    The `uuid` of the _Role_ to assign.
    """
    roleUuid: UUID

    """
    The `status` of the _RoleAssignment_.
    """
    status: Status

    """
    The `uuid` of the _RoleAssignment_ to be updated.
    """
    uuid: UUID!
  ): RoleAssignment

  "This endpoint updates a _Service_. Archived _Service_ can't be updated.\n"
  updateService(
    """
    The _code_ of the _Service_.
    """
    code: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The _name_ of the _Service_.
    """
    name: String

    "The _status_ of the _Service_ can be updated to `ACTIVATED`, `DEACTIVATED` or `ARCHIVED`.\n"
    status: Status

    """
    The UUID of the _Service_.
    """
    uuid: UUID!
  ): Service

  """
  Update a _System_ in DRIVR. Archived _Systems_ cannot be updated.
  """
  updateSystem(
    """
    The code of the _System_.
    """
    code: String

    """
    The description of the _System_.
    """
    description: String

    """
    The UUID of the _Location_ where the _System_ is located.
    """
    locationUuid: UUID

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The name of the _System_.
    """
    name: String

    "The UUID of the _Account_ which owns the _System_.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
    ownerUuid: UUID

    """
    The status of the _System_.
    """
    status: Status

    """
    The UUID of the _System_.
    """
    uuid: UUID!
  ): System

  "This endpoint is used to update an existing _User_ in DRIVR by its UUID.\nThe _User_ must not be in an `ARCHIVED` state.\n"
  updateUser(
    """
    The _email_ address of the _User_.
    """
    email: String

    """
    The metadata key-value pair to set.
    """
    metadataKeyValueStore: [MetadataKeyValuePairInput]

    """
    The _name_ of the _User_.
    """
    name: String

    """
    The UUID of the _Organization_ to which the _User_ belongs.
    """
    organizationUuid: UUID

    "The current _status_ of the _User_ account, which can be either `ACTIVATED`, `DEACTIVATED`, or `ARCHIVED`.\nUpdating a _User_ to `ARCHIVED` is irreversible.\n"
    status: Status

    """
    The UUID of the _User_ whose account you wish to update.
    """
    uuid: UUID!
  ): User
}

input NestedAggregatedDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [AggregatedDatapointsWhereQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [AggregatedDatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  The timespan based chunk size by which datapoints are aggregated. Requires `from` and `to` to be set.
  """
  grid: Timespan

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: AggregateValueField
}

input NestedApplicationConsumerQuery {
  """
  All passed queries must match
  """
  _and: [ApplicationConsumerQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ApplicationConsumerQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _default_redirect_uri_ of the _ApplicationConsumer_.
  """
  defaultRedirectUri: StringQueryField

  """
  Filter by _identifier_ of the _ApplicationConsumer_.
  """
  identifier: StringQueryField

  """
  Filter by _name_ of the _ApplicationConsumer_.
  """
  name: StringQueryField

  """
  Filter by _no_explicit_consent_required_ of the _ApplicationConsumer_.
  """
  noExplicitConsentRequired: BoolQueryField

  """
  """
  owner: ResourceOwners

  """
  Filter by owner UUID associated with the _ApplicationConsumer_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by _secret_ of the _ApplicationConsumer_.
  """
  secret: StringQueryField

  """
  Filter by _slug_ of the _ApplicationConsumer_.
  """
  slug: StringQueryField

  """
  Filter by _status_ of the _ApplicationConsumer_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField
}

input NestedCertificateQuery {
  """
  All passed queries must match
  """
  _and: [CertificateQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [CertificateQuery]

  """
  The actual PEM encoded certificate of the _Certificate_.
  """
  certificate: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  The PEM encoded CSR of the _Certificate_.
  """
  csr: StringQueryField

  """
  The duration of the _Certificate_.
  """
  duration: TimespanQueryField

  """
  """
  entity: CertificateEntities

  """
  The entity type of the _Certificate_.
  """
  entityType: CertificateEntityTypeQueryField

  """
  The expiration date of the _Certificate_.
  """
  expiresAt: DateTimeQueryField

  """
  The issuer of the _Certificate_.
  """
  issuer: NestedIssuerQuery

  """
  The name of the _Certificate_.
  """
  name: StringQueryField

  """
  Filter by the status of the _Certificate_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Certificate_.
  """
  uuid: UuidQueryField
}

input NestedCharacteristicQuery {
  """
  All passed queries must match
  """
  _and: [CharacteristicQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [CharacteristicQuery]

  """
  Filter by aggregated _DataPoints_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by _characteristic_type_.
  """
  characteristicType: CharacteristicTypeQueryField

  """
  Filter by _code_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by current _DataPoints_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _data_type_.
  """
  dataType: CharacteristicDataTypeQueryField

  """
  Filter by _DataPoints_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filter by _description_.
  """
  description: StringQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _multiple_.
  """
  multiple: BoolQueryField

  """
  Filter by _name_.
  """
  name: StringQueryField

  """
  """
  service: NestedServiceQuery

  """
  Filter by _status_.
  """
  status: StatusQueryField

  """
  Filter by _symbol_.
  """
  symbol: StringQueryField

  """
  Filter by _TimeStream_.
  """
  timeStreams: NestedTimeStreamQuery

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_.
  """
  uuid: UuidQueryField
}

input NestedComponentModelQuery {
  """
  All passed queries must match
  """
  _and: [ComponentModelQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ComponentModelQuery]

  """
  Filter by aggregated _Datapoints_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by `code`.
  """
  code: StringQueryField

  """
  Filter by `component_type`.
  """
  componentType: ComponentTypeQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by current _Datapoints_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filter by `description`.
  """
  description: StringQueryField

  """
  Filter by `is_connective`.
  """
  isConnective: BoolQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by `name`.
  """
  name: StringQueryField

  """
  """
  service: NestedServiceOnComponentModelQuery

  """
  Filter by `status`.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by `uuid`.
  """
  uuid: UuidQueryField
}

input NestedComponentQuery {
  """
  All passed queries must match
  """
  _and: [ComponentQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ComponentQuery]

  """
  The aggregated datapoints associated with the _Component_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  A human-readable identifier for the _Component_.
  """
  code: StringQueryField

  """
  The model of the _Component_.
  """
  componentModel: NestedComponentModelQuery

  """
  The connection state of the _Component_.
  """
  connectionState: ComponentConnectionStateQueryField

  """
  The time at which the _Component's_ connection state was last updated.
  """
  connectionStateUpdatedAt: DateTimeQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  The current datapoints associated with the _Component_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  The datapoints associated with the _Component_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filters that can be used to filter and retrieve _Events_ associated with the _Component_.
  """
  events: NestedEventFilterQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  The name of the _Component_.
  """
  name: StringQueryField

  """
  """
  service: NestedServiceOnComponentQuery

  """
  The status of the _Component_.
  """
  status: StatusQueryField

  """
  The _System_ that the _Component_ belongs to.
  """
  system: NestedSystemQuery

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Component_.
  """
  uuid: UuidQueryField
}

input NestedCurrentDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [CurrentDatapointsWhereQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [CurrentDatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  Filter by _Datapoint_ occurrence.
  """
  time: DateTimeQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: ValueQueryField
}

input NestedDataSourceQuery {
  """
  All passed queries must match
  """
  _and: [DataSourceQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DataSourceQuery]

  """
  _Code_ of the _DataSources_.
  """
  code: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  A brief _description_ of the _DataSources_.
  """
  description: StringQueryField

  """
  The _name_ of the _DataSources_.
  """
  name: StringQueryField

  """
  A reference to another system that the _DataSources_ connects to.
  """
  reference: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The unique identifier for the _DataSources_.
  """
  uuid: UuidQueryField
}

input NestedDatapointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [DatapointsWhereQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DatapointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  Filter by _Datapoint_ occurrence.
  """
  time: DateTimeQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: ValueQueryField
}

input NestedDomainAuthenticationMethodQuery {
  """
  All passed queries must match
  """
  _and: [DomainAuthenticationMethodQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DomainAuthenticationMethodQuery]

  """
  Filter _DomainAuthenticationMethods_ by _authenticationType_.
  """
  authenticationType: DomainAuthenticationMethodQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter _DomainAuthenticationMethods_ by _status_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter _DomainAuthenticationMethods_ by _uuid_.
  """
  uuid: UuidQueryField
}

input NestedDomainQuery {
  """
  All passed queries must match
  """
  _and: [DomainQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [DomainQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the name of the _Domain_.
  """
  name: StringQueryField

  """
  Filter by the UUID of the owner of the _Domain_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by the slug of the _Domain_.
  """
  slug: StringQueryField

  """
  Filter by the status of the _Domain_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Domain_.
  """
  uuid: UuidQueryField
}

input NestedEventFilterQuery {
  """
  All passed queries must match
  """
  _and: [EventFilterQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventFilterQuery]

  """
  Filter by the acknowledged status of the _Event_.
  """
  acknowledged: BoolQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the end time of the _Event_.
  """
  endTime: DateTimeQueryField

  """
  Filter by the UUID of the entity associated with the _Event_.
  """
  entityUuid: UuidQueryField

  """
  Filters that can be used to filter and retrieve _EventModel_ associated with the _Event_.
  """
  eventModel: NestedEventModelQuery

  """
  Filter by the type of the _Event_.
  """
  eventType: EventTypeQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the status of the _Event_.
  """
  status: EventStatusQueryField

  """
  Filter by the start time of the _Event_.
  """
  time: DateTimeQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Event_.
  """
  uuid: UuidQueryField
}

input NestedEventModelQuery {
  """
  All passed queries must match
  """
  _and: [EventModelQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventModelQuery]

  """
  Filter by the _code_ of the _EventModel_.
  """
  code: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the _entityType_ of the _EventModel_.
  """
  entityType: EventEntityTypeQueryField

  """
  Filter by the severity level configuration of the _EventModel_.
  """
  eventLevel: EventLevelQueryField

  """
  Filter by the _eventType_ of the _EventModel_.
  """
  eventType: EventTypeQueryField

  """
  Filter by the _limitToPrototypes_ setting of the _EventModel_.
  """
  limitToPrototypes: BoolQueryField

  """
  Filter by the _message_ of the _EventModel_.
  """
  message: StringQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the _status_ of the _EventModel_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the UUID of the _EventModel_.
  """
  uuid: UuidQueryField
}

input NestedEventQuery {
  """
  All passed queries must match
  """
  _and: [EventQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [EventQuery]

  """
  Filter by the acknowledged status of the _Event_.
  """
  acknowledged: BoolQueryField

  """
  Filters that can be used to filter and retrieve _Component_ associated with the _Event_.
  """
  component: NestedComponentQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the end time of the _Event_.
  """
  endTime: DateTimeQueryField

  """
  """
  entity: EventEntities

  """
  Filter by the UUID of the entity associated with the _Event_.
  """
  entityUuid: UuidQueryField

  """
  Filters that can be used to filter and retrieve _EventModel_ associated with the _Event_.
  """
  eventModel: NestedEventModelQuery

  """
  Filter by the type of the _Event_.
  """
  eventType: EventTypeQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the status of the _Event_.
  """
  status: EventStatusQueryField

  """
  Filters that can be used to filter and retrieve _System_ associated with the _Event_. It does not matter if the _Event_ is directly connected to the _System_ or to a _Component_ which is connected to the _System_. This query will resolve both.
  """
  system: NestedSystemQuery

  """
  Filter by the start time of the _Event_.
  """
  time: DateTimeQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  updatedAt: DateTimeQueryField

  """
  The UUID of the _Event_.
  """
  uuid: UuidQueryField
}

input NestedIssuerQuery {
  """
  All passed queries must match
  """
  _and: [IssuerQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [IssuerQuery]

  """
  Filter by _ca_ of the _Issuer_.
  """
  ca: StringQueryField

  """
  Filter by _Certificates_ associated with the _Issuer_.
  """
  certificates: NestedCertificateQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _name_ of the _Issuer_.
  """
  name: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _Issuer_.
  """
  uuid: UuidQueryField
}

input NestedLoginMethodQuery {
  """
  All passed queries must match
  """
  _and: [LoginMethodQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [LoginMethodQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the domain authentication method of the _LoginMethod_.
  """
  domainAuthenticationMethod: NestedDomainAuthenticationMethodQuery

  """
  Filter by the external ID of the _LoginMethod_. This is only set for Azure and Google OAuth and references the ID of the user in the other system.
  """
  externalId: StringQueryField

  """
  Filter by the preferred username of the _LoginMethod_. This is only set for Azure and Google OAuth and references the username of the user in the other system.
  """
  preferredUsername: StringQueryField

  """
  Filter by the status of the _LoginMethod_.
  """
  status: StatusQueryField

  """
  The type of the _LoginMethod_. This defines if the _LoginMethod_ works for Azure, Google OAuth, Password, etc.
  """
  type: LoginMethodQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the user of the _LoginMethod_.
  """
  user: NestedUserQuery

  """
  Filter by the username of the _LoginMethod_.
  """
  username: StringQueryField

  """
  Filter by the UUID of the _LoginMethod_.
  """
  uuid: UuidQueryField
}

input NestedMachineUserQuery {
  """
  All passed queries must match
  """
  _and: [MachineUserQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [MachineUserQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _status_ of the _MachineUser_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _username_ of the _MachineUser_.
  """
  username: StringQueryField

  """
  Filter by _uuid_ of the _MachineUser_.
  """
  uuid: UuidQueryField
}

input NestedMetadataTypeQuery {
  """
  All passed queries must match
  """
  _and: [MetadataTypeQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [MetadataTypeQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by data type of _MetadataType_.
  """
  dataType: MetadataDataTypeQueryField

  """
  """
  defaults: DefaultValueQueryField

  """
  Filter by description of _MetadataType_.
  """
  description: StringQueryField

  """
  Filter by entity type of _MetadataType_.
  """
  entityType: MetadataTypeEntityTypesQueryField

  """
  Filter by key of _MetadataType_.
  """
  key: StringQueryField

  """
  Filter by unique of _MetadataType_.
  """
  unique: BoolQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by UUID of _MetadataType_.
  """
  uuid: UuidQueryField
}

input NestedOrganizationQuery {
  """
  All passed queries must match
  """
  _and: [OrganizationQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [OrganizationQuery]

  """
  Filter by _alias_ of the _Organization_.
  """
  alias: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Organization_.
  """
  name: StringQueryField

  """
  Filter by _OrganizationUnit_ associated with the _Organization_.
  """
  organizationUnits: NestedOrganizationUnitQuery

  """
  Filter by owner of the _Organization_.
  """
  owner: NestedUserQuery

  """
  Filter by the UUID of the owner of the _Organization_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by _OrganizationSource_ associated with the _Organization_.
  """
  sources: NestedOrganizationSourceQuery

  """
  Filter by _status_ of the _Organization_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _Organization_.
  """
  uuid: UuidQueryField
}

input NestedOrganizationSourceQuery {
  """
  All passed queries must match
  """
  _and: [OrganizationSourceQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [OrganizationSourceQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _DataSource_ associated with the _OrganizationSource_.
  """
  dataSource: NestedDataSourceQuery

  """
  Filter by _DataSource_ UUID associated with the _OrganizationSource_.
  """
  dataSourceUuid: UuidQueryField

  """
  Filter by _Organization_ associated with the _OrganizationSource_.
  """
  organization: NestedOrganizationQuery

  """
  Filter by _Organization_ UUID associated with the _OrganizationSource_.
  """
  organizationUuid: UuidQueryField

  """
  Filter by _sourceId_ of the _OrganizationSource_.
  """
  sourceId: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _OrganizationSource_.
  """
  uuid: UuidQueryField
}

input NestedOrganizationUnitQuery {
  """
  All passed queries must match
  """
  _and: [OrganizationUnitQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [OrganizationUnitQuery]

  """
  Filter by _alias_ of the _OrganizationUnit_.
  """
  alias: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _OrganizationUnit_.
  """
  name: StringQueryField

  """
  Filter by _Organization_ of the _OrganizationUnit_.
  """
  organization: NestedOrganizationQuery

  """
  Filter by the UUID of the _Organization_ the _OrganizationUnit_ belongs to.
  """
  organizationUuid: UuidQueryField

  """
  """
  parent: ParentOrganizationUnitEntities

  """
  Filter by the UUID of the parent _OrganizationUnit_ or _Organization_.
  """
  parentUuid: UuidQueryField

  """
  Filter by _status_ of the _OrganizationUnit_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  users: NestedUserQuery

  """
  Filter by _uuid_ of the _OrganizationUnit_.
  """
  uuid: UuidQueryField
}

input NestedRoleAssignmentQuery {
  """
  All passed queries must match
  """
  _and: [RoleAssignmentQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [RoleAssignmentQuery]

  """
  """
  assignee: RoleAssignmentAssignees

  """
  Filter by _assignee_type_.
  """
  assigneeType: RoleAssigneeTypeQueryField

  """
  Filter by _assignee_uuid_.
  """
  assigneeUuid: UuidQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  entity: RoleAssignmentEntities

  """
  Filter by _entity_type_.
  """
  entityType: RoleEntityTypeQueryField

  """
  Filter by _entity_uuid_.
  """
  entityUuid: UuidQueryField

  """
  Filter by _Role_.
  """
  role: NestedRoleWhereQuery

  """
  Filter by _role_uuid_.
  """
  roleUuid: UuidQueryField

  """
  Filter by _RoleAssignmentSource_.
  """
  sources: NestedRoleAssignmentSourceQuery

  """
  Filter by _status_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_.
  """
  uuid: UuidQueryField
}

input NestedRoleAssignmentSourceQuery {
  """
  All passed queries must match
  """
  _and: [RoleAssignmentSourceQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [RoleAssignmentSourceQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _DataSource_.
  """
  dataSource: NestedDataSourceQuery

  """
  Filter by the linked _DataSource_ _uuid_.
  """
  dataSourceUuid: UuidQueryField

  """
  Filter by _RoleAssignment_.
  """
  roleAssignment: NestedRoleAssignmentQuery

  """
  Filter by _RoleAssignment_ _uuid_.
  """
  roleAssignmentUuid: UuidQueryField

  """
  Filter by _source_id_.
  """
  sourceId: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_.
  """
  uuid: UuidQueryField
}

input NestedRoleWhereQuery {
  """
  All passed queries must match
  """
  _and: [RoleWhereQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [RoleWhereQuery]

  """
  Filter _Role_ objects by the assigned _Domain_'s UUID.
  """
  domainUuid: UuidQueryField

  """
  Filter _Role_ objects by the type of entity that they pertain to.
  """
  entityType: RoleEntityTypeQueryField

  """
  Filter _Role_ objects by name.
  """
  name: StringQueryField

  """
  Filter _Role_ objects by status.
  """
  status: StatusQueryField
}

input NestedServiceOnComponentModelQuery {
  """
  All passed queries must match
  """
  _and: [ServiceOnComponentModelQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ServiceOnComponentModelQuery]

  """
  Filter by _AggregatedDatapoints_ associated with the _Services_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by the _code_ field of a _Service_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _CurrentDatapoints_ associated with the _Services_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_ associated with the _Services_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Service_.
  """
  name: StringQueryField

  """
  Filter _ServiceOnComponentModel_ relation using _index_.
  """
  serviceIndex: IntQueryField

  """
  Filter by _status_ of a _Service_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

input NestedServiceOnComponentQuery {
  """
  All passed queries must match
  """
  _and: [ServiceOnComponentQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ServiceOnComponentQuery]

  """
  Filter by _AggregatedDatapoints_ associated with the _Services_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by the _code_ field of a _Service_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _CurrentDatapoints_ associated with the _Services_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_ associated with the _Services_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Service_.
  """
  name: StringQueryField

  """
  Filter _ServiceOnComponent_ relation using _index_.
  """
  serviceIndex: IntQueryField

  """
  Filter by _status_ of a _Service_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

input NestedServiceQuery {
  """
  All passed queries must match
  """
  _and: [ServiceQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ServiceQuery]

  """
  Filter by _AggregatedDatapoints_ associated with the _Services_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by the _code_ field of a _Service_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _CurrentDatapoints_ associated with the _Services_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_ associated with the _Services_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Service_.
  """
  name: StringQueryField

  """
  Filter by _status_ of a _Service_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

input NestedSystemQuery {
  """
  All passed queries must match
  """
  _and: [SystemQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [SystemQuery]

  """
  Filters that can be used to filter and retrieve _AggregatedDatapoints_ associated with the _System_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by the code of the _System_.
  """
  code: StringQueryField

  """
  Filters that can be used to filter and retrieve _Components_ associated with the _System_.
  """
  components: NestedComponentQuery

  """
  Filter by the connection state of the _System_.
  """
  connectionState: SystemConnectionStateQueryField

  """
  Filter by the date and time the connection state was updated for the _System_.
  """
  connectionStateUpdatedAt: DateTimeQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filters that can be used to filter and retrieve _CurrentDatapoints_ associated with the _System_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filters that can be used to filter and retrieve _Datapoints_ associated with the _System_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filter by the description of the _System_.
  """
  description: StringQueryField

  """
  Filters that can be used to filter and retrieve _Events_ associated with the _System_.
  """
  events: NestedEventFilterQuery

  """
  Filter by the UUID of the location where the _System_ is located.
  """
  locationUuid: UuidQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the name of the _System_.
  """
  name: StringQueryField

  """
  """
  owner: ResourceOwners

  """
  Filter by the UUID of the owner of the _System_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by the status of the _System_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the UUID of the _System_.
  """
  uuid: UuidQueryField
}

input NestedTimeStreamQuery {
  """
  All passed queries must match
  """
  _and: [TimeStreamQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [TimeStreamQuery]

  """
  Filter by aggregated _DataPoints_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by _Characteristic_.
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ `uuid`.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentUuid: UuidQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by current _DataPoints_.
  """
  currentDatapoint: NestedCurrentDatapointsWhereQuery

  """
  Filter by _DataPoints_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ and _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  """
  serviceUuid: UuidQueryField

  """
  Filter by `status`.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by `uuid`.
  """
  uuid: UuidQueryField
}

input NestedUserQuery {
  """
  All passed queries must match
  """
  _and: [UserQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [UserQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  email: StringQueryField

  """
  Filter by the login methods of the _User_.
  """
  loginMethods: NestedLoginMethodQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  """
  name: StringQueryField

  """
  """
  organization: NestedOrganizationQuery

  """
  """
  organizationUnits: NestedOrganizationUnitQuery

  """
  """
  organizationUuid: UuidQueryField

  """
  """
  sources: NestedUserSourceQuery

  """
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

input NestedUserSourceQuery {
  """
  All passed queries must match
  """
  _and: [UserSourceQuery]

  """
  """
  _having: Having

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [UserSourceQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the _DataSource_ associated with _UserSource_.
  """
  dataSource: NestedDataSourceQuery

  """
  Filter by the _DataSource_ UUID associated with _UserSource_.
  """
  dataSourceUuid: UuidQueryField

  """
  Filter by the _sourceId_ of the _UserSource_.
  """
  sourceId: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the _User_ associated with _UserSource_.
  """
  user: NestedUserQuery

  """
  Filter by the _User_ UUID associated with _UserSource_.
  """
  userUuid: UuidQueryField

  """
  Filter by the UUID of the _UserSource_.
  """
  uuid: UuidQueryField
}

"""
A _LoginMethod_ is a method of authentication that a _User_ can use to authenticate against DRIVR. This indicates the _User_ to be able to authenticate via an Bearer token from a third party OpenID server and does not handle any OAuth flow within DRIVR.
"""
type OpenIDBearerLoginMethod implements BaseLoginMethod & Entity & GenericOAuthLoginMethod {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethod: AuthenticationMethod

  """
  The UUID of the entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethodUuid: UUID

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The ID the entity is known for on the referenced third party system.
  """
  externalId: String

  """
  The username which is the name indicated by another OAuth server the user should ideally have.
  """
  preferredUsername: String

  """
  The login method type of the entity. Describes the type of authentication which can be used with this _Entity_.
  """
  type: LoginMethod

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The name of the _User_ used for login against DRIVR.
  """
  username: String

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"_DomainAuthenticationMethod_ that uses existing OpenID Bearer tokens issued by third-party OAuth servers.\n"
type OpenIdDelegatedAuthenticationMethod implements Entity {
  """
  The type of authentication method.
  """
  authenticationType: DomainAuthenticationMethod

  "_Configuration_ options for OpenID Bearer token delegation against third-party systems.\n"
  configuration: OpenIdDelegatedAuthenticationMethodConfiguration

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"_Configuration_ options for OpenID Bearer token delegation.\n"
type OpenIdDelegatedAuthenticationMethodConfiguration {
  "The *client_id* used to authenticate DRIVR against the third party authentication service.\n"
  clientId: String!

  "The _issuer_ URL which is pointing to the OpenID provider valid for the given _client_id_.\n"
  issuer: String!
}

"The direction in which items should be ordered while sorting. \nValid `order-by-direction` values are `ASC` (sort items from least-to-greatest) \nand `DESC` (sort items from greatest-to-least). \nThis enum can be particularly useful in specifying how to sort data within DRIVR. \n"
enum OrderByDirection {
  """
  Sort items from least-to-greatest.
  """
  ASC

  """
  Sort items from greatest-to-least.
  """
  DESC
}

"A logically grouped collection of _Users_ within a _Domain_, such as a team working together or a company. \nAn _Organization_ can own _Systems_.\n"
type Organization implements Entity & OrganizationUnitParent {
  """
  An additional unique field for referencing the entity.
  """
  alias: String

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  A paged list of _OrganizationUnits_ belonging to the _Organization_.
  """
  organizationUnits(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationUnitOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _OrganizationUnits_.
    """
    where: OrganizationUnitQuery
  ): PagedOrganizationUnits!

  "The _User_ who owns the entity.\nThis field provides more information about the _User_ who owns the entity.\nThis is an informational field only.\n"
  owner: User

  "The UUID of the _User_ who owns the entity.\nThis is an informational field only.\n"
  ownerUuid: UUID

  """
  A paged list of RoleAssignments (directly assigned or inherited).
  """
  roleAssignments(
    """
    A list of assignee UUIDs by which to filter.
    """
    assigneeUuid: [UUID]

    """
    A list of entity UUIDs by which to filter.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  A paged list of _OrganizationSources_ belonging to the _Organization_.
  """
  sources(
    """
    The list of _DataSource_ UUIDs to filter fetched items.
    """
    dataSourceUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationSourceOrderByQuery]

    """
    The list of _Organization_ UUIDs to filter fetched items.
    """
    organizationUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over organization sources.
    """
    where: OrganizationSourceQuery
  ): PagedOrganizationSources!

  """
  The current status of the entity.
  """
  status: Status!

  """
  A paged list of _Systems_ belonging to the _Organization_.
  """
  systems(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [SystemOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over systems.
    """
    where: SystemQuery
  ): PagedSystems!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  A paged list of _Users_ belonging to the _Organization_.
  """
  users(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [UserOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "This `where` filter is used to narrow down the results of the `users` API endpoint.\nThis filter allows for complex querying over _Users_ using fields.\n"
    where: UserQuery
  ): PagedUsers!

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Defines the sorting order for _Organization_.
"""
input OrganizationOrderByQuery {
  """
  Order _Organization_ by _alias_ field.
  """
  alias: OrderByDirection

  """
  Order _Organization_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _Organization_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _Organization_ by _uuid_ field of associated owner.
  """
  ownerUuid: OrderByDirection

  """
  Order _Organization_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _Organization_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _Organization_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
Allows filtering of _Organizations_ using various filters.
"""
input OrganizationQuery {
  """
  All passed queries must match
  """
  _and: [OrganizationQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [OrganizationQuery]

  """
  Filter by _alias_ of the _Organization_.
  """
  alias: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Organization_.
  """
  name: StringQueryField

  """
  Filter by _OrganizationUnit_ associated with the _Organization_.
  """
  organizationUnits: NestedOrganizationUnitQuery

  """
  Filter by owner of the _Organization_.
  """
  owner: NestedUserQuery

  """
  Filter by the UUID of the owner of the _Organization_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by _OrganizationSource_ associated with the _Organization_.
  """
  sources: NestedOrganizationSourceQuery

  """
  Filter by _status_ of the _Organization_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _Organization_.
  """
  uuid: UuidQueryField
}

"This node represents an _Organization_'s source in DRIVR.\nAn _Organization_ can have multiple sources.\nThey represent a link to another third party application and describes the unique ID of the _Organization_ in that application.\n"
type OrganizationSource implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The DataSource linked to the the entity.
  """
  dataSource: DataSource

  """
  The UUID of the DataSource linked to the entity.
  """
  dataSourceUuid: UUID

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The entity's Organization.
  """
  organization: Organization

  """
  The UUID of the entity's Organization.
  """
  organizationUuid: UUID

  """
  An identifier in an external system.
  """
  sourceId: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Defines the sorting order for _OrganizationSource_.
"""
input OrganizationSourceOrderByQuery {
  """
  Order _OrganizationSource_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _OrganizationSource_ by _uuid_ field of associated _DataSource_.
  """
  dataSourceUuid: OrderByDirection

  """
  Order _OrganizationSource_ by _uuid_ field of associated _Organization_.
  """
  organizationUuid: OrderByDirection

  """
  Order _OrganizationSource_ by _sourceId_ field.
  """
  sourceId: OrderByDirection

  """
  Order _OrganizationSource_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _OrganizationSource_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
Allows filtering of _OrganizationSources_ using various filters.
"""
input OrganizationSourceQuery {
  """
  All passed queries must match
  """
  _and: [OrganizationSourceQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [OrganizationSourceQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _DataSource_ associated with the _OrganizationSource_.
  """
  dataSource: NestedDataSourceQuery

  """
  Filter by _DataSource_ UUID associated with the _OrganizationSource_.
  """
  dataSourceUuid: UuidQueryField

  """
  Filter by _Organization_ associated with the _OrganizationSource_.
  """
  organization: NestedOrganizationQuery

  """
  Filter by _Organization_ UUID associated with the _OrganizationSource_.
  """
  organizationUuid: UuidQueryField

  """
  Filter by _sourceId_ of the _OrganizationSource_.
  """
  sourceId: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_ of the _OrganizationSource_.
  """
  uuid: UuidQueryField
}

"An _OrganizationUnit_ is a part of an _Organization_.\n"
type OrganizationUnit implements Entity & OrganizationUnitParent {
  """
  An additional unique field for referencing the entity.
  """
  alias: String

  """
  A list of all parent UUIDs till you reach the end of the tree of the _Organization_.
  """
  allParentUuids: [UUID!]!

  """
  A list of all parent UUIDs till you reach the end of the tree of the _Organization_.
  """
  allParents: [OrganizationUnitParent!]!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A paged list of direct children _OrganizationUnit_.
  """
  directChildren(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationUnitOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _OrganizationUnits_.
    """
    where: OrganizationUnitQuery
  ): PagedOrganizationUnits!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  The entity's Organization.
  """
  organization: Organization!

  """
  The UUID of the entity's Organization.
  """
  organizationUuid: UUID!

  """
  The parent _OrganizationUnit_ or _Organization_ of the _OrganizationUnit_.
  """
  parent: OrganizationUnitParent!

  """
  The parent _OrganizationUnit_ of the _OrganizationUnit_.
  """
  parentOrganizationUnit: OrganizationUnit

  """
  The UUID of the parent _OrganizationUnit_.
  """
  parentOrganizationUnitUuid: UUID

  """
  A paged list of RoleAssignments (directly assigned or inherited).
  """
  roleAssignments(
    """
    A list of assignee UUIDs by which to filter.
    """
    assigneeUuid: [UUID]

    """
    A list of entity UUIDs by which to filter.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  A list of _Users_ linked to the _OrganizationUnit_.
  """
  users(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [UserOrderByQuery]

    """
    The list of _User_ UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "This `where` filter is used to narrow down the results of the `users` API endpoint.\nThis filter allows for complex querying over _Users_ using fields.\n"
    where: UserQuery
  ): PagedUsers!

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Defines the sorting order for _OrganizationUnit_.
"""
input OrganizationUnitOrderByQuery {
  """
  Order _OrganizationUnit_ by _alias_ field.
  """
  alias: OrderByDirection

  """
  Order _OrganizationUnit_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _OrganizationUnit_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _OrganizationUnit_ by _uuid_ field of associated _Organization_.
  """
  organizationUuid: OrderByDirection

  """
  Order _OrganizationUnit_ by _uuid_ field of associated _ParentOrganizationUnit_.
  """
  parentOrganizationUnitUuid: OrderByDirection

  """
  Order _OrganizationUnit_ by _parentUuid_ field.
  """
  parentUuid: OrderByDirection

  """
  Order _OrganizationUnit_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _OrganizationUnit_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _OrganizationUnit_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
A parent _OrganizationUnit_ or _Organization_ of an _OrganizationUnit_.
"""
interface OrganizationUnitParent implements Entity {
  """
  An additional unique field for referencing the entity.
  """
  alias: String

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Allows filtering of _OrganizationUnits_ using various filters.
"""
input OrganizationUnitQuery {
  """
  All passed queries must match
  """
  _and: [OrganizationUnitQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [OrganizationUnitQuery]

  """
  Filter by _alias_ of the _OrganizationUnit_.
  """
  alias: StringQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _OrganizationUnit_.
  """
  name: StringQueryField

  """
  Filter by _Organization_ of the _OrganizationUnit_.
  """
  organization: NestedOrganizationQuery

  """
  Filter by the UUID of the _Organization_ the _OrganizationUnit_ belongs to.
  """
  organizationUuid: UuidQueryField

  """
  """
  parent: ParentOrganizationUnitEntities

  """
  Filter by the UUID of the parent _OrganizationUnit_ or _Organization_.
  """
  parentUuid: UuidQueryField

  """
  Filter by _status_ of the _OrganizationUnit_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  users: NestedUserQuery

  """
  Filter by _uuid_ of the _OrganizationUnit_.
  """
  uuid: UuidQueryField
}

"""
A paged list of aggregated datapoints.
"""
type PagedAggregatedDatapoints {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  """
  items: [AggregatedDatapoint!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list for event aggregation results
"""
type PagedAggregatedEvents {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  A list of Event Aggregation results.
  """
  items: [AggregatedEvent!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of _ApiTokens_.
"""
type PagedApiTokens {
  """
  A list of _ApiTokens_.
  """
  items: [ApiToken!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
Retrieves a paged list of `ApplicationConsumer` instances within DRIVR, with optional offset and limit parameters for pagination.
"""
type PagedApplicationConsumers {
  """
  A list of `ApplicationConsumer` instances within DRIVR.
  """
  items: [ApplicationConsumer!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of AuthenticationMethods.
"""
type PagedAuthenticationMethods {
  """
  A list of AuthenticationMethods.
  """
  items: [AuthenticationMethod!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Certificates.
"""
type PagedCertificates {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  A list of Certificates.
  """
  items: [Certificate!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of CharacteristicValidValues.
"""
type PagedCharacteristicValidValues {
  """
  A list of CharacteristicValidValues.
  """
  items: [CharacteristicValidValue!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Characteristics.
"""
type PagedCharacteristics {
  """
  A list of Characteristics.
  """
  items: [Characteristic!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"Retrieve paged _ComponentModel_'s\n"
type PagedComponentModels {
  "A list of _ComponentModel_ objects.\n"
  items: [ComponentModel!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of _Components_.
"""
type PagedComponents {
  """
  A list of _Components_ included in the page.
  """
  items: [Component!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paginated list of _DataSource_ entities.
"""
type PagedDataSources {
  """
  A list of _DataSource_ entities.
  """
  items: [DataSource!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Datapoints.
"""
type PagedDatapoints {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  """
  items: [Datapoint!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of results for aggregated distinct datapoints.
"""
type PagedDistinctAggregatedDatapoints {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  A list of aggregated distinct datapoint results.
  """
  items: [DistinctAggregatedDatapoints!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of distinct datapoints.
"""
type PagedDistinctDatapoints {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  A list of value distinct datapoints.
  """
  items: [DistinctDatapoints!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of distinct metadata values.
"""
type PagedDistinctMetadataValues {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  A list of distinct metadata values.
  """
  items: [DistinctMetadataValue!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of DomainFeatures.
"""
type PagedDomainFeatures {
  """
  A list of DomainFeatures.
  """
  items: [DomainFeature!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of event Acknowledgments.
"""
type PagedEventAcks {
  """
  A list of event Acknowledgments.
  """
  items: [EventAck!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of EventModelLinks.
"""
type PagedEventModelLinks {
  """
  A list of EventModelLinks.
  """
  items: [EventModelLink!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"Returns a list of _EventModels_ with the requested fields and pagination information.\n"
type PagedEventModels {
  "Retrieves a list of _EventModels_ included in the current page.\n"
  items: [EventModel!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Events.
"""
type PagedEvents {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  A list of Events.
  """
  items: [Event!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of Integrations.
"""
type PagedIntegrations {
  """
  A list of Integrations.
  """
  items: [Integration!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Issuers.
"""
type PagedIssuers {
  """
  A list of Issuers.
  """
  items: [Issuer!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of _LoginMethods_.
"""
type PagedLoginMethods {
  """
  A list of _LoginMethods_.
  """
  items: [BaseLoginMethod!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of _MachineUsers_.
"""
type PagedMachineUsers {
  """
  A list of _MachineUsers_.
  """
  items: [MachineUser!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of MetadataTypes.
"""
type PagedMetadataTypes {
  """
  A list of MetadataTypes.
  """
  items: [MetadataType!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of OrganizationSources.
"""
type PagedOrganizationSources {
  """
  A list of OrganizationSources.
  """
  items: [OrganizationSource!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of _OrganizationUnits_.
"""
type PagedOrganizationUnits {
  """
  A list of _OrganizationUnits_.
  """
  items: [OrganizationUnit!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Organizations.
"""
type PagedOrganizations {
  """
  A list of Organizations.
  """
  items: [Organization!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of RoleAssignmentSources.
"""
type PagedRoleAssignmentSources {
  """
  A list of RoleAssignmentSources.
  """
  items: [RoleAssignmentSource!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of RoleAssignments.
"""
type PagedRoleAssignments {
  """
  A list of RoleAssignments.
  """
  items: [RoleAssignment!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paginated list of _Role_ objects.
"""
type PagedRoles {
  """
  The paged list of _Role_ objects.
  """
  items: [Role!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of _Services_.
"""
type PagedServices {
  """
  A list of _Services_ to be retrieved.
  """
  items: [Service!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Services associated with a Component.
"""
type PagedServicesOnComponent {
  """
  A list of Services associated with a Component.
  """
  items: [ServiceOnComponent!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Services associated with a ComponentModel.
"""
type PagedServicesOnComponentModel {
  """
  A list of Services associated with a ComponentModel.
  """
  items: [ServiceOnComponentModel!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Setpoints.
"""
type PagedSetpoints {
  """
  The cursor for requesting the next batch of items.
  """
  cursor: String

  """
  """
  items: [Setpoint!]!

  """
  The maximum number of items requested.
  """
  limit: Int!
}

"""
A paged list of Systems.
"""
type PagedSystems {
  """
  A list of Systems.
  """
  items: [System!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of TimeStreams.
"""
type PagedTimeStreams {
  """
  A list of TimeStreams.
  """
  items: [TimeStream!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of UserSources.
"""
type PagedUserSources {
  """
  A list of UserSources.
  """
  items: [UserSource!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

"""
A paged list of Users.
"""
type PagedUsers {
  """
  A list of Users.
  """
  items: [User!]!

  """
  The maximum number of items requested.
  """
  limit: Int!

  """
  The current offset of items requested.
  """
  offset: Int!

  """
  The total number of available items.
  """
  totalItems: Int!
}

input ParentOrganizationUnitEntities {
  """
  Filters that can be used to filter and retrieve _Organization_ associated with the _OrganizationUnit_ .
  """
  organization: NestedOrganizationQuery

  """
  Filters that can be used to filter and retrieve _OrganizationUnit_ associated with the _OrganizationUnit_.
  """
  organizationUnit: NestedOrganizationUnitQuery
}

"""
A _LoginMethod_ is a method of authentication that a _User_ can use to authenticate against DRIVR. It indicates that that the _User_ has a password which can be used for authentication.
"""
type PasswordLoginMethod implements BaseLoginMethod & Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethod: AuthenticationMethod

  """
  The UUID of the entity's _DomainAuthenticationMethod_.
  """
  domainAuthenticationMethodUuid: UUID

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The login method type of the entity. Describes the type of authentication which can be used with this _Entity_.
  """
  type: LoginMethod

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The name of the _User_ used for login against DRIVR.
  """
  username: String

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

type Query {
  """
  Get multiple _AggregatedDatapoint_s.
  """
  aggregatedDatapoints(
    """
    The cursor after which items should be returned.
    """
    after: String

    "Add an aggregate datapoint to each grid interval even if no explicit datapoint was published during that interval. In the case of missing datapoints, the last value recorded is carried forward into empty time intervals.\n"
    carryForward: Boolean

    """
    The list of Characteristic codes by which to filter fetched items.
    """
    characteristicCode: [String]

    """
    The list of Characteristic UUIDs by which to filter fetched items.
    """
    characteristicUuid: [UUID]

    """
    The list of Component codes by which to filter fetched items.
    """
    componentCode: [String]

    """
    The list of Component Model codes by which to filter fetched items.
    """
    componentModelCode: [String]

    """
    The list of Component Model UUIDs by which to filter fetched items.
    """
    componentModelUuid: [UUID]

    """
    The list of Component UUIDs by which to filter fetched items.
    """
    componentUuid: [UUID]

    "The inclusive start of the window which data should be requested\nIf a `grid` is passed along with this parameter, the value will be adjusted onto the previous possible time. \nA grid of 1h will snap to the previous full hour\nA grid of 1d snaps to the previous midnight in the UTC time zone\nA grid of 1w snaps to the previous midnight on Monday in the UTC time zone\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with a time of 12:12:00 matches to 12:00:00 and returns all elements from 12:00:00 to 12:15:00 in this grid.\n"
    from: DateTime

    "Given a start and end time, a `grid` is the size of the partitions by which this time period should be divided.\nIt is specified by a timespan in ISO 8601 duration format. \nIf the grid is set, start and end are required.\nThe smallest time unit supported for the grid is `second`.\nThe largest time unit supported for the grid is `week`.\nAll grid values must be evenly divisible into the next largest available time unit (minutes, hours, days or weeks). For example, 20s is valid because it can evenly divide into 60 seconds (20 · 3 = 60 seconds = 1 minute).\nAll grid values must be non-zero, non-negative integers.\nGrid values may be represented in smaller units as long as they evenly divide into the next largest unit. For example, 120s may be used instead of 2m because 120s / 60s = 2m.\nGrids which are in hours can only be full hours (1-23) (e.g. 1 hour 30 minutes is invalid).\nGrids which are in days must be full days (1-6) (e.g. 1 day and 3 hours is invalid)\nGrids which are in weeks cannot have smaller units (days or hours) attached (e.g. 1 week and 1 day is invalid)\n"
    grid: Timespan

    """
    Group results by object.
    """
    group: [AggregatedDatapointGroup]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DatapointOrderByQuery]

    "Optional `Integer`. Configures the rounding of aggregate values before being counted.\n`round` specifies the number decimals to use when rounding the number.\n0 rounds to the nearest integer. Optional, defaults to no rounding applied.\n"
    round: Int

    """
    The list of _Service_ codes by which to filter fetched items.
    """
    serviceCode: [String]

    """
    A list of _Service_ & _ComponentModel_ relationship indices to filter retrieved items.
    """
    serviceIndex: [Int]

    """
    A list of _Service_ UUIDs by which to filter retrieved items.
    """
    serviceUuid: [UUID]

    """
    The list of System codes by which to filter fetched items.
    """
    systemCode: [String]

    """
    The list of System UUIDs by which to filter fetched items.
    """
    systemUuid: [UUID]

    """
    The list of TimeStream UUIDs by which to filter fetched items.
    """
    timeStreamUuid: [UUID]

    "The exclusive end of the window which data should be requested\nIf a grid is passed along with this parameter, the value will be adjusted onto the next possible time. \nA grid of 1h will snap to the next full hour\nA grid of 1d snaps to next midnight in the UTC time zone\nA grid of 1w snaps to the next midnight on Monday in the UTC time zone.\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with an `to` time of 12:12:00 matches to 12:15:00 and returns all elements from 12:00:00 to 12:15:00 in the last grid.\n"
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _AggregatedDatapoint_s.
    """
    where: AggregatedDatapointsWhereQuery
  ): PagedAggregatedDatapoints!

  """
  Aggregate events on different entities.
  """
  aggregatedEvents(
    """
    The cursor after which items should be returned.
    """
    after: String

    """
    The inclusive from of the window which data should be requested.
    """
    from: DateTime

    """
    The grouping which should be applied.
    """
    groupBy: AggregatedEventGroupingEntityType!

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [AggregatedEventOrderByQuery]

    """
    The exclusive to of the window which data should be requested
    """
    to: DateTime

    """
    Complex filtering over events
    """
    where: AggregatedEventQuery
  ): PagedAggregatedEvents!

  """
  Get a specific _ApiToken_ by UUID.
  """
  apiToken(
    """
    The UUID of the _ApiToken_ to be retrieved.
    """
    uuid: UUID!
  ): ApiToken!

  """
  Retrieve multiple _ApiTokens_.
  """
  apiTokens(
    """
    The type of entity of the identity for this _ApiToken_.
    """
    entityType: ApiTokenEntityType

    """
    The list of _User_ or _MachineUser_ UUIDs to filter the _ApiTokens_ by.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ApiTokenOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ApiTokens_.
    """
    where: ApiTokenQuery
  ): PagedApiTokens!

  """
  This endpoint retrieves a specific `ApplicationConsumer` by UUID.
  """
  applicationConsumer(
    """
    The UUID of the `ApplicationConsumer`.
    """
    uuid: UUID!
  ): ApplicationConsumer!

  """
  This endpoint retrieves multiple `ApplicationConsumer` objects.
  """
  applicationConsumers(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ApplicationConsumerOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Filtering options for `ApplicationConsumer` objects.
    """
    where: ApplicationConsumerQuery
  ): PagedApplicationConsumers!

  "Retrieve a specific _DomainAuthenticationMethod_ by its UUID. \n"
  authenticationMethod(
    "The UUID of the _DomainAuthenticationMethod_ to retrieve.\n"
    uuid: UUID!
  ): AuthenticationMethod!

  "This endpoint returns multiple _DomainAuthenticationMethods_ for the current _Domain_ based on filter criteria specified as arguments.\nEach _DomainAuthenticationMethods_ represents a global setting for authentication against DRIVR.\nThis could be internal or a third party system depending on the _DomainAuthenticationMethod_ configured.\n"
  authenticationMethods(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DomainAuthenticationMethodOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "Filter the _DomainAuthenticationMethods_ by complex conditions.\nThis can be one or multiple conditions, using field names as keys, and its specific conditions as the value of that key.\n"
    where: DomainAuthenticationMethodQuery
  ): PagedAuthenticationMethods!

  """
  Get a specific _Certificate_ by UUID.
  """
  certificate(
    """
    The UUID of the _Certificate_ to be retrieved.
    """
    uuid: UUID!
  ): Certificate!

  """
  Retrieve multiple _Certificates_.
  """
  certificates(
    """
    The type of entity that the _Certificate_ object pertains to.
    """
    entityType: CertificateEntityType

    """
    The list of _System_ or _Component_ UUIDs to filter the _Certificates_ by.
    """
    entityUuid: [UUID]

    """
    The list of _Issuer_ UUIDs to filter the _Certificates_ by.
    """
    issuerUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CertificateOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Certificates_.
    """
    where: CertificateQuery
  ): PagedCertificates!

  """
  Returns the details of the _Characteristic_ with the provided `uuid`.
  """
  characteristic(
    """
    The `uuid` of the _Characteristic_ to be returned.
    """
    uuid: UUID!
  ): Characteristic!

  """
  Retrieves the information about a _CharacteristicValidValue_ entity with a specific UUID.
  """
  characteristicValidValue(
    """
    The UUID of the _CharacteristicValidValue_ entity to retrieve.
    """
    uuid: UUID!
  ): CharacteristicValidValue!

  """
  Retrieves information for multiple _CharacteristicValidValue_ entities.
  """
  characteristicValidValues(
    """
    The UUID of the _Characteristic_ entity to filter by.
    """
    characteristicUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicValidValueOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedCharacteristicValidValues!

  """
  Returns a list of paged _Characteristic_'s matching a given set of filters and ordering.
  """
  characteristics(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Characteristics_.
    """
    where: CharacteristicQuery
  ): PagedCharacteristics!

  """
  Get a specific Component by UUID.
  """
  component(
    """
    The UUID of the _Component_ to be retrieved.
    """
    uuid: UUID!
  ): Component!

  """
  Retrieve a specific _ComponentModel_ by its UUID
  """
  componentModel(
    """
    UUID of the _ComponentModel_ to be retrieved.
    """
    uuid: UUID!
  ): ComponentModel!

  "This endpoint retrieves multiple _ComponentModel_ objects by filtering and/or pagination.\n"
  componentModels(
    "Filter component models by their code.\n"
    code: String

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentModelOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ComponentModels_.
    """
    where: ComponentModelQuery
  ): PagedComponentModels!

  """
  Retrieve multiple _Components_.
  """
  components(
    """
    The list of component model UUIDs to filter the components by.
    """
    componentModelUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of system UUIDs to filter the components by.
    """
    systemUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  Get the latest _Datapoints_ with various filters.
  """
  currentDatapoints(
    """
    The cursor after which items should be returned.
    """
    after: String

    """
    The list of Characteristic codes by which to filter fetched items.
    """
    characteristicCode: [String]

    """
    The list of Characteristic UUIDs by which to filter fetched items.
    """
    characteristicUuid: [UUID]

    """
    The list of Component codes by which to filter fetched items.
    """
    componentCode: [String]

    """
    The list of Component Model codes by which to filter fetched items.
    """
    componentModelCode: [String]

    """
    The list of Component Model UUIDs by which to filter fetched items.
    """
    componentModelUuid: [UUID]

    """
    The list of Component UUIDs by which to filter fetched items.
    """
    componentUuid: [UUID]

    "The inclusive start of the window which data should be requested\nIf a `grid` is passed along with this parameter, the value will be adjusted onto the previous possible time. \nA grid of 1h will snap to the previous full hour\nA grid of 1d snaps to the previous midnight in the UTC time zone\nA grid of 1w snaps to the previous midnight on Monday in the UTC time zone\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with a time of 12:12:00 matches to 12:00:00 and returns all elements from 12:00:00 to 12:15:00 in this grid.\n"
    from: DateTime

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DatapointOrderByQuery]

    "Optional `Integer`. Configures the rounding of raw values before being counted.\n`round` specifies the number decimals to use when rounding the number.\n0 rounds to the nearest integer. Optional, defaults to no rounding applied.\n"
    round: Int

    """
    The list of _Service_ codes by which to filter fetched items.
    """
    serviceCode: [String]

    """
    A list of _Service_ & _ComponentModel_ relationship indices to filter retrieved items.
    """
    serviceIndex: [Int]

    """
    A list of _Service_ UUIDs by which to filter retrieved items.
    """
    serviceUuid: [UUID]

    """
    The list of System codes by which to filter fetched items.
    """
    systemCode: [String]

    """
    The list of System UUIDs by which to filter fetched items.
    """
    systemUuid: [UUID]

    """
    The list of TimeStream UUIDs by which to filter fetched items.
    """
    timeStreamUuid: [UUID]

    "The exclusive end of the window which data should be requested\nIf a grid is passed along with this parameter, the value will be adjusted onto the next possible time. \nA grid of 1h will snap to the next full hour\nA grid of 1d snaps to next midnight in the UTC time zone\nA grid of 1w snaps to the next midnight on Monday in the UTC time zone.\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with an `to` time of 12:12:00 matches to 12:15:00 and returns all elements from 12:00:00 to 12:15:00 in the last grid.\n"
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over Datapoints
    """
    where: DatapointsWhereQuery
  ): PagedDatapoints!

  "Retrieve information about the _Domain_ associated with the current _User_'s tenant. \nA _Domain_ is an isolated environment for an individual tenant, normally a company or a team.\nThis endpoint can be used to obtain information about the current tenant's _Domain_ within DRIVR.\n"
  currentDomain: Domain!

  """
  Retrieve a specific _DataSource_ entity by its UUID.
  """
  dataSource(
    """
    The UUID of the _DataSource_ entity.
    """
    uuid: UUID!
  ): DataSource!

  """
  Retrieve multiple _DataSources_ by specifying one or more codes to filter by.
  """
  dataSources(
    """
    The codes used to filter the _DataSource_.
    """
    code: [String]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DataSourceOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over data sources.
    """
    where: DataSourceQuery
  ): PagedDataSources!

  """
  Get all _Datapoints_ with various filters.
  """
  datapoints(
    """
    The cursor after which items should be returned.
    """
    after: String

    """
    The list of Characteristic codes by which to filter fetched items.
    """
    characteristicCode: [String]

    """
    The list of Characteristic UUIDs by which to filter fetched items.
    """
    characteristicUuid: [UUID]

    """
    The list of Component codes by which to filter fetched items.
    """
    componentCode: [String]

    """
    The list of Component Model codes by which to filter fetched items.
    """
    componentModelCode: [String]

    """
    The list of Component Model UUIDs by which to filter fetched items.
    """
    componentModelUuid: [UUID]

    """
    The list of Component UUIDs by which to filter fetched items.
    """
    componentUuid: [UUID]

    "The inclusive start of the window which data should be requested\nIf a `grid` is passed along with this parameter, the value will be adjusted onto the previous possible time. \nA grid of 1h will snap to the previous full hour\nA grid of 1d snaps to the previous midnight in the UTC time zone\nA grid of 1w snaps to the previous midnight on Monday in the UTC time zone\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with a time of 12:12:00 matches to 12:00:00 and returns all elements from 12:00:00 to 12:15:00 in this grid.\n"
    from: DateTime

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DatapointOrderByQuery]

    "Optional `Integer`. Configures the rounding of raw values before being counted.\n`round` specifies the number decimals to use when rounding the number.\n0 rounds to the nearest integer. Optional, defaults to no rounding applied.\n"
    round: Int

    """
    The list of _Service_ codes by which to filter fetched items.
    """
    serviceCode: [String]

    """
    A list of _Service_ & _ComponentModel_ relationship indices to filter retrieved items.
    """
    serviceIndex: [Int]

    """
    A list of _Service_ UUIDs by which to filter retrieved items.
    """
    serviceUuid: [UUID]

    """
    The list of System codes by which to filter fetched items.
    """
    systemCode: [String]

    """
    The list of System UUIDs by which to filter fetched items.
    """
    systemUuid: [UUID]

    """
    The list of TimeStream UUIDs by which to filter fetched items.
    """
    timeStreamUuid: [UUID]

    "The exclusive end of the window which data should be requested\nIf a grid is passed along with this parameter, the value will be adjusted onto the next possible time. \nA grid of 1h will snap to the next full hour\nA grid of 1d snaps to next midnight in the UTC time zone\nA grid of 1w snaps to the next midnight on Monday in the UTC time zone.\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with an `to` time of 12:12:00 matches to 12:15:00 and returns all elements from 12:00:00 to 12:15:00 in the last grid.\n"
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over Datapoints
    """
    where: DatapointsWhereQuery
  ): PagedDatapoints!

  """
  Returns all distinct values for a set of aggregated datapoints.
  """
  distinctAggregatedDatapoints(
    """
    The cursor after which items should be returned.
    """
    after: String

    "Specify aggregate function to apply for each grid portion.\nOne of avg, count, sum, min, max, first, last.\nOnly one aggregation is supported per call. Always required.\n"
    aggregate: ValueAggregate!

    "Add an aggregate datapoint to each grid interval even if no explicit datapoint was published during that interval. In the case of missing datapoints, the last value recorded is carried forward into empty time intervals.\n"
    carryForward: Boolean

    """
    The list of Characteristic codes by which to filter fetched items.
    """
    characteristicCode: [String]

    """
    The list of Characteristic UUIDs by which to filter fetched items.
    """
    characteristicUuid: [UUID]

    """
    The list of Component codes by which to filter fetched items.
    """
    componentCode: [String]

    """
    The list of Component Model codes by which to filter fetched items.
    """
    componentModelCode: [String]

    """
    The list of Component Model UUIDs by which to filter fetched items.
    """
    componentModelUuid: [UUID]

    """
    The list of Component UUIDs by which to filter fetched items.
    """
    componentUuid: [UUID]

    "The inclusive start of the window which data should be requested\nIf a `grid` is passed along with this parameter, the value will be adjusted onto the previous possible time. \nA grid of 1h will snap to the previous full hour\nA grid of 1d snaps to the previous midnight in the UTC time zone\nA grid of 1w snaps to the previous midnight on Monday in the UTC time zone\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with a time of 12:12:00 matches to 12:00:00 and returns all elements from 12:00:00 to 12:15:00 in this grid.\n"
    from: DateTime

    "Given a start and end time, a `grid` is the size of the partitions by which this time period should be divided.\nIt is specified by a timespan in ISO 8601 duration format. \nIf the grid is set, start and end are required.\nThe smallest time unit supported for the grid is `second`.\nThe largest time unit supported for the grid is `week`.\nAll grid values must be evenly divisible into the next largest available time unit (minutes, hours, days or weeks). For example, 20s is valid because it can evenly divide into 60 seconds (20 · 3 = 60 seconds = 1 minute).\nAll grid values must be non-zero, non-negative integers.\nGrid values may be represented in smaller units as long as they evenly divide into the next largest unit. For example, 120s may be used instead of 2m because 120s / 60s = 2m.\nGrids which are in hours can only be full hours (1-23) (e.g. 1 hour 30 minutes is invalid).\nGrids which are in days must be full days (1-6) (e.g. 1 day and 3 hours is invalid)\nGrids which are in weeks cannot have smaller units (days or hours) attached (e.g. 1 week and 1 day is invalid)\n"
    grid: Timespan

    """
    Group results by object. One of CHARACTERISTIC or TIME_STREAM. Defaults to CHARACTERISTIC if not provided.
    """
    group: DistinctDatapointGroup

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    "Optional `Boolean`. If set to `true`, all observed values of the returned page will be listed per grouping/time step.\nHence, the resulting distinct value list all observed values with a possible count of 0.\nDefault is `False`, which omits all distinct values with a count of 0.\n"
    listZeroCounts: Boolean

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DatapointOrderByQuery]

    "Optional `Integer`. Configures the rounding of aggregate values before being counted.\n`round` specifies the number decimals to use when rounding the number.\n0 rounds to the nearest integer. Optional, defaults to no rounding applied.\n"
    round: Int

    """
    The list of _Service_ codes by which to filter fetched items.
    """
    serviceCode: [String]

    """
    A list of _Service_ & _ComponentModel_ relationship indices to filter retrieved items.
    """
    serviceIndex: [Int]

    """
    A list of _Service_ UUIDs by which to filter retrieved items.
    """
    serviceUuid: [UUID]

    """
    The list of System codes by which to filter fetched items.
    """
    systemCode: [String]

    """
    The list of System UUIDs by which to filter fetched items.
    """
    systemUuid: [UUID]

    """
    The list of TimeStream UUIDs by which to filter fetched items.
    """
    timeStreamUuid: [UUID]

    "The exclusive end of the window which data should be requested\nIf a grid is passed along with this parameter, the value will be adjusted onto the next possible time. \nA grid of 1h will snap to the next full hour\nA grid of 1d snaps to next midnight in the UTC time zone\nA grid of 1w snaps to the next midnight on Monday in the UTC time zone.\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with an `to` time of 12:12:00 matches to 12:15:00 and returns all elements from 12:00:00 to 12:15:00 in the last grid.\n"
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "Complex nested filters on aggregated distinct datapoints allowing to query by attached entities.\n"
    where: DistinctAggregatedDatapointsWhereQuery
  ): PagedDistinctAggregatedDatapoints!

  "Returns a count for distinct _Datapoints_.  It allows for filtering and sorting of data points by various parameters.\n"
  distinctDatapoints(
    """
    The cursor after which items should be returned.
    """
    after: String

    "Specifies whether to include a _Datapoint_ for each grid interval in the response even if no actual Datapoints fall into the interval.  In this case, the last value seen is carried forward. A `from`, `to`, and `grid` parameter **must** be set if `carry_forward` is set to `true`.  The default value is `false`.\n"
    carryForward: Boolean

    """
    The list of Characteristic codes by which to filter fetched items.
    """
    characteristicCode: [String]

    """
    The list of Characteristic UUIDs by which to filter fetched items.
    """
    characteristicUuid: [UUID]

    """
    The list of Component codes by which to filter fetched items.
    """
    componentCode: [String]

    """
    The list of Component Model codes by which to filter fetched items.
    """
    componentModelCode: [String]

    """
    The list of Component Model UUIDs by which to filter fetched items.
    """
    componentModelUuid: [UUID]

    """
    The list of Component UUIDs by which to filter fetched items.
    """
    componentUuid: [UUID]

    "The inclusive start of the window which data should be requested\nIf a `grid` is passed along with this parameter, the value will be adjusted onto the previous possible time. \nA grid of 1h will snap to the previous full hour\nA grid of 1d snaps to the previous midnight in the UTC time zone\nA grid of 1w snaps to the previous midnight on Monday in the UTC time zone\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with a time of 12:12:00 matches to 12:00:00 and returns all elements from 12:00:00 to 12:15:00 in this grid.\n"
    from: DateTime

    "Given a start and end time, a `grid` is the size of the partitions by which this time period should be divided.\nIt is specified by a timespan in ISO 8601 duration format. \nIf the grid is set, start and end are required.\nThe smallest time unit supported for the grid is `second`.\nThe largest time unit supported for the grid is `week`.\nAll grid values must be evenly divisible into the next largest available time unit (minutes, hours, days or weeks). For example, 20s is valid because it can evenly divide into 60 seconds (20 · 3 = 60 seconds = 1 minute).\nAll grid values must be non-zero, non-negative integers.\nGrid values may be represented in smaller units as long as they evenly divide into the next largest unit. For example, 120s may be used instead of 2m because 120s / 60s = 2m.\nGrids which are in hours can only be full hours (1-23) (e.g. 1 hour 30 minutes is invalid).\nGrids which are in days must be full days (1-6) (e.g. 1 day and 3 hours is invalid)\nGrids which are in weeks cannot have smaller units (days or hours) attached (e.g. 1 week and 1 day is invalid)\n"
    grid: Timespan

    "Specifies the type of object to group the results by.  Accepted values are `CHARACTERISTIC` or `TIME_STREAM`. The default value is `CHARACTERISTIC` if this parameter is not provided.\n"
    group: DistinctDatapointGroup

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    "Optional `Boolean`. If set to `true`, all observed values of the returned page will be listed per grouping/time step.\nHence, the resulting distinct value list all observed values with a possible count of 0.\nDefault is `False`, which omits all distinct values with a count of 0.\n"
    listZeroCounts: Boolean

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DatapointOrderByQuery]

    "Optional `Integer`. Configures the rounding of raw values before being counted.\n`round` specifies the number decimals to use when rounding the number.\n0 rounds to the nearest integer. Optional, defaults to no rounding applied.\n"
    round: Int

    """
    The list of _Service_ codes by which to filter fetched items.
    """
    serviceCode: [String]

    """
    A list of _Service_ & _ComponentModel_ relationship indices to filter retrieved items.
    """
    serviceIndex: [Int]

    """
    A list of _Service_ UUIDs by which to filter retrieved items.
    """
    serviceUuid: [UUID]

    """
    The list of System codes by which to filter fetched items.
    """
    systemCode: [String]

    """
    The list of System UUIDs by which to filter fetched items.
    """
    systemUuid: [UUID]

    """
    The list of TimeStream UUIDs by which to filter fetched items.
    """
    timeStreamUuid: [UUID]

    "The exclusive end of the window which data should be requested\nIf a grid is passed along with this parameter, the value will be adjusted onto the next possible time. \nA grid of 1h will snap to the next full hour\nA grid of 1d snaps to next midnight in the UTC time zone\nA grid of 1w snaps to the next midnight on Monday in the UTC time zone.\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with an `to` time of 12:12:00 matches to 12:15:00 and returns all elements from 12:00:00 to 12:15:00 in the last grid.\n"
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Specifies complex nested filters on distinct datapoints allowing to query by attached entities.
    """
    where: DistinctDatapointsWhereQuery
  ): PagedDistinctDatapoints!

  """
  Retrieve all distinct metadata values for the given metadata types.
  """
  distinctMetadataValues(
    """
    The cursor after which items should be returned.
    """
    after: String

    """
    The entity type for which the distinct metadata values should be calculated.
    """
    entityType: MetadataTypeEntityTypes

    """
    The list of entity UUIDs for which the distinct metadata values should be returned.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The list of MetadataType UUIDs for which the distinct metadata values should be calculated.
    """
    metadataTypeUuid: [UUID]

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DistinctMetadataOrderByQuery]

    """
    Complex filtering over distinct metadata values.
    """
    where: DistinctMetadataValueQuery
  ): PagedDistinctMetadataValues!

  "The _DomainFeature_ query retrieves a specific _DomainFeature_ by its _slug_.\n_DomainFeatures_ are associated with a _Domain_ and represent a global setting within DRIVR which can be enabled or disabled.\n"
  domainFeature(
    "A slug is a unique identifier assigned to a specific _DomainFeature_. \n"
    slug: DomainFeatureSlug!
  ): DomainFeature!

  "This endpoint returns multiple _DomainFeatures_ for the current _Domain_ based on filter criteria specified as arguments.\nEach _DomainFeature_ represents a global setting which can be enabled or disabled.\nFor example, a _DomainFeature_ can represent a requirement for users to have an _email_.\n"
  domainFeatures(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [DomainFeatureOrderByQuery]

    "The unique identifier by which to filter _DomainFeatures_.\nIf specified, only _DomainFeatures_ with the given _slug_ will be returned.\n"
    slug: DomainFeatureSlug

    "A complex filter allowing for more granular filtering over _DomainFeatures_.\nUse this filter to build more complex queries for retrieving _DomainFeatures_.\n"
    where: DomainFeatureQuery
  ): PagedDomainFeatures!

  """
  Get a specific Event by UUID.
  """
  event(
    """
    The UUID of the Event.
    """
    uuid: UUID!
  ): Event!

  "Get a single _EventModel_ by its UUID.\nAn _EventModel_ acts as a template for DRIVR _Events_ and is used to model an _Event_ on different types of entities.\n"
  eventModel("The UUID of the _EventModel_.\n" uuid: UUID!): EventModel!

  """
  This endpoint gets a specific _EventModelLink_ by UUID.
  """
  eventModelLink(
    """
    The UUID of the _EventModelLink_ to retrieve.
    """
    uuid: UUID!
  ): EventModelLink!

  """
  This endpoint retrieves multiple _EventModelLink_'s filtered by various parameters.
  """
  eventModelLinks(
    """
    Filter by a list of codes, the _EventModelLink_'s attached _EventModel_'s are required to have.
    """
    eventModelCode: [String]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [EventModelLinkOrderByQuery]

    """
    Filter by a list of prototype UUID's. Valid prototype types are _ComponentModel_, _Service_ and _Characteristic_.
    """
    prototypeUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _EventModelLinks_.
    """
    where: EventModelLinkQuery
  ): PagedEventModelLinks!

  "Retrieve a list of _EventModels_ that match the specified filters.\n"
  eventModels(
    "Filter the _EventModels_ by code. Can be provided as a single string, or a list of strings.\n"
    code: [String]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [EventModelOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "Filter the _EventModels_ by complex condition. This can be one or multiple conditions, using field names as keys, and its specific conditions as the value of that key.\n"
    where: EventModelQuery
  ): PagedEventModels!

  """
  Get multiple Events.
  """
  events(
    """
    The cursor after which items should be returned.
    """
    after: String

    """
    The entity uuid by which to filter events.
    """
    entityUuid: UUID

    """
    The event model uuid by which to filter events.
    """
    eventModelUuid: UUID

    """
    The inclusive from of the window which data should be requested.
    """
    from: DateTime

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [EventOrderByQuery]

    """
    The status by which to filter the Events.
    """
    status: [EventStatus]

    """
    The exclusive to of the window which data should be requested
    """
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over events
    """
    where: EventQuery
  ): PagedEvents!

  """
  Retrieves a paged list of _Integrations_ available in DRIVR.
  """
  integrations(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [IntegrationOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over integrations.
    """
    where: IntegrationQuery
  ): PagedIntegrations!

  """
  Returns the details of the _Issuer_ with the provided `uuid`.
  """
  issuer(
    """
    The `uuid` of the _Issuer_ to be returned.
    """
    uuid: UUID!
  ): Issuer!

  """
  Retrieves a paged list of _Issuers_ available in DRIVR.
  """
  issuers(
    """
    The certificate UUID signed by the _Issuer_ object to be retrieved.
    """
    certificateUuid: UUID

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The name of the _Issuer_ object to be retrieved.
    """
    name: String

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [IssuerOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Issuers_.
    """
    where: IssuerQuery
  ): PagedIssuers!

  """
  Returns a list of paged _LoginMethods_ matching a given set of filters and ordering.
  """
  loginMethods(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [LoginMethodOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    The set of filters to apply for retrieving paged _LoginMethods_.
    """
    where: LoginMethodQuery
  ): PagedLoginMethods!

  """
  Returns the details of the _MachineUser_ with the provided `uuid`.
  """
  machineUser(
    """
    The `uuid` of the _MachineUser_ to be returned.
    """
    uuid: UUID!
  ): MachineUser!

  """
  Returns a list of paged _MachineUsers_ matching a given set of filters and ordering.
  """
  machineUsers(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [MachineUserOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    The set of filters to apply for retrieving paged _MachineUsers_.
    """
    where: MachineUserQuery
  ): PagedMachineUsers!

  """
  Retrieve a single _MetadataType_ by specifying its UUID.
  """
  metadataType(
    """
    The UUID of the _MetadataType_ to be retrieved.
    """
    uuid: UUID!
  ): MetadataType!

  """
  Retrieve a list of _MetadataType_ entities and apply filters to narrow down the search results.
  """
  metadataTypes(
    """
    An array of entity types to filter metadata fields by.
    """
    entityType: [MetadataTypeEntityTypes]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [MetadataTypeOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering of _MetadataType_ entities.
    """
    where: MetadataTypeQuery
  ): PagedMetadataTypes!

  """
  This endpoint retrieves a single _Organization_ by UUID.
  """
  organization(
    """
    The UUID of the _Organization_ to retrieve.
    """
    uuid: UUID!
  ): Organization!

  "Find _OrganizationSources_ by _Organization_ UUIDs and/or _DataSource_ UUIDs. An _OrganizationSource_ is a link to\nan external system where the _Organization_ was exported from, e.g. an Active Directory.\n"
  organizationSources(
    """
    The list of UUIDs of _DataSources_ from which the _OrganizationSources_ were exported.
    """
    dataSourceUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationSourceOrderByQuery]

    """
    The list of UUIDs of the _Organizations_ to which the fetched items belong to.
    """
    organizationUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over organization sources.
    """
    where: OrganizationSourceQuery
  ): PagedOrganizationSources!

  """
  This endpoint retrieves a single _OrganizationUnit_ by UUID.
  """
  organizationUnit(
    """
    The UUID of the _OrganizationUnit_ to retrieve.
    """
    uuid: UUID!
  ): OrganizationUnit!

  """
  This endpoint returns multiple _OrganizationUnits_ based on filter criteria specified as arguments.
  """
  organizationUnits(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationUnitOrderByQuery]

    """
    The _Organization_ _uuid_ by which to filter the _OrganizationUnit_.
    """
    organizationUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _OrganizationUnits_.
    """
    where: OrganizationUnitQuery
  ): PagedOrganizationUnits!

  """
  This endpoint returns multiple _Organizations_ based on filter criteria specified as arguments.
  """
  organizations(
    """
    Filter _Organizations_ by alias.
    """
    alias: String

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Filter _Organizations_ by name.
    """
    name: String

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Organizations_.
    """
    where: OrganizationQuery
  ): PagedOrganizations!

  """
  Retrieve a specific _Role_ by its UUID.
  """
  role(
    """
    The UUID of the _Role_ to be retrieved.
    """
    uuid: UUID!
  ): Role!

  """
  Returns the details of a single _RoleAssignment_ specified by `uuid`.
  """
  roleAssignment(
    """
    The `uuid` of the _RoleAssignment_ to retrieve details for.
    """
    uuid: UUID!
  ): RoleAssignment!

  """
  Retrieve a list of _RoleAssignmentSource_ entities that match the specified filter criteria, along with contextual metadata.
  """
  roleAssignmentSources(
    """
    A list of _DataSource_ UUIDs used to filter the retrieved _RoleAssignmentSource_ entities.
    """
    dataSourceUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentSourceOrderByQuery]

    """
    A list of _RoleAssignment_ UUIDs used to filter the retrieved _RoleAssignmentSource_ entities.
    """
    roleAssignmentUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    RoleAssignmentSourceQuery provides complex filter over _RoleAssignmentSource_'s
    """
    where: RoleAssignmentSourceQuery
  ): PagedRoleAssignmentSources!

  """
  Retrieves a list of _RoleAssignment_'s. Use query parameters to filter results or paginate through results.
  """
  roleAssignments(
    """
    The `uuid` of assignee (_User_, Organization_, _OrganizationUnit_, or _MachineUser_) for which to retrieve _RoleAssignment_'s.
    """
    assigneeUuid: [UUID]

    """
    The `uuid` of entity (_Domain_ or _System_) for which to retrieve _RoleAssignment_'s.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    The `uuid` of the _Role_ for which to retrieve _RoleAssignment_'s.
    """
    roleUuid: [UUID]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    RoleAssignmentQuery provides complex filter over _RoleAssignment_'s
    """
    where: RoleAssignmentQuery
  ): PagedRoleAssignments!

  """
  Retrieves multiple _Role_ objects that match the specified filters.
  """
  roles(
    """
    The domain UUID associated with the _Role_ object.
    """
    domainUuid: UUID

    """
    The type of entity that the _Role_ object pertains to.
    """
    entityType: RoleEntityType

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The name of the _Role_ object to be retrieved.
    """
    name: String

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Role_ objects.
    """
    where: RoleWhereQuery
  ): PagedRoles!

  """
  Retrieve a single _Service_ object by its UUID.
  """
  service(
    """
    The UUID of the _Service_ to be retrieved.
    """
    uuid: UUID!
  ): Service!

  "This endpoint retrieves multiple _Services_ with various filters.\nIt has support for complex filtering over the _Services_ and results are paginated by `limit` and `offset`.\nRequires UUID information for domain and orders the results.\n"
  services(
    """
    The list of _Service_ codes by which to filter.
    """
    code: [String]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ServiceOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Services_.
    """
    where: ServiceQuery
  ): PagedServices!

  """
  Retrieve multiple _Setpoints_.
  """
  setpoints(
    """
    The cursor after which items should be returned.
    """
    after: String

    """
    The list of Characteristic codes by which to filter fetched items.
    """
    characteristicCode: [String]

    """
    The list of Characteristic UUIDs by which to filter fetched items.
    """
    characteristicUuid: [UUID]

    """
    The list of Component codes by which to filter fetched items.
    """
    componentCode: [String]

    """
    The list of Component Model codes by which to filter fetched items.
    """
    componentModelCode: [String]

    """
    The list of Component Model UUIDs by which to filter fetched items.
    """
    componentModelUuid: [UUID]

    """
    The list of Component UUIDs by which to filter fetched items.
    """
    componentUuid: [UUID]

    "The inclusive start of the window which data should be requested\nIf a `grid` is passed along with this parameter, the value will be adjusted onto the previous possible time. \nA grid of 1h will snap to the previous full hour\nA grid of 1d snaps to the previous midnight in the UTC time zone\nA grid of 1w snaps to the previous midnight on Monday in the UTC time zone\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with a time of 12:12:00 matches to 12:00:00 and returns all elements from 12:00:00 to 12:15:00 in this grid.\n"
    from: DateTime

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [SetpointOrderByQuery]

    "Optional `Integer`. Configures the rounding of raw values before being counted.\n`round` specifies the number decimals to use when rounding the number.\n0 rounds to the nearest integer. Optional, defaults to no rounding applied.\n"
    round: Int

    """
    The list of _Service_ codes by which to filter fetched items.
    """
    serviceCode: [String]

    """
    A list of _Service_ & _ComponentModel_ relationship indices to filter retrieved items.
    """
    serviceIndex: [Int]

    """
    A list of _Service_ UUIDs by which to filter retrieved items.
    """
    serviceUuid: [UUID]

    """
    The list of System codes by which to filter fetched items.
    """
    systemCode: [String]

    """
    The list of System UUIDs by which to filter fetched items.
    """
    systemUuid: [UUID]

    """
    The list of TimeStream UUIDs by which to filter fetched items.
    """
    timeStreamUuid: [UUID]

    "The exclusive end of the window which data should be requested\nIf a grid is passed along with this parameter, the value will be adjusted onto the next possible time. \nA grid of 1h will snap to the next full hour\nA grid of 1d snaps to next midnight in the UTC time zone\nA grid of 1w snaps to the next midnight on Monday in the UTC time zone.\nAll grids less than 1h match to the common timespan which is requested. E.g. a grid of 15m with an `to` time of 12:12:00 matches to 12:15:00 and returns all elements from 12:00:00 to 12:15:00 in the last grid.\n"
    to: DateTime

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Filter _Setpoints_ based on specific criteria.
    """
    where: SetpointsWhereQuery
  ): PagedSetpoints!

  """
  Retrieves the data of a DRIVR _System_ by UUID.
  """
  system(
    """
    The UUID of the _System_ whose data you want to retrieve.
    """
    uuid: UUID!
  ): System!

  """
  Retrieves a paged list of _Systems_ available in DRIVR.
  """
  systems(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [SystemOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over systems.
    """
    where: SystemQuery
  ): PagedSystems!

  """
  Retrieve a single _TimeStream_ by `uuid`
  """
  timeStream(
    """
    The UUID of the TimeStream.
    """
    uuid: UUID!
  ): TimeStream!

  """
  Retrieve a paged list of _TimeStream_'s
  """
  timeStreams(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [TimeStreamOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over TimeStreams.
    """
    where: TimeStreamQuery
  ): PagedTimeStreams!

  "This endpoint is used to retrieve a specific _User_ and its information by a given UUID.\n"
  user(
    """
    The UUID of the _User_ whose account you wish to retrieve.
    """
    uuid: UUID!
  ): User!

  "This endpoint retrieves multiple _UserSources_, which represent the connection between specific _Users_ in DRIVR and specific _DataSources_.\n"
  userSources(
    """
    The list of _DataSource_ UUIDs by which to filter fetched items.
    """
    dataSourceUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [UserSourceOrderByQuery]

    """
    The list of _User_ UUIDs by which to filter fetched items.
    """
    userUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "This _where_ filter is used to narrow down the results of the `userSources` API endpoint.\nFor example, you can use `userSource: {dataSource: {uuid: {eq: \"<uuid>\"}}}` to select all _UserSources_ for a particular _DataSource_.\n"
    where: UserSourceQuery
  ): PagedUserSources!

  "This endpoint returns a list of multiple _Users_ in DRIVR that match the specified filters and pagination options.\n"
  users(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [UserOrderByQuery]

    """
    The status by which to filter entities.
    """
    status: [Status]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "This `where` filter is used to narrow down the results of the `users` API endpoint.\nThis filter allows for complex querying over _Users_ using fields.\n"
    where: UserQuery
  ): PagedUsers!

  """
  Returns details of the currently logged in _User_ or _MachineUser_. Returns an error if a non _User_ or _MachineUser_ is logged in.
  """
  whoami: Whoami!
}

"""
Represents a receipt of a created _Setpoint_.
"""
type ReceiptId {
  """
  Specifies the index of the receipt.
  """
  index: Int!

  """
  Specifies the receipt ID of the _Setpoint_.
  """
  receiptId: String!

  """
  Specifies the creation time of the _Setpoint_.
  """
  time: DateTime!

  """
  Specifies the time stream UUID of the _Setpoint_.
  """
  timeStreamUuid: UUID!
}

input ResourceOwners {
  """
  """
  organization: NestedOrganizationQuery

  """
  """
  organizationUnit: NestedOrganizationUnitQuery

  """
  """
  user: NestedUserQuery
}

"""
A _Role_ describes the function assigned to an assignee, such as a _User_ or _Organization_, within DRIVR
"""
type Role implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The domain UUID of the _Role_.
  """
  domainUuid: UUID

  """
  The type of entity that the `Role` pertains to.
  """
  entityType: RoleEntityType!

  """
  The name of the _Role_.
  """
  name: String!

  """
  The status of the _Role_.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The `RoleAssigneeType` class. The `RoleAssigneeType` class enumerates the possible types of models that can be assigned to a `Role` via a `RoleAssignment`.
"""
enum RoleAssigneeType {
  """
  Represents a _MachineUser_ that is assigned to a `Role` object.
  """
  MACHINE_USER

  """
  Represents a _Organization_ that is assigned to a `Role` object.
  """
  ORGANIZATION

  """
  Represents an _OrganizationUnit_ that is assigned to a `Role` object.
  """
  ORGANIZATION_UNIT

  """
  Represents a _User_ that is assigned to a `Role` object.
  """
  USER
}

"""
Apply the filter operation to role-assignee-type value.
"""
input RoleAssigneeTypeQueryField {
  """
  Equals
  """
  _eq: RoleAssigneeType

  """
  Is in the list
  """
  _in: [RoleAssigneeType]

  """
  Does NOT equal
  """
  _neq: RoleAssigneeType

  """
  Is NOT in the list
  """
  _nin: [RoleAssigneeType]

  """
  Is NULL
  """
  _null: Boolean
}

"The root node that contains all details about a specific _RoleAssignment_.\n_RoleAssignments_ can be either directly assigned to a _User_/_MachineUser_ or to an _Organization_/_OrganizationUnit_.\n1. All members of an _Organization_ will inherit the _RoleAssignment_ of the _Organization_ and all child _OrganizationUnits_ of that _Organization_.\n2. All members of an _OrganizationUnit_ will inherit the _RoleAssignment_ of the _OrganizationUnit_ and all child _OrganizationUnits_.\n3. _RoleAssignments_ directly assigned to a _User_/_MachineUser_ will not be inherited.\n"
type RoleAssignment implements Entity {
  """
  The RoleAssignment's Assignee.
  """
  assignee: RoleAssignmentAssignee!

  """
  The UUID of the Role's assignee. An assignee can be a _User_, _Organization_, _OrganizationUnit_, or an _MachineUser_.
  """
  assigneeUuid: UUID

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The RoleAssignment's Entity.
  """
  entity: RoleAssignmentEntity!

  """
  The UUID of the Role's Entity.
  """
  entityUuid: UUID

  """
  The entity's Role.
  """
  role: Role

  """
  The UUID of the entity's Role.
  """
  roleUuid: UUID

  """
  A list of _RoleAssignmentSource_'s associated with the _RoleAssignment_.
  """
  sources(
    """
    The `uuid` of the _DataSource_ for which to retrieve the sources.
    """
    dataSourceUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentSourceOrderByQuery]

    """
    The `uuid` of the _RoleAssignment_ for which to retrieve sources.
    """
    roleAssignmentUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    RoleAssignmentSourceQuery provides complex filter over _RoleAssignmentSource_'s
    """
    where: RoleAssignmentSourceQuery
  ): PagedRoleAssignmentSources!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The assignee type of a RoleAssignment model
"""
union RoleAssignmentAssignee =
    MachineUser
  | Organization
  | OrganizationUnit
  | User

input RoleAssignmentAssignees {
  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _MachineUser_.
  """
  machineUser: NestedMachineUserQuery

  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _Organization_.
  """
  organization: NestedOrganizationQuery

  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _Organization_Unit_.
  """
  organizationUnit: NestedOrganizationUnitQuery

  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _User_.
  """
  user: NestedUserQuery
}

input RoleAssignmentEntities {
  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _ApplicationConsumer_.
  """
  applicationConsumer: NestedApplicationConsumerQuery

  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _Domain_.
  """
  domain: NestedDomainQuery

  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _Organization_.
  """
  organization: NestedOrganizationQuery

  """
  Filters that can be used to filter and retrieve _RoleAssignments_ associated with the _System_.
  """
  system: NestedSystemQuery
}

"""
The entity type of a RoleAssignment model
"""
union RoleAssignmentEntity =
    ApplicationConsumer
  | Domain
  | Organization
  | System

"""
Defines the sorting order for _RoleAssignments_'
"""
input RoleAssignmentOrderByQuery {
  """
  Order _RoleAssignment_ by _uuid_ field of associated assignee.
  """
  assigneeUuid: OrderByDirection

  """
  """
  createdAt: OrderByDirection

  """
  Order _RoleAssignment_ by _uuid_ field of associated entity.
  """
  entityUuid: OrderByDirection

  """
  Order _RoleAssignment_ by _uuid_ field of associated _Role_.
  """
  roleUuid: OrderByDirection

  """
  """
  status: OrderByDirection

  """
  """
  updatedAt: OrderByDirection

  """
  """
  uuid: OrderByDirection
}

"""
RoleAssignmentQuery provides complex filter over _RoleAssignments_
"""
input RoleAssignmentQuery {
  """
  All passed queries must match
  """
  _and: [RoleAssignmentQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [RoleAssignmentQuery]

  """
  """
  assignee: RoleAssignmentAssignees

  """
  Filter by _assignee_type_.
  """
  assigneeType: RoleAssigneeTypeQueryField

  """
  Filter by _assignee_uuid_.
  """
  assigneeUuid: UuidQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  entity: RoleAssignmentEntities

  """
  Filter by _entity_type_.
  """
  entityType: RoleEntityTypeQueryField

  """
  Filter by _entity_uuid_.
  """
  entityUuid: UuidQueryField

  """
  Filter by _Role_.
  """
  role: NestedRoleWhereQuery

  """
  Filter by _role_uuid_.
  """
  roleUuid: UuidQueryField

  """
  Filter by _RoleAssignmentSource_.
  """
  sources: NestedRoleAssignmentSourceQuery

  """
  Filter by _status_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_.
  """
  uuid: UuidQueryField
}

"""
A _RoleAssignmentSource_ is an assignment of a _DataSource_ for a _RoleAssignment_.
"""
type RoleAssignmentSource implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The DataSource linked to the the entity.
  """
  dataSource: DataSource

  """
  The UUID of the DataSource linked to the entity.
  """
  dataSourceUuid: UUID

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The RoleAssignment linked to the the entity.
  """
  roleAssignment: RoleAssignment

  """
  The UUID of the RoleAssignment linked to the entity.
  """
  roleAssignmentUuid: UUID

  """
  An identifier in an external system.
  """
  sourceId: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
The RoleAssignmentSourceOrderByQuery provides the ability to order a list of _RoleAssignmentSource_ by various fields associated with the _RoleAssignmentSources_.
"""
input RoleAssignmentSourceOrderByQuery {
  """
  Order _RoleAssignmentSource_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _RoleAssignmentSource_ by _uuid_ field of associated _DataSource_.
  """
  dataSourceUuid: OrderByDirection

  """
  Order _RoleAssignmentSource_ by _uuid_ field of associated _RoleAssignment_.
  """
  roleAssignmentUuid: OrderByDirection

  """
  Order _RoleAssignmentSource_ by _sourceId_ field.
  """
  sourceId: OrderByDirection

  """
  Order _RoleAssignmentSource_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _RoleAssignmentSource_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
RoleAssignmentSourceQuery provides complex filters over _RoleAssignmentSources_'
"""
input RoleAssignmentSourceQuery {
  """
  All passed queries must match
  """
  _and: [RoleAssignmentSourceQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [RoleAssignmentSourceQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _DataSource_.
  """
  dataSource: NestedDataSourceQuery

  """
  Filter by the linked _DataSource_ _uuid_.
  """
  dataSourceUuid: UuidQueryField

  """
  Filter by _RoleAssignment_.
  """
  roleAssignment: NestedRoleAssignmentQuery

  """
  Filter by _RoleAssignment_ _uuid_.
  """
  roleAssignmentUuid: UuidQueryField

  """
  Filter by _source_id_.
  """
  sourceId: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by _uuid_.
  """
  uuid: UuidQueryField
}

"""
The `RoleEntityTypeEnum` class. The `RoleEntityTypeEnum` class enumerates the possible types of entities that can be assigned to a `Role` via a `RoleAssignment`.
"""
enum RoleEntityType {
  """
  Represents an _Application Consumer_ on which a `Role` object has permission.
  """
  APPLICATION_CONSUMER

  """
  Represents a _Domain_ on which a `Role` object has permission.
  """
  DOMAIN

  """
  Represents an _Organization_ on which a `Role` object has permission.
  """
  ORGANIZATION

  """
  Represents a _System_ on which a `Role` object has permission.
  """
  SYSTEM
}

"""
Apply the filter operation to role-entity-type value.
"""
input RoleEntityTypeQueryField {
  """
  Equals
  """
  _eq: RoleEntityType

  """
  Is in the list
  """
  _in: [RoleEntityType]

  """
  Does NOT equal
  """
  _neq: RoleEntityType

  """
  Is NOT in the list
  """
  _nin: [RoleEntityType]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A _RoleOrderByQuery_ allows sorting of _Role_ objects based on various fields. The available fields for sorting are _name_, _entity_type_, _domain_uuid_, and _status_
"""
input RoleOrderByQuery {
  """
  Order _Role_ by _uuid_ field of associated _Domain_.
  """
  domainUuid: OrderByDirection

  """
  Order _Role_ by _entityType_ field.
  """
  entityType: OrderByDirection

  """
  Order _Role_ by _name_ field.
  """
  name: OrderByDirection

  """
  Order _Role_ by _status_ field.
  """
  status: OrderByDirection
}

"""
A _RoleWhereQuery_ allows for complex filtering of _Role_ objects based on specific criteria.
"""
input RoleWhereQuery {
  """
  All passed queries must match
  """
  _and: [RoleWhereQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [RoleWhereQuery]

  """
  Filter _Role_ objects by the assigned _Domain_'s UUID.
  """
  domainUuid: UuidQueryField

  """
  Filter _Role_ objects by the type of entity that they pertain to.
  """
  entityType: RoleEntityTypeQueryField

  """
  Filter _Role_ objects by name.
  """
  name: StringQueryField

  """
  Filter _Role_ objects by status.
  """
  status: StatusQueryField
}

"A _Service_ is an inventory of capabilities that a specific hardware component provides. It can be hardware, software, or a combination of both.\nFor example, a hardware service might describe the functionality of a 4G module in a smartphone or an environmental sensor in a smart home device.\nA software service might describe the functionality of a backend for a web application or an API for an app.\n"
type Service implements Entity {
  """
  A list of Characteristics linked to the Service.
  """
  characteristics(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Characteristics_.
    """
    where: CharacteristicQuery
  ): PagedCharacteristics!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A list of ComponentModels linked to the Service.
  """
  componentModels(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentModelOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ComponentModels_.
    """
    where: ComponentModelQuery
  ): PagedComponentModels!

  """
  A list of Components linked to the Service.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"An individual _ServiceComponentModel_ link object that represents the relationship between a single _Service_ object and one or more _ComponentModel_ objects.\nAn example of this link could be a _Service_ object with code \"EC2\" that is associated with a _ComponentModel_ object for a web server that uses Amazon EC2 instances.\n"
type ServiceComponentModelLink implements Entity {
  """
  The entity's ComponentModel.
  """
  componentModel: ComponentModel!

  """
  The UUID of the entity's ComponentModel.
  """
  componentModelUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The integer index value of this entity.
  """
  index: Int

  """
  The _Service_ the entity references.
  """
  service: Service

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"An individual _Service_ object that can be associated with one or more _Component_ objects.\nFor example could be a _Service_ with code \"S3\" that is associated with a _Component_ object for a data storage system that uses Amazon S3.\n"
type ServiceOnComponent implements Entity {
  """
  A list of Characteristics linked to the Service.
  """
  characteristics(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Characteristics_.
    """
    where: CharacteristicQuery
  ): PagedCharacteristics!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A list of ComponentModels linked to the Service.
  """
  componentModels(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentModelOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ComponentModels_.
    """
    where: ComponentModelQuery
  ): PagedComponentModels!

  """
  A list of Components linked to the Service.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  A human-readable name representing the entity.
  """
  name: String

  """
  The index of the _Service_ & entity relationship to be retrieved.
  """
  serviceIndex: Int!

  """
  The UUID of the related _Service_ entity.
  """
  serviceUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
An individual _Service_ object that can be associated with one or more _ComponentModel_ objects. For example, a _Service_ with code "EC2" could be associated with a _ComponentModel_ object for a web server that uses Amazon EC2 instance.
"""
type ServiceOnComponentModel implements Entity {
  """
  A list of Characteristics linked to the Service.
  """
  characteristics(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CharacteristicOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Characteristics_.
    """
    where: CharacteristicQuery
  ): PagedCharacteristics!

  """
  A human or machine-readable code representing the entity.
  """
  code: String

  """
  A list of Components linked to the Service.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  A human-readable name representing the entity.
  """
  name: String

  """
  The index of the _Service_ & entity relationship to be retrieved.
  """
  serviceIndex: Int

  """
  The UUID of the related _Service_ entity.
  """
  serviceUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Specifies which fields can be used to order the resultsof a _Service_  and _ComponentModel_ relation query.
"""
input ServiceOnComponentModelOrderByQuery {
  """
  Orders _Service_ based on _code_ field.
  """
  code: OrderByDirection

  """
  Orders _Service_ based on _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Orders _Service_ based on _name_ field.
  """
  name: OrderByDirection

  """
  Orders _ServiceOnComponentModel_ based on _index_ field.
  """
  serviceIndex: OrderByDirection

  """
  Orders _Service_ based on _status_ field.
  """
  status: OrderByDirection

  """
  Orders _Service_ based on _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Orders _Service_ based on _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
"""
input ServiceOnComponentModelQuery {
  """
  All passed queries must match
  """
  _and: [ServiceOnComponentModelQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ServiceOnComponentModelQuery]

  """
  Filter by _AggregatedDatapoints_ associated with the _Services_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by the _code_ field of a _Service_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _CurrentDatapoints_ associated with the _Services_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_ associated with the _Services_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Service_.
  """
  name: StringQueryField

  """
  Filter _ServiceOnComponentModel_ relation using _index_.
  """
  serviceIndex: IntQueryField

  """
  Filter by _status_ of a _Service_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

"""
Specifies which fields can be used to order the results of a _Service_  and _Component_ relation query.
"""
input ServiceOnComponentOrderByQuery {
  """
  Orders _Service_ based on _code_ field.
  """
  code: OrderByDirection

  """
  Orders _Service_ based on _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Orders _Service_ based on _name_ field.
  """
  name: OrderByDirection

  """
  Orders _ServiceOnComponent_ based on _index_ field.
  """
  serviceIndex: OrderByDirection

  """
  Orders _Service_ based on _status_ field.
  """
  status: OrderByDirection

  """
  Orders _Service_ based on _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Orders _Service_ based on _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
The ServiceOnComponentQuery is a WHERE-query which allows you to specify complex filters for retrieving _Service_ and _Component_ relation objects based on their attributes.
"""
input ServiceOnComponentQuery {
  """
  All passed queries must match
  """
  _and: [ServiceOnComponentQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ServiceOnComponentQuery]

  """
  Filter by _AggregatedDatapoints_ associated with the _Services_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by the _code_ field of a _Service_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _CurrentDatapoints_ associated with the _Services_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_ associated with the _Services_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Service_.
  """
  name: StringQueryField

  """
  Filter _ServiceOnComponent_ relation using _index_.
  """
  serviceIndex: IntQueryField

  """
  Filter by _status_ of a _Service_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

"""
Specifies which fields can be used to order the results of a _Service_ query.
"""
input ServiceOrderByQuery {
  """
  Orders _Service_ based on _code_ field.
  """
  code: OrderByDirection

  """
  Orders _Service_ based on _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Orders _Service_ based on _name_ field.
  """
  name: OrderByDirection

  """
  Orders _Service_ based on _status_ field.
  """
  status: OrderByDirection

  """
  Orders _Service_ based on _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Orders _Service_ based on _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
The ServiceQuery is a WHERE-query which allows you to specify complex filters for retrieving _Service_ objects based on their attributes.
"""
input ServiceQuery {
  """
  All passed queries must match
  """
  _and: [ServiceQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [ServiceQuery]

  """
  Filter by _AggregatedDatapoints_ associated with the _Services_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by the _code_ field of a _Service_.
  """
  code: StringQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by _CurrentDatapoints_ associated with the _Services_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filter by _Datapoints_ associated with the _Services_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by _name_ of the _Service_.
  """
  name: StringQueryField

  """
  Filter by _status_ of a _Service_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

"""
A Setpoint in the system.
"""
interface Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!
}

"""
A _Setpoint_ containing a blob value.
"""
type SetpointBlob implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The binary large object (blob) value contained in the _Setpoint_.
  """
  value: String!
}

"""
A _Setpoint_ containing a boolean value.
"""
type SetpointBoolean implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The bool value contained in the _Setpoint_.
  """
  value: Boolean!
}

"""
A _Setpoint_ containing a date value.
"""
type SetpointDate implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The date value contained in the _Setpoint_.
  """
  value: Date!
}

"""
A _Setpoint_ containing a float value.
"""
type SetpointFloat implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The floating point value contained in the _Setpoint_.
  """
  value: Float!
}

"""
"""
input SetpointInputBlob {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The base64-encoded binary data which should be stored into DRIVR.
  """
  value: String!
}

"""
"""
input SetpointInputBoolean {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  Store boolean values in DRIVR to represent `true`/`false` states.
  """
  value: Boolean!
}

"""
"""
input SetpointInputDate {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The date value which should be stored into DRIVR.
  """
  value: Date!
}

"""
"""
input SetpointInputFloat {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The float value which should be stored into DRIVR.
  """
  value: Float!
}

"""
"""
input SetpointInputInteger {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The integer value which should be stored into DRIVR.
  """
  value: Int!
}

"""
"""
input SetpointInputJson {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The string representation of JSON data which should be stored into DRIVR.
  """
  value: JSON!
}

"""
"""
input SetpointInputSelect {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The selected option or options which should be added.
  """
  value: [String]!
}

"""
"""
input SetpointInputString {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The string value which should be stored into DRIVR.
  """
  value: String!
}

"""
"""
input SetpointInputTime {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The time value which should be stored into DRIVR.
  """
  value: Time!
}

"""
"""
input SetpointInputTimespan {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The timespan value which should be stored into DRIVR.
  """
  value: Timespan!
}

"""
"""
input SetpointInputTimestamp {
  """
  The code of the datapoint/setpoint's characteristic.
  """
  characteristicCode: String

  """
  The uuid of the datapoint/setpoint's characteristic.
  """
  characteristicUuid: UUID

  """
  The code of the component which should be referenced.
  """
  componentCode: String

  """
  The UUID of the component which should be referenced.
  """
  componentUuid: UUID

  """
  The code of the datapoint/setpoint's service.
  """
  serviceCode: String

  """
  The index of the datapoint/setpoint's service/component_model relationship. Defaults to 0 if not provided.
  """
  serviceIndex: Int

  """
  The uuid of the datapoint/setpoint's service.
  """
  serviceUuid: UUID

  """
  The code of the datapoint/setpoint's system.
  """
  systemCode: String

  """
  The uuid of the datapoint/setpoint's system.
  """
  systemUuid: UUID

  """
  The uuid of the datapoint/setpoint's TimeStream.
  """
  timeStreamUuid: UUID

  """
  The timestamp value which should be stored into DRIVR.
  """
  value: DateTime!
}

"""
A _Setpoint_ that contains an integer value.
"""
type SetpointInteger implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The integer value contained in the _Setpoint_.
  """
  value: Int!
}

"""
A _Setpoint_ containing a JSON value.
"""
type SetpointJson implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The JSON value contained in the _Setpoint_.
  """
  value: JSON!
}

"""
Sorting and ordering options for setpoints.
"""
input SetpointOrderByQuery {
  """
  """
  characteristicUuid: OrderByDirection

  """
  """
  componentUuid: OrderByDirection

  """
  Order setpoints by _message_ field.
  """
  message: OrderByDirection

  """
  """
  serviceUuid: OrderByDirection

  """
  Order setpoints by _state_ field.
  """
  state: OrderByDirection

  """
  """
  systemUuid: OrderByDirection

  """
  """
  time: OrderByDirection

  """
  """
  timeStreamUuid: OrderByDirection
}

"""
A _Setpoint_ that contains the receipt IDs of the created _Setpoints_.
"""
type SetpointReceipts {
  """
  A list of the receipts IDs that track the creation of the _Setpoints_.
  """
  receiptIds: [ReceiptId!]!
}

"""
A _Setpoint_ that contains a select value. This value describes one or multiple options which have been checked from the referenced _Characteristic_.
"""
type SetpointSelect implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The values contained by the Setpoint. This field represents the selected option(s) of the _Characteristic_ belonging to the _Setpoint_.
  """
  value: [String!]!
}

"""
The `SetpointState` enum represents the various states that a _Setpoint_ object can be in.
"""
enum SetpointState {
  """
  This signifies that the _Setpoint_ has been accepted, and its state cannot be updated again.
  """
  ACCEPTED

  """
  This is the default state when a _Setpoint_ object is created.
  """
  CREATED

  """
  This signifies that the _Setpoint_ has been rejected, and its state cannot be updated again.
  """
  REJECTED
}

"""
Apply the filter operation to setpoint-state value.
"""
input SetpointStateQueryField {
  """
  Equals
  """
  _eq: SetpointState

  """
  Is in the list
  """
  _in: [SetpointState]

  """
  Does NOT equal
  """
  _neq: SetpointState

  """
  Is NOT in the list
  """
  _nin: [SetpointState]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A _Setpoint_ that contains a string value.
"""
type SetpointString implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The string value contained in the _Setpoint_.
  """
  value: String!
}

"""
A _Setpoint_ that represents a specific time of day.
"""
type SetpointTime implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The time value contained in the _Setpoint_.
  """
  value: Time!
}

"""
A _Setpoint_ that represents a period of time between two datetime values.
"""
type SetpointTimespan implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The timespan value contained in the _Setpoint_.
  """
  value: Timespan!
}

"""
A _Setpoint_ that contains a date and time value.
"""
type SetpointTimestamp implements Setpoint {
  """
  An optional message added to the receipt of a _Setpoint_.
  """
  message: String

  """
  The state of the _Setpoint_.
  """
  state: SetpointState!

  """
  """
  time: DateTime!

  """
  The entity's TimeStream.
  """
  timeStream: TimeStream!

  """
  The UUID of the entity's TimeStream.
  """
  timeStreamUuid: UUID!

  """
  The type of data the _Setpoint_ contains.
  """
  type: ValueDataType!

  """
  The unique ID for referencing the _Setpoint_.
  """
  uuid: UUID!

  """
  The date and time value of the _Setpoint_.
  """
  value: DateTime!
}

"""
SetpointsWhereQuery provides complex filter over setpoints
"""
input SetpointsWhereQuery {
  """
  All passed queries must match
  """
  _and: [SetpointsWhereQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [SetpointsWhereQuery]

  """
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ UUID.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentModel: NestedComponentModelQuery

  """
  Filter by _ComponentModel_ UUID.
  """
  componentModelUuid: UuidQueryField

  """
  Filter by _Component_ UUID.
  """
  componentUuid: UuidQueryField

  """
  Filter by _Domain_ UUID.
  """
  domainUuid: UuidQueryField

  """
  The inclusive, earliest time from which data should be requested.
  """
  from: DateTime

  """
  Filter by _message_ of the setpoint.
  """
  message: StringQueryField

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ & _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  Filter by _Service_ UUID.
  """
  serviceUuid: UuidQueryField

  """
  Filter by _state_ of the setpoint.
  """
  state: SetpointStateQueryField

  """
  """
  system: NestedSystemQuery

  """
  Filter by _System_ UUID.
  """
  systemUuid: UuidQueryField

  """
  Filter by Setpoint occurrence.
  """
  time: DateTimeQueryField

  """
  """
  timeStream: NestedTimeStreamQuery

  """
  Filter by _TimeStream_ UUID.
  """
  timeStreamUuid: UuidQueryField

  """
  The exclusive, latest time up to which data should be requested.
  """
  to: DateTime

  """
  """
  value: ValueQueryField
}

"""
The status of an entity within DRIVR.
"""
enum Status {
  """
  The entity is active and can be used / edited.
  """
  ACTIVATED

  """
  The entity is archived and cannot be used anymore. Any change to the entity is not allowed. You can still delete the entity to remove it completely.
  """
  ARCHIVED

  """
  The entity is deactivated and cannot be used anymore. Setting it back to `ACTIVATED` will enable it again.
  """
  DEACTIVATED
}

"""
Apply the filter operation to status value.
"""
input StatusQueryField {
  """
  Equals
  """
  _eq: Status

  """
  Is in the list
  """
  _in: [Status]

  """
  Does NOT equal
  """
  _neq: Status

  """
  Is NOT in the list
  """
  _nin: [Status]

  """
  Is NULL
  """
  _null: Boolean
}

input StringAggregates {
  """
  """
  count: IntQueryField

  """
  """
  first: StringQueryField

  """
  """
  last: StringQueryField
}

"""
Apply the filter operation to String value.
"""
input StringQueryField {
  """
  Equals
  """
  _eq: String

  """
  Case-insensitive filtering by like, allowing to do partial checks. The like call supports both % and _ which translates to many or one character.
  """
  _ilike: String

  """
  Is in the list
  """
  _in: [String]

  """
  Case-sensitive filtering by like, allowing to do partial checks. The like call supports both % and _ which translates to many or one character.
  """
  _like: String

  """
  Does NOT equal
  """
  _neq: String

  """
  Is NOT in the list
  """
  _nin: [String]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A _System_ serves as a logical group of one or more IoT components which are usually positioned at the same geographic location and serve a common system function in DRIVR.
"""
type System implements Entity {
  """
  A paged list of _Certificates_ belonging to the entity.
  """
  certificates(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [CertificateOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _Certificates_.
    """
    where: CertificateQuery
  ): PagedCertificates!

  """
  An identifier unique within all activated _Systems_ belonging to the same _Domain_.
  """
  code: String!

  """
  A paged list of _Components_ belonging to the _System_.
  """
  components(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ComponentOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over components.
    """
    where: ComponentQuery
  ): PagedComponents!

  """
  The connection state of the _System_.
  """
  connectionState: SystemConnectionState!

  """
  The time when the connection state of the _System_ has been set.
  """
  connectionStateUpdatedAt: DateTime

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  A description of the _System_.
  """
  description: String

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The UUID of the _Location_ at which the _System_ is located.
  """
  locationUuid: UUID

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  The name of the _System_.
  """
  name: String!

  "The _Account_ which owns the entity.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
  owner: Account

  "The UUID of the _Account_ which owns the entity.\nThis can be either a _User_, _Organization_, or _OrganizationUnit_.\nThis is an informational field only.\n"
  ownerUuid: UUID

  """
  A paged list of assigned RoleAssignments.
  """
  roleAssignments(
    """
    A list of assignee UUIDs by which to filter. The assignees can be _Users_, _Organizations_, _OrganizationUnits_ or _MachineUsers_.
    """
    assigneeUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
"""
enum SystemConnectionState {
  """
  The `System` has at least one `ACTIVATED` and `CONNECTED` `Component` but no `ACTIVATED` and `DISCONNECTED` `Component`.
  """
  CONNECTED

  """
  The `System` has no `ACTIVATED` and `CONNECTED` `Component` but at least one `ACTIVATED` and `DISCONNECTED` `Component`.
  """
  DISCONNECTED

  """
  The `System` has at least one `ACTIVATED` and `CONNECTED` `Component` and at least one `ACTIVATED` and `DISCONNECTED` `Component`.
  """
  PARTIALLY_CONNECTED

  """
  The `Components` of the `System` are either all `DEACTIVATED` or `ARCHIVED`. The `Components` do report a connection state of `UNDEFINED` or `NOT_CONNECTIVE`. The `System` status is `ARCHIVED` or `DEACTIVATED`.
  """
  UNDEFINED
}

"""
Apply the filter operation to system-connection-state value.
"""
input SystemConnectionStateQueryField {
  """
  Equals
  """
  _eq: SystemConnectionState

  """
  Is in the list
  """
  _in: [SystemConnectionState]

  """
  Does NOT equal
  """
  _neq: SystemConnectionState

  """
  Is NOT in the list
  """
  _nin: [SystemConnectionState]

  """
  Is NULL
  """
  _null: Boolean
}

"""
The SystemOrderByQuery provides the ability to order a list of _Systems_ by various fields associated with the _Systems_.
"""
input SystemOrderByQuery {
  """
  Orders the list by `code` of the _System_.
  """
  code: OrderByDirection

  """
  Orders the list by `connectionState` of the _System_.
  """
  connectionState: OrderByDirection

  """
  Orders the list by updated date of the _System_'s `connectionState`.
  """
  connectionStateUpdatedAt: OrderByDirection

  """
  Orders the list by creation time of the _System_.
  """
  createdAt: OrderByDirection

  """
  Orders the list by the `description` of the _System_.
  """
  description: OrderByDirection

  """
  Orders the list by the UUID of the _Location_ where the _System_ is located.
  """
  locationUuid: OrderByDirection

  """
  Orders the list by the `name` of the _System_.
  """
  name: OrderByDirection

  """
  Orders the list by the `UUID` of the owner of the _System_.
  """
  ownerUuid: OrderByDirection

  """
  Orders the list by the `status` of the _System_.
  """
  status: OrderByDirection

  """
  Orders the list by update time of the _System_.
  """
  updatedAt: OrderByDirection

  """
  Orders the list by UUID of the _System_.
  """
  uuid: OrderByDirection
}

"""
The SystemQuery is a WHERE-query which allows you to specify filters for retrieving _System_ objects based on their attributes.
"""
input SystemQuery {
  """
  All passed queries must match
  """
  _and: [SystemQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [SystemQuery]

  """
  Filters that can be used to filter and retrieve _AggregatedDatapoints_ associated with the _System_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by the code of the _System_.
  """
  code: StringQueryField

  """
  Filters that can be used to filter and retrieve _Components_ associated with the _System_.
  """
  components: NestedComponentQuery

  """
  Filter by the connection state of the _System_.
  """
  connectionState: SystemConnectionStateQueryField

  """
  Filter by the date and time the connection state was updated for the _System_.
  """
  connectionStateUpdatedAt: DateTimeQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filters that can be used to filter and retrieve _CurrentDatapoints_ associated with the _System_.
  """
  currentDatapoints: NestedCurrentDatapointsWhereQuery

  """
  Filters that can be used to filter and retrieve _Datapoints_ associated with the _System_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  Filter by the description of the _System_.
  """
  description: StringQueryField

  """
  Filters that can be used to filter and retrieve _Events_ associated with the _System_.
  """
  events: NestedEventFilterQuery

  """
  Filter by the UUID of the location where the _System_ is located.
  """
  locationUuid: UuidQueryField

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  Filter by the name of the _System_.
  """
  name: StringQueryField

  """
  """
  owner: ResourceOwners

  """
  Filter by the UUID of the owner of the _System_.
  """
  ownerUuid: UuidQueryField

  """
  Filter by the status of the _System_.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the UUID of the _System_.
  """
  uuid: UuidQueryField
}

"""
The `Time` type represents a Time value as specified by [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

input TimeAggregates {
  """
  """
  count: IntQueryField

  """
  """
  first: TimeQueryField

  """
  """
  last: TimeQueryField

  """
  """
  max: TimeQueryField

  """
  """
  min: TimeQueryField
}

"""
Apply the filter operation to Time value.
"""
input TimeQueryField {
  """
  Equals
  """
  _eq: Time

  """
  Greater than
  """
  _gt: Time

  """
  Greater than or equal
  """
  _gte: Time

  """
  Is in the list
  """
  _in: [Time]

  """
  Less than
  """
  _lt: Time

  """
  Less than or equal
  """
  _lte: Time

  """
  Does NOT equal
  """
  _neq: Time

  """
  Is NOT in the list
  """
  _nin: [Time]

  """
  Is NULL
  """
  _null: Boolean
}

"""
A _TimeStream_ represents a continuous series of datapoints associated with a specific _Component_, _Service_, and _Characteristic_.
"""
type TimeStream implements Entity {
  """
  The entity's Characteristic.
  """
  characteristic: Characteristic!

  """
  The UUID of the entity's Characteristic.
  """
  characteristicUuid: UUID!

  """
  The entity's Component.
  """
  component: Component!

  """
  The UUID of the entity's Component.
  """
  componentUuid: UUID!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The _Service_ the entity references.
  """
  service: Service!

  """
  The index of the _Service_ & entity relationship to be retrieved.
  """
  serviceIndex: Int!

  """
  The UUID of the entity's corresponding _Service_ object.
  """
  serviceUuid: UUID!

  """
  The current status of the entity.
  """
  status: Status!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _TimeStream_'s.
"""
input TimeStreamOrderByQuery {
  """
  Order _TimeStream_ by _uuid_ field of associated _Characteristic_.
  """
  characteristicUuid: OrderByDirection

  """
  Order _TimeStream_ by _uuid_ field of associated _Component_.
  """
  componentUuid: OrderByDirection

  """
  Order _TimeStream_ by _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _TimeStream_ by _serviceIndex_ field.
  """
  serviceIndex: OrderByDirection

  """
  Order _TimeStream_ by _uuid_ field of associated _Service_.
  """
  serviceUuid: OrderByDirection

  """
  Order _TimeStream_ by _status_ field.
  """
  status: OrderByDirection

  """
  Order _TimeStream_ by _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _TimeStream_ by _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
_TimeStreamQuery_ provides complex filters over _TimeStream_'s
"""
input TimeStreamQuery {
  """
  All passed queries must match
  """
  _and: [TimeStreamQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [TimeStreamQuery]

  """
  Filter by aggregated _DataPoints_.
  """
  aggregatedDatapoints: NestedAggregatedDatapointsWhereQuery

  """
  Filter by _Characteristic_.
  """
  characteristic: NestedCharacteristicQuery

  """
  Filter by _Characteristic_ `uuid`.
  """
  characteristicUuid: UuidQueryField

  """
  """
  component: NestedComponentQuery

  """
  """
  componentUuid: UuidQueryField

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by current _DataPoints_.
  """
  currentDatapoint: NestedCurrentDatapointsWhereQuery

  """
  Filter by _DataPoints_.
  """
  datapoints: NestedDatapointsWhereQuery

  """
  """
  service: NestedServiceQuery

  """
  Filter by _Service_ and _ComponentModel_ relationship index.
  """
  serviceIndex: IntQueryField

  """
  """
  serviceUuid: UuidQueryField

  """
  Filter by `status`.
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by `uuid`.
  """
  uuid: UuidQueryField
}

"""
The `Timespan` type represents an Duration value as specified by [iso8601](https://en.wikipedia.org/wiki/ISO_8601). Alternatively an integer can be set which represents the timespan in seconds. A timespan can be both negative and positive.
"""
scalar Timespan

input TimespanAggregates {
  """
  """
  avg: TimespanQueryField

  """
  """
  count: IntQueryField

  """
  """
  first: TimespanQueryField

  """
  """
  last: TimespanQueryField

  """
  """
  max: TimespanQueryField

  """
  """
  min: TimespanQueryField

  """
  """
  sum: TimespanQueryField
}

"""
Apply the filter operation to Timespan value.
"""
input TimespanQueryField {
  """
  Equals
  """
  _eq: Timespan

  """
  Greater than
  """
  _gt: Timespan

  """
  Greater than or equal
  """
  _gte: Timespan

  """
  Is in the list
  """
  _in: [Timespan]

  """
  Less than
  """
  _lt: Timespan

  """
  Less than or equal
  """
  _lte: Timespan

  """
  Does NOT equal
  """
  _neq: Timespan

  """
  Is NOT in the list
  """
  _nin: [Timespan]

  """
  Is NULL
  """
  _null: Boolean
}

input TimestampAggregates {
  """
  """
  count: IntQueryField

  """
  """
  first: DateTimeQueryField

  """
  """
  last: DateTimeQueryField

  """
  """
  max: DateTimeQueryField

  """
  """
  min: DateTimeQueryField
}

"""
Represents a universally unique identifier (`UUID`) following the hex representation as described in [RFC4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

input UpdateAzureAuthenticationMethodConfiguration {
  """
  The client id used to authenticate DRIVR against the authentication service.
  """
  clientId: String

  """
  The secret used to authenticate DRIVR against the authentication service.
  """
  clientSecret: String

  """
  The tenants which should be able to authenticate.
  """
  tenant: String
}

input UpdateGoogleAuthenticationMethodConfiguration {
  """
  The client id used to authenticate DRIVR against the authentication service.
  """
  clientId: String

  """
  The secret used to authenticate DRIVR against the authentication service.
  """
  clientSecret: String

  """
  The list of authentication scopes for the authentication service.
  """
  scopes: [String]
}

input UpdateOpenIdDelegatedAuthenticationMethodConfiguration {
  """
  The client id used to authenticate DRIVR against the authentication service.
  """
  clientId: String

  """
  the issuer URL which is pointing to the OpenID provider valid for the given client_id.
  """
  issuer: String
}

"""
A single _User_ within a _Domain_. They can additionally belong to a single _Organization_.
"""
type User implements Entity {
  """
  The user's _ApiTokens_.
  """
  apiTokens(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [ApiTokenOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _ApiTokens_.
    """
    where: ApiTokenQuery
  ): PagedApiTokens!

  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  The _email_ address of the _User_.
  """
  email: String

  """
  A paged list of _LoginMethods_ belonging to the _User_.
  """
  loginMethods(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [LoginMethodOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "Filter the _LoginMethods_ by complex conditions.\nThis can be one or multiple conditions, using field names as keys, and its specific conditions as the value of that key.\n"
    where: LoginMethodQuery
  ): PagedLoginMethods!

  """
  Metadata Key-Value store for this entity.
  """
  metadataKeyValueStore: [MetadataKeyValuePair!]!

  """
  The _name_ of the _User_.
  """
  name: String

  """
  The entity's Organization.
  """
  organization: Organization

  """
  A list of _OrganizationUnits_ linked to the _User_.
  """
  organizationUnits(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [OrganizationUnitOrderByQuery]

    """
    The list of _OrganizationUnit_ UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over _OrganizationUnits_.
    """
    where: OrganizationUnitQuery
  ): PagedOrganizationUnits!

  """
  The UUID of the entity's Organization.
  """
  organizationUuid: UUID

  """
  A paged list of RoleAssignments (directly assigned or inherited).
  """
  roleAssignments(
    """
    A list of assignee UUIDs by which to filter.
    """
    assigneeUuid: [UUID]

    """
    A list of entity UUIDs by which to filter.
    """
    entityUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [RoleAssignmentOrderByQuery]

    """
    A list of role UUIDs by which to filter.
    """
    roleUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]
  ): PagedRoleAssignments!

  """
  A paged list of _UserSources_ belonging to the _User_.
  """
  sources(
    """
    The list of _DataSource_ UUIDs by which to filter fetched items.
    """
    dataSourceUuid: [UUID]

    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [UserSourceOrderByQuery]

    """
    The list of _User_ UUIDs by which to filter fetched items.
    """
    userUuid: [UUID]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    "This _where_ filter is used to narrow down the results of the `userSources` API endpoint.\nFor example, you can use `userSource: {dataSource: {uuid: {eq: \"<uuid>\"}}}` to select all _UserSources_ for a particular _DataSource_.\n"
    where: UserSourceQuery
  ): PagedUserSources!

  """
  The current status of the entity.
  """
  status: Status!

  """
  A paged list of _Systems_ belonging to the _User_.
  """
  systems(
    """
    The maximum number of items which should be returned.
    """
    limit: Int

    """
    The offset of items which should be returned.
    """
    offset: Int

    """
    Order fetched items by the given list of fields. Each argument in the list may only contain a single `field: direction` pair. If multiple fields are provided, the fetched items will be ordered by each field in turn.
    """
    orderBy: [SystemOrderByQuery]

    """
    The list of UUIDs by which to filter fetched items.
    """
    uuid: [UUID]

    """
    Complex filtering over systems.
    """
    where: SystemQuery
  ): PagedSystems!

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
"""
input UserOrderByQuery {
  """
  """
  createdAt: OrderByDirection

  """
  """
  email: OrderByDirection

  """
  """
  name: OrderByDirection

  """
  """
  organizationUuid: OrderByDirection

  """
  """
  status: OrderByDirection

  """
  """
  updatedAt: OrderByDirection

  """
  """
  uuid: OrderByDirection
}

input UserQuery {
  """
  All passed queries must match
  """
  _and: [UserQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [UserQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  """
  email: StringQueryField

  """
  Filter by the login methods of the _User_.
  """
  loginMethods: NestedLoginMethodQuery

  """
  """
  metadataKeyValueStore: MetadataKeyValueStoreQueryField

  """
  """
  name: StringQueryField

  """
  """
  organization: NestedOrganizationQuery

  """
  """
  organizationUnits: NestedOrganizationUnitQuery

  """
  """
  organizationUuid: UuidQueryField

  """
  """
  sources: NestedUserSourceQuery

  """
  """
  status: StatusQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  """
  uuid: UuidQueryField
}

"A _UserSource_ is used to connect a _User_ account in DRIVR to a _DataSource_, and to store the identifier that the _User_ has within the external system represented by that _DataSource_.\nFor example, a _UserSource_ might be used to connect a DRIVR _User_ named \"X\" to a _DataSource_ that represents X's account in a third-party scheduling system.\n"
type UserSource implements Entity {
  """
  The date and time at which the entity was created.
  """
  createdAt: DateTime!

  """
  The DataSource linked to the the entity.
  """
  dataSource: DataSource

  """
  The UUID of the DataSource linked to the entity.
  """
  dataSourceUuid: UUID

  """
  The entity's Domain.
  """
  domain: Domain!

  """
  The UUID of the entity's Domain.
  """
  domainUuid: UUID!

  """
  An identifier in an external system.
  """
  sourceId: String

  """
  The date and time at which the entity was last updated.
  """
  updatedAt: DateTime

  "The _User_ linked to the entity.\nThis field provides more information about the _User_ linked to the entity.\n"
  user: User

  "The UUID of the _User_ linked to the entity.\nThis is usually the owner or person who created the entity.\nThey also could have been assigned to it after creation by another _User_.\n"
  userUuid: UUID

  """
  The unique ID for referencing the entity.
  """
  uuid: UUID!
}

"""
Sorting and ordering options for _UserSources_.
"""
input UserSourceOrderByQuery {
  """
  Order _UserSource_ by the _createdAt_ field.
  """
  createdAt: OrderByDirection

  """
  Order _UserSource_ by the _uuid_ field of associated _DataSource_.
  """
  dataSourceUuid: OrderByDirection

  """
  Order _UserSource_ by the _sourceId_ field.
  """
  sourceId: OrderByDirection

  """
  Order _UserSource_ by the _updatedAt_ field.
  """
  updatedAt: OrderByDirection

  """
  Order _UserSource_ by the _uuid_ field of associated _User_.
  """
  userUuid: OrderByDirection

  """
  Order _UserSource_ by the _uuid_ field.
  """
  uuid: OrderByDirection
}

"""
A complex filter allowing for more granular filtering over _UserSources_.
"""
input UserSourceQuery {
  """
  All passed queries must match
  """
  _and: [UserSourceQuery]

  """
  None of the passed UUIDs must be in the result set
  """
  _notOf: [UUID]

  """
  One of the passed UUIDs must be in the result set
  """
  _oneOf: [UUID]

  """
  One of the passed entities must match
  """
  _or: [UserSourceQuery]

  """
  """
  createdAt: DateTimeQueryField

  """
  Filter by the _DataSource_ associated with _UserSource_.
  """
  dataSource: NestedDataSourceQuery

  """
  Filter by the _DataSource_ UUID associated with _UserSource_.
  """
  dataSourceUuid: UuidQueryField

  """
  Filter by the _sourceId_ of the _UserSource_.
  """
  sourceId: StringQueryField

  """
  """
  updatedAt: DateTimeQueryField

  """
  Filter by the _User_ associated with _UserSource_.
  """
  user: NestedUserQuery

  """
  Filter by the _User_ UUID associated with _UserSource_.
  """
  userUuid: UuidQueryField

  """
  Filter by the UUID of the _UserSource_.
  """
  uuid: UuidQueryField
}

"""
Apply the filter operation to UUID value.
"""
input UuidQueryField {
  """
  Equals
  """
  _eq: UUID

  """
  Case-insensitive filtering by like, allowing to do partial checks. The like call supports both % and _ which translates to many or one character.
  """
  _ilike: String

  """
  Is in the list
  """
  _in: [UUID]

  """
  Case-sensitive filtering by like, allowing to do partial checks. The like call supports both % and _ which translates to many or one character.
  """
  _like: String

  """
  Does NOT equal
  """
  _neq: UUID

  """
  Is NOT in the list
  """
  _nin: [UUID]

  """
  Is NULL
  """
  _null: Boolean
}

"""
"""
enum ValueAggregate {
  "This aggregation returns the average of datapoints. Requires a number-like datapoint type.\n"
  AVG

  "This aggregation returns the number of datapoints.\n"
  COUNT

  "This aggregation returns the earliest datapoint.\n"
  FIRST

  "This aggregation returns the latest datapoint.\n"
  LAST

  "This aggregation returns the maximal datapoint. Requires a comparable datapoint type.\n"
  MAX

  "This aggregation returns the minimal datapoint. Requires a comparable datapoint type.\n"
  MIN

  "This aggregation returns the sum of datapoints. Requires a number-like datapoint type.\n"
  SUM
}

"""
A data type.
"""
enum ValueDataType {
  """
  """
  BLOB

  """
  """
  BOOLEAN

  """
  """
  DATE

  """
  """
  FLOAT

  """
  """
  INTEGER

  """
  """
  JSON

  """
  """
  STRING

  """
  """
  TIME

  """
  """
  TIMESPAN

  """
  """
  TIMESTAMP
}

"""
Filter by the value of datapoints and setpoints
"""
input ValueQueryField {
  """
  """
  blob: BlobQueryField

  """
  """
  boolean: BoolQueryField

  """
  """
  date: DateQueryField

  """
  """
  float: FloatQueryField

  """
  """
  integer: IntQueryField

  """
  """
  string: StringQueryField

  """
  """
  time: TimeQueryField

  """
  """
  timespan: TimespanQueryField

  """
  """
  timestamp: DateTimeQueryField
}

"""
A response from the `whoami` query. Returns either a _User_ or _MachineUser_.
"""
union Whoami = MachineUser | User
